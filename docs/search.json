[{"path":"index.html","id":"bienvenida","chapter":"Bienvenida","heading":"Bienvenida","text":"¡Les damos la bienvenida la asignatura Introducción la Programación en la Facultad de Ciencias Económicas y Estadística, Universidad Nacional de Rosario! La presente guía resume los conceptos más importantes que vamos desarrollar. La misma irá siendo revisada, completada y actualizada lo largo del cuatrimestre y está exenta de presentar errores o expresar ideas que puedan ser mejoradas. Avisanos si encontrás algo que deba ser cambiado. ¡Esperamos que juntos podamos pasarla bien al dar nuestros primeros pasos en la programación!Este material fue escrito por el Mgs. Lic. Marcos Prunello (Profesor Titular por Concurso). Se agradecen las observaciones realizadas por los integrantes de la cátedra, AUS. César Mignoni y Lic. Maite San Martín.","code":""},{"path":"introducción-a-la-programación.html","id":"introducción-a-la-programación","chapter":"1 Introducción a la Programación","heading":"1 Introducción a la Programación","text":"","code":""},{"path":"introducción-a-la-programación.html","id":"qué-es-la-programación","chapter":"1 Introducción a la Programación","heading":"1.1 Qué es la programación","text":"Las computadoras son una parte esencial de nuestra vida cotidiana. Casi todos los aparatos que usamos tienen algún tipo de computadora capaz de ejecutar ciertas tareas: lavarropas con distintos modos de lavado, consolas de juegos para momentos de entretenimiento, calculadoras súper potentes, computadoras personales que se usan para un montón de propósitos, teléfonos celulares con un sinfín de aplicaciones y miles de cosas más.Todos estos dispositivos con computadoras de distinto tipo tienen algo en común: alguien “les dice” cómo funcionar, es decir, les indica cuáles son los pasos que deben seguir para cumplir una tarea. De eso se trata la programación: es la actividad mediante la cual las personas le entregan una computadora un conjunto de instrucciones para que, al ejecutarlas, ésta pueda resolver un problema. Quienes realizan esta actividad reciben el nombre de programadores. Sin las personas que las programen, las computadoras dejan de ser útiles, por más complejos que sean estos aparatos. Los conjuntos de instrucciones que reciben las computadoras reciben el nombre de programas.La programación es un proceso creativo: en muchas ocasiones la tarea en cuestión puede cumplirse siguiendo distintos caminos y el programador es el que debe imaginar cuáles son y elegir uno. Algunos de estos caminos pueden ser mejores que otros, pero en cualquier caso la computadora se limitará seguir las instrucciones ideadas por el programador.Desafortunadamente, las computadoras entienden español ni otro idioma humano. Hay que pasarles las instrucciones en un lenguaje que sean capaces de entender. Para eso debemos aprender algún lenguaje de programación, que es más que un lenguaje artificial compuesto por una serie de expresiones que la computadora puede interpretar. Las computadoras interpretan nuestras instrucciones de forma muy literal, por lo tanto la hora de programar hay que ser muy específicos. Es necesario respetar las reglas del lenguaje de programación y ser claros en las indicaciones provistas.Ahora bien, ¿por qué debemos estudiar programación en la Licenciatura en Estadística? La actividad de los profesionales estadísticos está atravesada en su totalidad por la necesidad de manejar con soltura herramientas informáticas que nos asisten en las distintas etapas de nuestra labor, desde la recolección y depuración de conjuntos de datos, pasando por la aplicación de distintas metodologías de análisis, hasta la comunicación efectiva de los resultados. Por eso, en la asignatura Introducción la Programación estudiaremos los conceptos básicos de esta disciplina, fomentando la ejercitación del pensamiento abstracto y lógico necesario para poder entendernos hábilmente con la computadora y lograr que la misma realice las tareas que necesitamos.Para poner en práctica los conceptos sobre Programación que aprenderemos, vamos emplear un lenguaje que ha sido desarrollado específicamente para realizar tareas estadísticas, llamado R. Sin embargo, debemos resaltar que éste es un curso sobre R, es decir, nos dedicaremos aprender las herramientas que este lenguaje brinda para el análisis de datos. De hecho, frente variados problemas vamos dedicarnos crear soluciones que ya existen y están disponibles en R, pero lo haremos con el fin de utilizar dicho lenguaje para aprender y ejercitar nociones básicas de programación.","code":""},{"path":"introducción-a-la-programación.html","id":"una-breve-reseña-histórica-sobre-la-programación","chapter":"1 Introducción a la Programación","heading":"1.2 Una breve reseña histórica sobre la programación","text":"La historia de la programación está vinculada directamente con la de la computación. Esta palabra proviene del latín computatio, que deriva del verbo computare, cuyo significado es “enumerar cantidades”. Computación, en este sentido, designa la acción y efecto de computar, realizar una cuenta, un cálculo matemático. De allí que antiguamente computación fuese un término usado para referirse los cálculos realizados por una persona con un instrumento expresamente utilizado para tal fin (como el ábaco, por ejemplo) o sin él. En este sentido, la computación ha estado presente desde tiempos ancestrales, sin embargo debemos remontarnos al siglo XVII para encontrar los primeros dispositivos diseñados para automatizar cómputos matemáticos.En 1617 el matemático escocés John Napier (el mismo que definió los logaritmos) inventó un sistema conocido como los huesos de Napier o huesos neperianos que facilitaba la tarea de multiplicar, dividir y tomar raíces cuadradas, usando unas barras de hueso o marfil que tenían dígitos grabados. Esta fue la base para otras ideas más avanzadas, entre ellas la que dio origen la primera calculadora mecánica, inventada por el alemán Wilhelm Schickard en 1623, capaz de realizar cómputos aritméticos sencillos funcionando base de ruedas y engranajes. Se componía de dos mecanismos diferenciados, un ábaco de Napier de forma cilíndrica en la parte superior y un mecanismo en la inferior para realizar sumas parciales de los resultados obtenidos con el aparato de la parte superior. Fue llamado reloj calculador. partir de aquí se fueron desarrollando otros modelos, todos ellos teniendo en común el hecho de ser puramente mecánicos, sin motores ni otras fuentes de energía. El operador ingresaba números ubicando ruedas de metal en posiciones particulares y al girarlas otras partes de la máquina se movían y mostraban el resultado. Algunos ejemplos son las calculadoras del inglés William Oughtred en 1624, de Blaise Pascal en 1645 (llamada pascalina), la de Samuel Morland en 1666 y las de Leibniz, en 1673 y 1694.\nFigura 1.1: De izquierda derecha: los huesos de Napier (Museo Arqueológico Nacional de España), el reloj calculador de Schickard (Museo de la Ciencia de la Universidad Pública de Navarra) y una pascalina del año 1952\nEl siglo XVIII trajo consigo algunos otros diseños, pero un gran salto se dio comienzos del siglo XIX de mano de un tejedor y comerciante francés, Joseph Jacquard. En 1801 creó un telar que tenía un sistema de tarjetas perforadas para controlar las puntadas del tejido, de forma que fuera posible programar una gran diversidad de tramas y figuras. Sin saberlo, Jacquard sentó una idea fundamental para la creación de las computadoras.\nFigura 1.2: Un telar de Jacquard y sus tarjetas perforadas en el Museo de la ciencia y la industria en Mánchester.\nEn 1822 el matemático británico Charles Babbage publicó un diseño para la construcción de una máquina diferencial, que podía calcular valores de funciones polinómicas mediante el método de las diferencias. Este complejo sistema de ruedas y engranajes era el primero que podía trabajar automáticamente utilizando resultados de operaciones previas. Si bien el diseño era viable, por motivos técnicos y económicos lo pudo concretar (sólo construyó un modelo de menor escala). Sin embargo, Babbage se dio por vencido y en 1837 presentó el diseño de una máquina analítica, un aparato capaz de ejecutar cualquier tipo de cálculo matemático y que, por lo tanto, se podría utilizar con cualquier propósito. Tal como el telar de Jacquard, la operación de esta máquina sería controlada por un patrón de perforaciones hechas sobre una tarjetas que la misma podría leer. Al cambiar el patrón de las perforaciones, se podría cambiar el comportamiento de la máquina para que resuelva diferentes tipos de cálculos. Para la salida de resultados, la máquina sería capaz de perforar tarjetas. Además, funcionaría con un motor vapor y su tamaño hubiese sido de 30 metros de largo por 10 de ancho. Si bien Babbage tampoco llegó concretar en vida este diseño que dejó plasmado en más de 300 dibujos y 2200 páginas por motivos políticos, se lo considera como la primera conceptualización de lo que hoy conocemos como computadora, por lo cual Babbage es conocido como el padre de la computación.En 1843 Lady Ada Lovelace, una matemática y escritora británica, publicó una serie de notas sobre la máquina analítica de Babbage, en las que resaltaba sus potenciales aplicaciones prácticas, incluyendo la descripción detallada de tarjetas perforadas para que sea capaz de calcular los números de Bernoulli. Al haber señalado los pasos para que la máquina pueda cumplir con estas y otras tareas, Ada es considerada actualmente como la primera programadora del mundo, pesar de que en la época fue tomada en serio por la comunidad científica, principalmente por su condición de mujer.\nFigura 1.3: Charles Babbage, Ada Lovelace y el algoritmo que publicó Ada para calcular los números de Bernoulli con la máquina analítica de Charles.\nLa utilidad de las tarjetas perforadas quedó confirmada en 1890, cuando Herman Hollerith las utilizó para automatizar la tabulación de datos en el censo de Estados Unidos. Las perforaciones en determinados lugares representaban información como el sexo o la edad de las personas, logrando que se pudieran lograr clasificaciones y conteos de forma muy veloz. Así, se tardaron sólo 3 años en procesar la información del censo, cinco años menos que en el anterior de 1880. Con el fin de comercializar esta tecnología, Hollerith fundó una compañía que terminaría siendo la famosa International Business Machine (IBM), empresa líder en informática hasta el día de hoy.Sin embargo, la visión de Babbage de una computadora programable se hizo realidad hasta los años 1940, cuando el advenimiento de la electrónica hizo posible superar los dispositivos mecánicos existentes. John Atanasoff y Clifford Berry (Iowa State College, Estados Unidos) terminaron en 1942 en Iowa State College (Estados Unidos) una computadora electrónica capaz de resolver sistemas de ecuaciones lineales simultáneas, llamada ABC (por “Atanasoff Berry Computer”). La misma contaba con 300 tubos de vacío, unas bombillas de vidrio con ciertos componentes que podían recibir y modificar una señal eléctrica mediante el control del movimiento de los electrones produciendo una respuesta, que habían sido presentados por primera vez en 1906 por el estadounidense Lee De Forest. La ABC dio comienzo la conocida como la primera generación de computadoras basadas en el empleo de tubos de vacío.La primera computadora electrónica de propósito general fue la ENIAC, Electronic Numerical Integrator Computer, completada por Presper Eckert y John Mauchly en la Universidad de Pensilvania. Podía realizar cinco mil operaciones aritmética por segundo y tenía más de 18000 tubos de vacío, ocupando una sala de 9x15 metros en un sótano de la universidad donde se montó un sistema de aire acondicionado especial.Ni la ABC ni la ENIAC eran reprogramables: la ABC servía el propósito específico de resolver sistemas de ecuaciones y la ENIAC era controlada conectando ciertos cables en un panel, lo que hacía muy compleja su programación. El siguiente gran avance se produjo en 1945, cuando el matemático húngaro-estadounidense John von Neumann (Universidad de Princeton) propuso que los programas, es decir, las instrucciones para que la máquina opere, y también los datos necesarios, podrían ser representados y guardados en una memoria electrónica interna. Así nació el concepto de programa almacenado (o stored-program), en contraposición con el uso de tableros de conexiones y mecanismos similares de los modelos vigentes. Los creadores de la ENIAC, bajo la consultoría de von Neumann, implementaron esto en el diseño de su sucesora, la EDVAC, terminada en 1949.\nTambién ya había experimentado con esta idea el alemán Konrad Zuse, quien entre 1937 y 1941 desarrolló la Z3, por lo cual es considerada por algunos como la primera máquina completamente automática y programable. En lugar de usar tubos de vacíos, empleaba un conjunto de 2600 relés, unos dispositivos electromagnéticos inventados en 1835 y empleados, por ejemplo, en telegrafía.\n\nEl modelo original de la Z3 fue destruido en Berlín por un bombardeo durante la segunda guerra mundial.\nFigura 1.4: De izquierda derecha: las computadoras ABC, ENIAC y Z3\nEste nuevo paradigma cambió la historia de la computación, como también lo hizo la invención del transistor en 1947 en los Laboratorios Bell. Un transistor es un dispositivo electrónico semiconductor que entrega una señal de salida en respuesta una señal de entrada, mucho más pequeño que los tubos de vacío y que consumen menos energía eléctrica. Así, una computadora podía tener cientos de miles de transistores, obstante ocupando mucho espacio.Desde entonces, la computación ha evolucionado muy rápidamente, con la introducción de nuevos sistemas y conceptos, que llegan los complejos y poderosos diseños electrónicos que caracterizan la vida actual. En un intento de caracterizar y resumir esta impactante evolución, algunos historiadores dividen al desarrollo de las computadoras modernas en “generaciones” (esta clasificación es única y existen diversas versiones de la misma):Primera generación (aprox. 1940-1958): se trata de las computadoras electrónicas que usaban tubos de vacío para su circuito interno. Los equipos eran enormes y ocupan habitaciones enteras. Consumían mucha electricidad y generaban demasiado calor. Podía llevar días o semanas modificar las conexiones para hacer que la computadora resuelva un problema diferente. Usaban tarjetas perforadas y cinta de papel para la lectura de datos e impresiones para mostrar las salidas.Segunda generación (aprox. 1958-1964): se caracteriza por el uso de transistores (inventados en 1947) en lugar de tubos de vacío, permitiendo que las computadoras tengan un consumo eléctrico más eficiente, sean más baratas, más pequeñas y más rápidas.Tercera generación (aprox. 1964-1971): se inició en 1959 con el desarrollo de un circuito integrado (“chip”) que se trata de una pequeña placa de silicio sobre el cual se imprime un gran número de transistores conectados. La primera computadora de este estilo fue de IBM en 1960. Al ser más pequeñas y baratas, su uso llegó una mayor audiencia. Se pudo interactuar con la máquina mediante teclados, monitores y un sistema operativo, que posibilitaba ejecutar múltiples acciones la vez bajo el monitoreo de un programa central.Cuarta generación (aprox. 1971-presente): los avances tecnológicos permitieron construir la unidad entera de procesamiento de una computadora sobre un único chip de silicio (microprocesador), incluyendo la memoria y los controles de entrada y salida de datos. Todo lo que en una computadora de la primera generación ocupaba una habitación entera, fue capaz de entrar en la palma de una mano. El primer microprocesador fue el Intel 4004 de 1971, mientras que la primera computadora de uso doméstico fue desarrollada por IBM en 1981. Surgieron también en esta generación el ratón (mouse) y las interfaces gráficas de usuario (como Windows, en 1985).\nFigura 1.5: De derecha izquierda: un tubo de vacío, un transistor y un chip.\n","code":""},{"path":"introducción-a-la-programación.html","id":"software-y-hardware","chapter":"1 Introducción a la Programación","heading":"1.3 Software y hardware","text":"Como podemos ver, en la historia de la computación hubo dos aspectos que fueron evolucionando: las máquinas y los programas que las dirigen. Hacemos referencia estos elementos como hardware y software respectivamente, y es la conjunción de ambos la que le da vida la computación y hace posible la programación.\nFigura 1.6: Representación de la diferencia entre hardware y software.\nEl hardware es el conjunto de piezas físicas y tangibles de la computadora. Existen diversas formas de clasificar los elementos que componene al hardware, según distintos criterios:\nTabla 1.1:  Clasificación del hardware\n\\(~\\)Por otro lado tenemos al software, que es el conjunto de todos los programas (es decir, todas las instrucciones que recibe la computadora) que permiten que el hardware funcione y que se pueda concretar la ejecución de las tareas. tiene una existencia física, sino que es intangible. El software se puede clasificar de la siguiente forma:\nTabla 1.2:  Clasificación del software\n","code":""},{"path":"introducción-a-la-programación.html","id":"problemas-algoritmos-y-lenguajes-de-programación","chapter":"1 Introducción a la Programación","heading":"1.4 Problemas, algoritmos y lenguajes de programación","text":"Mencionamos anteriormente que la programación consistía en instruir una computadora para que resuelva un problema y que la comunicación de esas instrucciones debe ser realizada de forma clara. Es por eso que, ante un problema que debe ser resuelto computacionalmente, el primer paso es pensar detalladamente cuál puede ser una forma de resolverlo, es decir, crear un algoritmo. Un algoritmo es una estrategia consistente de un conjunto ordenado de pasos que nos lleva la solución de un problema o alcance de un objetivo. Luego, hay que traducir el algoritmo elegido al idioma de la computadora.Entonces, podemos decir que la resolución computacional de un problema consiste de dos etapas básicas:Diseño algorítmico: desarrollar un algoritmo, o elegir uno existente, que resuelva el problema.Codificación: expresar un algoritmo en un lenguaje de programación para que la computadora lo pueda interpretar y ejecutar.Al aprender sobre programación, comenzamos enfrentándonos problemas simples para los cuales la primera etapa parece sencilla, mientras que la codificación se torna dificultosa ya que hay que aprender las reglas del lenguaje de programación. Sin embargo, mientras que con práctica rápidamente podemos ganar facilidad para la escritura de código, el diseño algorítmico se torna cada vez más desafiante al encarar problemas más complejos. Es por eso que haremos hincapié en el planteo y desarrollo de algoritmos como una etapa fundamental en la programación.","code":""},{"path":"introducción-a-la-programación.html","id":"el-diseño-algorítmico","chapter":"1 Introducción a la Programación","heading":"1.4.1 El diseño algorítmico","text":"Cotidianamente, hacemos uso de algoritmos para llevar adelante casi todas las actividades que realizamos: preparar el desayuno, sacar pasear la mascota, poner en la tele un servicio de streaming para ver una película, etc. Cada una de estas tareas requiere llevar adelante algunas acciones de forma ordenada, aunque hagamos un listado de las mismas y procedamos casi sin pensar.Sin embargo, cuando estamos pensando la solución para un problema que va resolver una computadora, debemos ser claros y concretos, para asegurarnos de que al seguir los pasos del algoritmo se llegue la solución y para que quien tenga que codificarlo, nosotros mismos u otras personas, lo pueda entender sin problemas. Por eso, el primer paso es idear un algoritmo para su solución y expresarlo por escrito, por ejemplo, en español, pero adaptando el lenguaje humano formas lógicas que se acerquen las tareas que puede realizar una computadora. En programación, el lenguaje artificial e informal que usan los desarrolladores en la confección de algoritmos recibe el nombre de pseudocódigo. Es la herramienta que utilizamos para describir los algoritmos mezclando el lenguaje común con instrucciones de programación. es en sí mismo un lenguaje de programación, es decir, la computadora es capaz de entenderlo, sino que el objetivo del mismo es que el programador se centre en la solución lógica y luego lo utilice como guía al escribir el programa.El pseudocódigo, como cualquier otro lenguaje, está compuesto por:Un léxico: conjunto de palabras o frases válidas para escribir las instrucciones.Una sintaxis: reglas que establecen cómo se pueden combinar las distintas partes.Una semántica: significado que se les da las palabras o frases.El pseudocódigo sigue una estructura secuencial: define una acción o instrucción que sigue otra en secuencia. Esta estructura puede representarse de la siguiente forma:Se comienza con un título que describa el problema que el algoritmo resuelve, seguido por la palabra COMENZAR. Luego se detallan las acciones o instrucciones seguir y se concluye con la palabra FIN. Por ejemplo, si nuestro problema es poner en marcha un auto, el algoritmo para resolverlo puede ser expresado mediante el siguiente pseudocódigo:Es importante destacar la presencia de sangrías (sangrado) en el ejemplo anterior, que facilitan la lectura.Los algoritmos suelen ser representados también mediante diagramas de flujo, como el que se muestra en la siguiente figura1.\nFigura 1.7: Ejemplo del algoritmo “Arrancar el auto” representado gráficamente con un diagrama de flujo.\n","code":"ALGORITMO: \"Ejemplo\"\nCOMENZAR\n    Acción 1\n    Acción 2\n    ...\n    Acción N\nFINALGORITMO: \"Arrancar el auto\"\nCOMENZAR\n    INSERTAR la llave de contacto\n    UBICAR el cambio en punto muerto\n    GIRAR la llave hasta la posición de arranque\n    SI el motor arranca \n        ENTONCES\n            DEJAR la llave en posición \"encendido\"\n        SI NO\n            LLAMAR al mecánico\n    FINSI\nFIN"},{"path":"introducción-a-la-programación.html","id":"codificación","chapter":"1 Introducción a la Programación","heading":"1.4.2 Codificación","text":"El algoritmo anterior está presentado en pseudocódigo utilizando el lenguaje español, una opción razonable para compartir esta estrategia entre personas que se comuniquen con este idioma. Claramente, si queremos presentarle nuestro algoritmo alguien que sólo habla francés, el español ya sería una buena elección, y mucho menos si queremos presentarle el algoritmo una computadora. Para que una computadora pueda entender nuestro algoritmo, debemos traducirlo en un lenguaje de programación, que, como dijimos antes, es un idioma artificial diseñado para expresar cómputos que puedan ser llevados cabo por equipos electrónicos, es decir es un medio de comunicación entre el humano y la máquina.Si bien hay distintos lenguajes de programación, una computadora en definitiva es un aparato que sólo sabe hablar en binario, es decir, sólo interpreta señales eléctricas con dos estados posibles, los cuales son representados por los dígitos binarios 0 y 1. Toda instrucción que recibe la computadora se construye mediante una adecuada y larga combinación de ceros y unos2. Este sistema de código con ceros y unos que la computadora interpreta como instrucciones o conjuntos de datos se llama lenguaje de máquina (o código de máquina).Programar en lenguaje de máquina es muy complejo y lento, y es fácil cometer errores pero es difícil arreglarlos. Por eso principios de la década de 1950 se inventaron los lenguaje ensambladores, que usan palabras para representar simbólicamente las operaciones que debe realizar la computadora. Cada una de estas palabras reemplaza un código de máquina binario, siendo un poco más fácil programar. Imaginemos que deseamos crear un programa que permita sumar dos números elegidos por una persona. La computadora puede hacer esto si se lo comunicamos mediante un mensaje compuesto por una larga cadena de ceros y unos (lenguaje de máquina) que simple vista podríamos entender. Sin embargo, escrito en lenguaje ensamblador, el programa se vería así (por ejemplo):\nFigura 1.8: Programa en lenguaje ensamblador para leer dos números, sumarlos y mostrar el resultado. Al final de cada línea hay una descripción de la operación realizada.\nEl programa que se encarga de traducir esto al código de máquina se llama ensamblador. pesar de que haya ceros y unos como en el lenguaje de máquina, probablemente el código anterior tampoco sea fácil de entender. Aparecen instrucciones que tal vez podemos interpretar, como add por sumar o sub por substraer, pero está lleno de cálculos hexadecimales, referencias posiciones en la memoria de la computadora y movimientos de valores que lo hacen muy amigable. Por eso, pesar de que la existencia de los lenguajes ensambladores simplificó mucho la comunicación con la computadora, se hizo necesario desarrollar lenguajes que sean aún más sencillos de usar.Por ejemplo, con el lenguaje que vamos aprender, R, el problema de pedirle dos números una persona y sumarlos se resumen en las siguientes líneas de código:En las dos primeras líneas con la instrucción scan() (que quiere decir “escanear”, “leer”) se le pide la persona que indique dos números y en la tercera línea se muestra el resultado de la suma, con la instrucción print() (“imprimir”, “mostrar”). Mucho más corto y entendible.Esta simplificación es posible porque nos permitimos ignorar ciertos aspectos del proceso que realiza la computadora. Todas esas acciones que se ven ejemplificadas en la imagen con el código ensamblador se llevan cabo de todas formas, pero lo vemos. Nosotros sólo tenemos que aprender esas últimas tres líneas de código, de forma que nos podemos concentrar en el problema resolver (ingresar dos números, sumarlos y mostrar el resultado) y en las complejas operaciones internas que tiene que hacer el microprocesador.En programación, la idea de simplificar un proceso complejo ignorando algunas de sus partes para comprender mejor lo que hay que realizar y así resolver un problema se conoce como abstracción3. Esto quiere decir que los lenguajes de programación pueden tener distintos niveles de abstracción:Lenguajes de bajo nivel de abstracción: permiten controlar directamente el hardware de la computadora, son específicos para cada tipo de máquina, y son más rígidos y complicados de entender para nosotros. El lenguaje ensamblador entra en esta categoría.Lenguajes de alto nivel de abstracción: diseñados para que sea fácil para los humanos expresar los algoritmos sin necesidad de entender en detalle cómo hace exactamente el hardware para ejecutarlos. El lenguaje que utilizaremos en este taller, R, es de alto nivel. Son independientes del tipo de máquina.Lenguajes de nivel medio de abstracción: son lenguajes con características mixtas entre ambos grupos anteriores.\nFigura 1.9: Distintos lenguajes de programación y sus logos.\nSi bien podemos programar usando un lenguaje de alto nivel para que nos resulte más sencillo, alguien o algo debe traducirlo lenguaje de máquina para que la computadora, que sólo entiende de ceros y unos, pueda realizar las tareas. Esto también es necesario incluso si programáramos en lenguaje ensamblador. Para estos procesos de traducción se crearon los compiladores e intérpretes.Un compilador es un programa que toma el código escrito en un lenguaje de alto nivel y lo traduce código de máquina, guardándolo en un archivo que la computadora ejecutará posteriormente (archivo ejecutable). Para ilustrar el rol del compilador, imaginemos que alguien que sólo habla español le quiere mandar una carta escrita en español alguien que vive en Alemania y sólo habla alemán. Cuando esta persona la reciba, la va entender. Se necesita de un intermediario que tome la carta en español, la traduzca y la escriba en alemán y luego se la mande al destinatario, quien ahora sí la podrá entender. Ese es el rol de un compilador en la computadora. Ahora bien, el resultado de la traducción, que es la carta escrita en alemán, sólo sirve para gente que hable alemán. Si se quiere enviar el mismo mensaje personas que hablen otros idiomas, necesitaremos hacer la traducción que corresponda. De la misma forma, el código generado por un compilador es específico para cada máquina, depende de su arquitectura.Además de los compiladores, para realizar este pasaje también existen los intérpretes. Un intérprete es un programa que traduce el código escrito en lenguaje de alto nivel código de máquina, pero lo va haciendo medida que se necesita, es decir, su resultado reside en la memoria temporal de la computadora y se genera ningún archivo ejecutable. Siguiendo con el ejemplo anterior, es similar viajar Alemania con un intérprete que nos vaya traduciendo en vivo y en directo cada vez que le queramos decir algo alguien de ese país. En su implementación por defecto, el lenguaje R es interpretado, compilado.Concluyendo, gracias al concepto de la abstracción podemos escribir programas en un lenguaje que nos resulte fácil entender, y gracias al trabajo de los compiladores e intérpretes la computadora podrá llevar adelante las tareas necesarias.Cada una de las acciones que componen al algoritmo son codificadas con una o varias instrucciones, expresadas en el lenguaje de programación elegido, y el conjunto de todas ellas constituye un programa. El programa se guarda en un archivo con un nombre generalmente dividido en dos partes por un punto, por ejemplo: mi_primer_programa.R. La primera parte es la raíz del nombre con la cual podemos describir el contenido del archivo. La segunda parte es indicativa del uso del archivo, por ejemplo, .R indica que contiene un programa escrito en el lenguaje R. El proceso general de ingresar o modificar el contenido de un archivo se denomina edición.","code":"n1 <- scan()\nn2 <- scan()\nprint(n1 + n2)"},{"path":"introducción-a-la-programación.html","id":"errores-de-programación","chapter":"1 Introducción a la Programación","heading":"1.5 Errores de programación","text":"Apenas iniciemos nuestro camino en el mundo de la programación nos daremos cuenta que tendremos siempre ciertos compañeros de viaje: los errores. Muchas veces nos pasará que queremos ejecutar nuestro código y el mismo anda o produce el resultado esperado. importa cuán cuidadosos seamos, ni cuánta experiencia tengamos, los errores están siempre presentes. Con el tiempo y práctica, vamos poder identificarlos y corregirlos con mayor facilidad, pero probablemente nunca dejemos de cometerlos.los errores en programación se los suele llamar bugs (insecto o bicho en inglés) y el proceso de la corrección de los mismos se conoce como debugging (depuración)4. Se dice que esta terminología proviene de 1947, cuando una computadora en la Universidad de Harvard (la Mark II) dejó de funcionar y finalmente se descubrió que la causa del problema era la presencia de una polilla en un relé electromagnético de la máquina. Sin embargo, otros historiadores sostienen que el término ya se usaba desde antes.\nFigura 1.10: La polilla (bug) encontrada por la científica de la computación Grace Hooper en la Mark II fue pegada con cinta en un reporte sobre el malfuncionamiento de la máquina.\ncontinuación se presenta una de las posibles clasificaciones de los errores que se pueden cometer en programación:Errores de sintaxis. Tal como el lenguaje humano, los lenguajes de programación tienen su propio vocabulario y su propia sintaxis, que es el conjunto de reglas gramaticales que establecen cómo se pueden combinar las distintas partes. Estas reglas sintácticas determinan que ciertas instrucciones están correctamente construidas, mientras que otras . Cuando ejecutamos un programa, el compilador o el intérprete chequea si el mismo es sintácticamente correcto. Si hemos violado alguna regla, por ejemplo, nos faltó una coma o nos sobra un paréntesis, mostrará un mensaje de error y debemos editar nuestro programa para corregirlo. En estos casos, hay que interpretar el mensaje de error, revisar el código y corregir el error.Errores de sintaxis. Tal como el lenguaje humano, los lenguajes de programación tienen su propio vocabulario y su propia sintaxis, que es el conjunto de reglas gramaticales que establecen cómo se pueden combinar las distintas partes. Estas reglas sintácticas determinan que ciertas instrucciones están correctamente construidas, mientras que otras . Cuando ejecutamos un programa, el compilador o el intérprete chequea si el mismo es sintácticamente correcto. Si hemos violado alguna regla, por ejemplo, nos faltó una coma o nos sobra un paréntesis, mostrará un mensaje de error y debemos editar nuestro programa para corregirlo. En estos casos, hay que interpretar el mensaje de error, revisar el código y corregir el error.Errores lógicos. Se presentan cuando el programa puede ser compilado sin errores pero arroja resultados incorrectos o ningún resultado. El software muestra mensajes de error, debido que, por supuesto, sabe cuál es el resultado deseado, sino que sólo se limita hacer lo que hemos programado. En estos casos hay que revisar el programa para encontrar algún error en su lógica. Este tipo de errores suelen ser los más problemáticos. Algunas ideas para enfrentarlos incluyen volver pensar paso por paso lo que se debería hacer para solucionar el problema y compararlo con lo que se ha programado, agregar pasos para mostrar resultados intermedios o emplear herramientas especializadas de debugging (llamadas debugger) para explorar el código paso paso hasta identificar el error.Errores lógicos. Se presentan cuando el programa puede ser compilado sin errores pero arroja resultados incorrectos o ningún resultado. El software muestra mensajes de error, debido que, por supuesto, sabe cuál es el resultado deseado, sino que sólo se limita hacer lo que hemos programado. En estos casos hay que revisar el programa para encontrar algún error en su lógica. Este tipo de errores suelen ser los más problemáticos. Algunas ideas para enfrentarlos incluyen volver pensar paso por paso lo que se debería hacer para solucionar el problema y compararlo con lo que se ha programado, agregar pasos para mostrar resultados intermedios o emplear herramientas especializadas de debugging (llamadas debugger) para explorar el código paso paso hasta identificar el error.Errores en la ejecución (runtime errors). Se presentan cuando el programa está bien escrito, sin errores lógicos ni sintácticos, pero igualmente se comporta de alguna forma incorrecta. Se dan pesar de que el programa ande bien en el entorno de desarrollo del programador, pero cuando algún usuario lo utiliza en algún contexto particular. Puede ser que se intente abrir un archivo que existe, que el proceso supere la memoria disponible, que tomen lugar operaciones aritméticas definidas como la división por cero, etc.Errores en la ejecución (runtime errors). Se presentan cuando el programa está bien escrito, sin errores lógicos ni sintácticos, pero igualmente se comporta de alguna forma incorrecta. Se dan pesar de que el programa ande bien en el entorno de desarrollo del programador, pero cuando algún usuario lo utiliza en algún contexto particular. Puede ser que se intente abrir un archivo que existe, que el proceso supere la memoria disponible, que tomen lugar operaciones aritméticas definidas como la división por cero, etc.Los errores en la programación son tan comunes, que un científico de la computación muy reconocido, Edsger Dijkstra, dijo una vez: “si la depuración es el proceso de eliminar errores, entonces la programación es el proceso de generarlos”. Ante la presencia de uno, hay más que respirar profundo y con paciencia revisar hasta encontrarlo y solucionarlo.\nFigura 1.11: Encontrando un bug en un programa.\n","code":""},{"path":"introducción-a-la-programación.html","id":"procesador-ambiente-y-acciones","chapter":"1 Introducción a la Programación","heading":"1.6 Procesador, ambiente y acciones","text":"Hemos definido un algoritmo como una lista de instrucciones para resolver un problema. En este contexto, se entiende por procesador todo agente capaz de comprender los pasos de un algoritmo y ejecutar el trabajo indicado por el mismo. Para cumplir con el objetivo, el procesador emplea ciertos recursos que tiene disposición. Todos los elementos disponibles para ser utilizados por el procesador constituyen su entorno o ambiente. Cada una de las instrucciones que componen el algoritmo modifican el entorno de alguna manera y se denominan acciones.Ejemplificaremos estos conceptos con los siguientes ejemplos:Ejemplo 1Problema: preparar una tortilla de 6 huevos.Entorno: una mesa, una hornalla, una sartén, un plato, un tenedor, aceite, una fuente con huevos, un tarro de basura.Procesador: una persona adulta.Acciones comprensibles por el procesador: agarrar un huevo, romper un huevo en un plato, batir huevos, poner aceite, poner en la sartén, poner al fuego, retirar del fuego, tirar las cáscaras, encender el fuego.¿Cuál es un algoritmo adecuado para solucionar este problema? Podría ser:Ejemplo 2Problema: calcular el factorial del número 5.Entorno: se dispone de una calculadora común.Procesador: una persona adulta.Acciones comprensibles por el procesador: pulsar teclas de la calculadora.¿Cuál es un algoritmo adecuado para solucionar este problema? Podría ser:Las acciones del algoritmo pueden clasificarse en función de su complejidad:Acción primitiva: acción sencilla directamente realizable por el procesador sin necesidad de contar con mayor información.Acción compuesta: acción integrada por una sucesión de acciones primitivas.La descripción de un algoritmo en términos de acciones compuestas puede facilitar su comprensión, pero al desarrollar el programa será necesario descomponerlas en acciones primitivas que son las que realmente ejecuta el procesador. Por ejemplo, la acción compuesta en el ejemplo de la tortilla de “romper seis huevos en un plato” puede descomponerse en acciones más simples:En el contexto de la resolución de un problema computacional, el procesador será la computadora; las acciones estarán dadas por las instrucciones disponibles en el lenguaje de programación utilizado o las que podamos crear en base al mismo; y el ambiente estará constituido por un conjunto de variables, estructuras de datos, funciones y otros elementos que serán de utilidad en la programación.","code":"ALGORITMO: \"Preparar una tortilla de 6 huevos\"\nCOMENZAR\n    ROMPER seis huevos en un plato\n    TIRAR las cáscaras en el tacho\n    BATIR los huevos\n    CALENTAR aceite en la sartén\n    PONER el contenido del plato en la sartén\n    ESPERAR diez minutos\n    RETIRAR la tortilla del fuego\n    APAGAR el fuego\nFINALGORITMO: \"Calcular 5!\"\nCOMENZAR\n    PULSAR [ON]\n    PULSAR [1]\n    PULSAR [X]\n    PULSAR [2]\n    PULSAR [X]\n    PULSAR [3]\n    PULSAR [X]\n    PULSAR [4]\n    PULSAR [X]\n    PULSAR [5]\n    PULSAR [=]\n    MOSTRAR la pantalla\nFINREPETIR 6 VECES\n    TOMAR un huevo\n    GOLPEAR el huevo para generar una fractura en la cáscara\n    EJERCER presión sobre la cáscara\n    DERRAMAR la clara y la yema sobre el plato"},{"path":"introducción-a-la-programación.html","id":"r-y-rstudio","chapter":"1 Introducción a la Programación","heading":"1.7 R y RStudio","text":"Como dijimos anteriormente, pondremos en práctica los conceptos sobre programación utilizando R, un lenguaje orientado la realización de procesos estadísticos y gráficos. diferencia de muchos otros, este es un software libre y gratuito: se distribuye bajo la licencia GNU GPLv2 que establece la libertad de usarlo con cualquier propósito, de ver cómo fue hecho, cómo funciona y modificarlo, de distribuir copias y crear contribuciones y agregados para que estén disponibles para otros 5.Si bien R será nuestro medio de comunicación con la computadora, vamos usar otro programa que brinda algunas herramientas para facilitar nuestro trabajo de programación, es decir, vamos usar un entorno de desarrollo integrado (o IDE, por integrated development environment). Un IDE es un programa que hace que la codificación sea más sencilla porque permite manejar varios archivos de código, visualizar el ambiente de trabajo, utilizar resaltado con colores para distintas partes del código, emplear autocompletado para escribir más rápido, explorar páginas de ayuda, implementar estrategias de depuración e incluso intercalar la ejecución de instrucciones con la visualización de los resultados mientras avanzamos en el análisis o solución del problema. El IDE más popularmente empleado para programar con R es RStudio y será el programa que estaremos usando todo el tiempo.Para instalar estos programas, se debe visitar las páginas oficiales de R y de RStudio, descargar los instaladores y ejecutarlos. En este enlace se presenta un video con la instalación completa.","code":""},{"path":"introducción-a-la-programación.html","id":"organización-de-rstudio","chapter":"1 Introducción a la Programación","heading":"1.7.1 Organización de RStudio","text":"Cuando se abre RStudio se pueden visualizar cuatro paneles:\nFigura 1.12: Captura de pantalla de RStudio\nla izquierda:\nArriba está el editor de archivos. Es el lugar donde escribiremos y editaremos nuestros programas, para luego guardarlos (una especie de Bloc de Notas o de un Word muy simple). La primera vez que se abre RStudio después de su instalación puede ser que este panel esté presente, pero aparece si vamos File > New File > R Script, con el atajo Ctrl + Shift + N o haciendo clic en el primer ícono de la barra de herramientas. Podemos abrir varios archivos la vez.\nAbajo está la consola. Es la ventana que se comunica con R. través de ella se envían las instrucciones R para que las evalúe (también decimos, que las ejecute o corra) y se visualizan los resultados.\nla izquierda:Arriba está el editor de archivos. Es el lugar donde escribiremos y editaremos nuestros programas, para luego guardarlos (una especie de Bloc de Notas o de un Word muy simple). La primera vez que se abre RStudio después de su instalación puede ser que este panel esté presente, pero aparece si vamos File > New File > R Script, con el atajo Ctrl + Shift + N o haciendo clic en el primer ícono de la barra de herramientas. Podemos abrir varios archivos la vez.Abajo está la consola. Es la ventana que se comunica con R. través de ella se envían las instrucciones R para que las evalúe (también decimos, que las ejecute o corra) y se visualizan los resultados.Arriba la derecha hay un panel con algunas pestañas:\nEnvironment (ambiente): muestra todos los elementos que componen al ambiente o entorno.\nHistory (historial): lista todas las instrucciones que R ha corrido anteriormente.\nOtras más que nos interesan por ahora\nArriba la derecha hay un panel con algunas pestañas:Environment (ambiente): muestra todos los elementos que componen al ambiente o entorno.History (historial): lista todas las instrucciones que R ha corrido anteriormente.Otras más que nos interesan por ahoraAbajo la derecha hay otro panel con más pestañas:\nFiles: explorador de archivos de la computadora\nPlots: ventana donde aparecen los gráficos si es que nuestro código produce alguno\nPackages: listado de los “paquetes” que tenemos instalados (ver más adelante)\nHelp: manual de ayuda sobre todas las funciones de R\nViewer: espacio para ver salidas de los programas con algún componente dinámico o interactivo.\nAbajo la derecha hay otro panel con más pestañas:Files: explorador de archivos de la computadoraPlots: ventana donde aparecen los gráficos si es que nuestro código produce algunoPackages: listado de los “paquetes” que tenemos instalados (ver más adelante)Help: manual de ayuda sobre todas las funciones de RViewer: espacio para ver salidas de los programas con algún componente dinámico o interactivo.","code":""},{"path":"introducción-a-la-programación.html","id":"uso-de-la-consola","chapter":"1 Introducción a la Programación","heading":"1.7.2 Uso de la consola","text":"Podemos usar la consola de R que encontramos en el panel de la izquierda para introducir allí nuestras instrucciones y al hacer Enter serán evaluadas, produciendo algún resultado. Por ejemplo, podemos hacer algunos cálculos matemáticos como dividir, multiplicar, sumar, restar, calcular potencias, logaritmos, raíces y mucho más:Si bien podemos escribir nuestras instrucciones en la consola y dar Enter para que se ejecuten, en general queremos que queden escritas y guardadas en el archivo de código, por eso vamos escribir nuestros programas en el panel de arriba la izquierda. Una vez que escribimos una instrucción en el script, podemos correrla (es decir, enviarla la consola para que se ejecute) haciendo clic en el ícono Run o con el atajo Ctrl + Enter. De esta forma, se corre la línea en la cual está el cursor o las líneas que hayamos seleccionado.En todo lenguaje de programación existe un caracter especial que, al ser colocado al comienzo de una línea de código, le indica al software que dicha línea debe ser evaluada. Esto se utiliza para incluir comentarios, es decir, líneas que expresan en español explicaciones o aclaraciones para nosotros mismos u otros que puedan utilizar nuestro código. También se utiliza para añadir encabezados con descripciones sobre el script, o indicar distintas secciones o partes en el programa. En R, este caracter especial es el símbolo numera (#). Si corremos líneas que empiezan con #, R hará nada con ellas, las salteará. Por ejemplo","code":"\n1 + 2[1] 3\n5 * 3[1] 15\nexp(2)[1] 7.389056\nsqrt(100)[1] 10\n1 / 0[1] Inf\n(2 + 3i) * (3 + 6i)[1] -12+21i\n1i ^ 2[1] -1+0i\n5^1[1] 5\n# 5^2\n5^3[1] 125"},{"path":"introducción-a-la-programación.html","id":"diseño-del-sistema-r","chapter":"1 Introducción a la Programación","heading":"1.7.3 Diseño del sistema R","text":"R Se divide en dos partes:La base (R Base), que se instala cuando descargamos el programa desde CRAN (“Comprehensive R Archive Network”). Contiene, entre otras cosas, una serie de herramientas básicas y fundamentales de R.La base (R Base), que se instala cuando descargamos el programa desde CRAN (“Comprehensive R Archive Network”). Contiene, entre otras cosas, una serie de herramientas básicas y fundamentales de R.Paquetes adicionales. Un paquete es un conjunto de archivos que se descarga de forma opcional desde CRAN u otros repositorios y que sirven para hacer alguna tarea especial. Por ejemplo, para poder hacer gráficos lindos, se puede usar un paquete que se llama ggplot2.Paquetes adicionales. Un paquete es un conjunto de archivos que se descarga de forma opcional desde CRAN u otros repositorios y que sirven para hacer alguna tarea especial. Por ejemplo, para poder hacer gráficos lindos, se puede usar un paquete que se llama ggplot2.Como dijimos antes, en la pestaña Packages del panel de abajo la derecha tiene el listado de todos los paquetes que ya están instalados (muchos vienen con R Base). Allí también hay un botón para instalar nuevos, aunque otra opción es correr la instrucción install.packages(\"nombredelpaquete\"), por ejemplo, install.packages(\"ggplot2\"). También es posible instalar paquetes publicados en otros repositorios6.Un paquete se instala una sola vez, pero cada vez que lo queramos usar debemos cargarlo para que las herramientas que trae queden nuestra disposición. Eso se hace con la instrucción library(\"nombredelpaquete\"), por ejemplo, library(\"ggplot2\").","code":""},{"path":"introducción-a-la-programación.html","id":"guía-de-estilo","chapter":"1 Introducción a la Programación","heading":"1.8 Guía de estilo","text":"Es sumamente importante mantener la prolijidad en la escritura tanto del pseudocódigo como de los programas, para facilitar la lectura de los mismos, especialmente cuando estamos trabajando con problemas largos. Siempre hay que tener en cuenta de que cuando escribimos un programa, tenemos dos públicos potenciales: integrantes de nuestro equipo de trabajo que tienen leer el código y hacer sus propios aportes y nosotros mismos en el futuro, cuando retomemos código hecho en el pasado y necesitemos interpretar qué es lo que hicimos hacer.Es por eso que se establecen conjuntos de reglas para controlar y unificar la forma de escribir programas, que se conocen como guía de estilo. Estas reglas cubren aspectos como, por ejemplo, la forma de escribir comentarios en el código, la utilización de espacios o renglones en blanco, el formato de los nombres para los elementos que creamos nosotros mismos (como las funciones) y para los archivos que generamos, etc. Una guía de estilo indica la única forma de escribir código, ni siquiera la forma correcta de hacerlo, sino que establece una convención para que todos trabajen de la misma forma, basándose en costumbres que sí se ha visto que pueden tener más ventajas que otras.Por ejemplo, para programar en R, existe una guía de estilo llamada tidyverse style guide, que es la que utilizan la gente de Google y de RStudio. En este curso vamos adherir sus recomendaciones. Si bien es una lectura muy interesante, particularmente si tenés intenciones de profundizar tus conocimientos sobre programación en R, es necesario que lean dicha guía completa. Por ahora es suficiente con que imiten con atención el estilo que usamos en los ejemplos provistos en esta guía.Recordemos siempre que seguir un buen estilo para programar es como hacer uso de una correcta puntuación cuando escribimos, podemos entendernos sin ella, peroesmuchomasdificilleerloqueescribimossinolarespetamosno?","code":""},{"path":"objetos-y-operadores.html","id":"objetos-y-operadores","chapter":"2 Objetos y operadores","heading":"2 Objetos y operadores","text":"Hemos mencionado que para resolver un problema computacional se necesita de un procesador, capaz de entender y ejecutar ciertas acciones partir de ciertos elementos disponibles en el ambiente o entorno. En este capítulo vamos aprender acerca de dichos elementos, los que llamamos objetos.","code":""},{"path":"objetos-y-operadores.html","id":"objetos","chapter":"2 Objetos y operadores","heading":"2.1 Objetos","text":"Los objetos son las distintas piezas de información, o más sencillamente, datos, que componen al entorno y que el procesador debe manipular para resolver una tarea. Las distintas acciones del algoritmo van creando o modificando los objetos del entorno. medida que avancemos, veremos que hay distintas clases de objetos, algunos con estructuras más simples y otros más complejos. Es más, cada lenguaje de programación propone su propio catálogo de clases de objetos y cada programador puede crear otras nuevas. Sin embargo, en general todos los lenguajes tienen en común el hecho de que sus objetos pueden almacenar los siguientes tres tipos de datos básicos, conocidos como tipos de datos primitivos:Datos de tipo numérico: representan valores escalares de forma numérica y permiten realizar operaciones aritméticas comunes. Ejemplo: 230, 2.Datos de tipo caracter: representan texto y es posible hacer operaciones matemáticas con ellos. Representamos estos valores entre comillas. Ejemplo: “hola”, “chau123”Datos de tipo lógico: pueden tomar dos valores (VERDADERO o FALSO), ya que representan el resultado de alguna comparación entre otros objetos. En R, estos valores son TRUE y FALSE, escritos sin comillas.De manera general, al nombre de un objeto se le dice identificador, el cual es una secuencia de caracteres alfanuméricos que sirve para identificarlo lo largo del algoritmo. Nombrar los objetos hace posible referirse los mismos. La elección de los identificadores es una tarea del programador, pero cada lenguaje tiene sus propias reglas. Por ejemplo, en R los nombres de los objetos:Deben empezar con una letra o un punto (pueden empezar con un número).Sólo pueden contener letras, números, guiones bajos y puntos (se puede forzar R para que acepte nombres con otros caracteres, pero es aconsejable).se pueden usar las siguientes palabras como nombres, ya que son palabras claves reservadas para R: break, else, FALSE, , function, , Inf, NA, NaN, next, repeat, return, TRUE, .Es aconsejable elegir un nombre que sea representativo de la información que va guardar el objeto, ya que esto facilita la lectura y la comprensión tanto del algoritmo como del programa. Por ejemplo, si se necesita un objeto para guardar el valor numérico del precio de algún producto, el identificador p sería una mala elección, mientras que precio sería mejor. Si se necesitan varios identificadores para distinguir los precios de diversos productos, podríamos usar algo como precio_manzana, precio_banana, etc. Otra opción podría ser preciomanzana o precioManzana, pero en este curso seguiremos la convención de usar guiones bajos para facilitar la lectura de los nombres elegidos. sería posible usar como identificador precio manazana, puesto que un nombre puede tener espacios.Ciertos objetos almacenan temporalmente un valor durante la ejecución de un proceso y su contenido puede cambiar mientras corre el programa. Este tipo de objetos reciben el nombre de variables. Por ejemplo, en un programa creado para un comercio puede existir un objeto llamado stock (identificador) de tipo numérico que representa la cantidad de artículos disponibles y cuyo valor se modifica cada vez que se registra una nueva venta. Podemos pensar una variable como una caja etiquetada con un nombre (su identificador) y que guarda un valor (numérico, lógico o de caracter).\nFigura 2.1: La variable contiene al valor 5.\nSi un objeto tiene siempre necesariamente un valor fijo, se dice que es una constante. El valor es siempre el mismo para cualquier ejecución del programa, es decir, puede cambiar de una ejecución otra. Son ejemplos de constantes el número de meses del año, las constantes matemáticas tales como el número \\(\\pi\\), los factores de conversión de unidades de medida, etc. Las constantes pueden usarse literalmente, es decir, usando explícitamente el valor, o también través de un objeto que asocie un identificador al valor constante (por ejemplo, asociar el nombre pi la constante 3.14159265).","code":""},{"path":"objetos-y-operadores.html","id":"declaración-de-variables-y-constantes","chapter":"2 Objetos y operadores","heading":"2.1.1 Declaración de variables y constantes","text":"Al expresar nuestros algoritmos en pseudocódigo tomaremos la costumbre de declarar al inicio del mismo las variables y constantes necesarias para resolver el problema, explicitando su identificador y determinando el tipo de valor que guarda. Muchos lenguajes de programación utilizan esta declaración para reservar en la memoria de la computadora un espacio para almacenar la información correspondiente de manera adecuada.Veamos un ejemplo:Una vez que una variable o constante ha sido definida con un tipo particular, es incorrecto intentar asignarle un valor de otro tipo, por ejemplo, asignarle la variable radio del ejemplo anterior un valor de tipo caracter. Esto generaría ambigüedad, además de que en ciertos lenguajes de programación produciría un error.R es un lenguaje dinámico que requiere la declaración previa de las variables que serán utilizadas, sino que estas pueden definirse dinámicamente lo largo del programa. Por eso, incluiremos declaración de variables y constantes sólo en los algoritmos y cuando estos sean traducidos R. Al necesitar una declaración previa, en R es posible asignar, por ejemplo, un valor de tipo caracter un identificador que anteriormente contenía un valor de tipo numérico, pero trataremos de evitar esto.","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n        ...restantes acciones del algoritmo...\nFIN"},{"path":"objetos-y-operadores.html","id":"acción-de-asignación","chapter":"2 Objetos y operadores","heading":"2.1.2 Acción de asignación","text":"Para hacer que una variable guarde un determinado valor se recurre una acción de asignación. Mediante asignaciones podemos dar valores iniciales las variables, modificar el valor que tenían hasta el momento o guardar en ellas resultados intermedios o finales del algoritmo.En pseudocódigo expresaremos la asignación como se muestra en estos ejemplos:Si intervienen variables o constantes en la expresión la derecha de una acción de asignación, se usará el valor que tengan las mismas en ese momento. Por ejemplo, la siguiente secuencia de acciones en un algoritmo:resultará en que las variables var1, var2 y var3 tengan almacenados los valores 7, 2 y 7 respectivamente. Un caso particular se da cuando una variable se le asigna el valor de una operación de la que forma parte la misma variable. Por ejemplo:","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n    pi <- 3.14159265358979\n    radio <- 3\n    ...restantes acciones del algoritmo...\nFINvar1 <- 2\nvar2 <- var1\nvar1 <- 7\nvar3 <- var1stock <- 43\nventas <- 29\ncompras <- 12\nstock <- stock - ventas + compras"},{"path":"objetos-y-operadores.html","id":"objetosenR","chapter":"2 Objetos y operadores","heading":"2.1.3 Creación y manejo de objetos en R","text":"En R también se usa el operador “flechita” para asignar valores variables. Como lo vamos usar muchísimas veces, es conveniente recordar su shortcut: Alt + - (teclas Alt y guión medio). Como ya mencionamos antes, R es un lenguaje dinámico, lo cual significa que tenemos que declarar las variables antes de asignarles un valor. Por ejemplo, si necesitamos registrar el peso y lugar de nacimiento de una persona, solamente tenemos que hacer:En este caso, lugar_nacimiento es un objeto de tipo carácter, ya que la información que contiene es \"Bombal\", y peso_nacimiento es un objeto numérico. Vale aclarar que en R el punto decimal se representa con el punto . y con la coma , como solemos escribir habitualmente, por lo que el número indicado se lee “tres coma cuatrocientos veintitrés” y “tres mil cuatrocientos veintitrés”. Asimismo, se usan separadores de miles al escribir los números.Por otro lado, R provee algunas funciones para poder averiguar en cualquier momento qué tipo de dato está almacenado en alguna variable. Todavía hemos definido formalmente las funciones, pero por ahora nos alcanza con saber que son otro tipo de objetos que cuando las usamos se encargan de cumplir con alguna tarea específica. Las funciones también tienen un nombre (identificador) y están seguidas por un par de paréntesis, dentro de los cuales se escriben opciones para que ellas operen. La función class() es la que nos dice qué tipo de dato hay en una variable:También hay algunas funciones que devuelven TRUE o FALSE modo de respuesta cuando le preguntamos R si una variable tiene un dato de tipo numérico, caracter o lógico:Todos los objetos que vamos definiendo en nuestro algoritmo y, posteriormente, en nuestro programa, forman parte del ambiente. En Rstudio podemos ver listados todos los objetos presentes en el ambiente en la pestaña Environment del panel superior derecho. También podemos ver en la consola un listado de todos los nombres de los objetos que existen en el ambiente con la función ls(), por ejemplo:Es probable que mientras estamos escribiendo el código, necesitemos probar si algunas partes funcionan y para eso corremos algunas líneas de código, creando objetos en el ambiente. Entre intento e intento, probablemnte necesitemos borrar alguno o todos esos objetos que se crearon, para poder comenzar con un ambiente libre. Si deseamos borrar todos los objetos del ambiente podemos correr la sentencia rm(list = ls()) o hacer clic en el ícono de la escoba en el panel Environment. Si queremos eliminar sólo un objeto debemos ejecutar la función rm(), indicando entre paréntesis el identificador del objeto que deseamos borrar, por ejemplo:Todos los objetos generados viven temporalmente en la memoria de la computadora mientras dure la sesión de R en la que estamos trabajando. Si cerramos R, toda esa información desaparecerá. Muchas veces eso es algo deseable: una vez finalizado el programa, guardamos algún resultado que nos interese (por ejemplo, un conjunto de datos en un archivo de Excel) y todos los objetos del ambiente que fuimos necesitando en el camino son descartados. Sin embargo, en otras oportunidades nos interesa guardar de forma permanente en la computadora una copia de todo lo que se encuentra en el ambiente en un archivo dentro de alguna carpeta. Los archivos que contienen los objetos creados en R tienen extensión .RData. Estos archivos se generan con el ícono de guardar en la pestaña Environment o usando la función save.image(), que necesita que escribamos entre los paréntesis la carpeta donde guardaremos el archivo y el nombre elegido para el mismo, por ejemplo:Si por el contrario necesitamos importar al ambiente objetos que estén guardados en algún lugar de nuestra compu en un archivo .RData, podemos usar el ícono de abrir en la pestaña Environment o la función load(), por ejemplo:","code":"lugar_nacimiento <- \"Bombal\"\npeso_nacimiento <- 3.423\nvar1 <- 2\nvar2 <- \"Hola Mundo\"\nvar3 <- TRUE\nclass(var1)[1] \"numeric\"\nclass(var2)[1] \"character\"\nclass(var3)[1] \"logical\"\nis.numeric(var1)[1] TRUE\nis.numeric(var2)[1] FALSE\nis.character(var3)[1] FALSE\nis.logical(var3)[1] TRUE\nls()[1] \"var1\" \"var2\" \"var3\"\nrm(var1)\nsave.image(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")\nload(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")"},{"path":"objetos-y-operadores.html","id":"operadores","chapter":"2 Objetos y operadores","heading":"2.2 Operadores","text":"El desarrollo de un algoritmo involucra la necesidad de efectuar operaciones de distinto tipo entre los valores guardados en los objetos: suma, resta, concatenación de caracteres, comparaciones, etc. Los elementos que describen el tipo de operación realizar entre dos objetos se denominan operadores.","code":""},{"path":"objetos-y-operadores.html","id":"operadores-aritméticos","chapter":"2 Objetos y operadores","heading":"2.2.1 Operadores aritméticos","text":"Los operadores aritméticos permiten realizar operaciones matemáticas con datos de tipo numérico. continuación presentamos su simbología más comúnmente empleada la hora de expresarlos en pseudocódigo, junto con sus equivalentes en el lenguaje R:Tabla 2.1:  Operadores aritméticos.Los operadores aritméticos actúan con un orden de prioridad establecido, también conocido como orden de evaluación u orden de precedencia, tal como estamos acostumbrados en matemática. Las expresiones entre paréntesis se evalúan primero. Si hay paréntesis anidados se evalúan desde adentro hacia afuera. Dentro de una misma expresión, en R los operadores se evalúan en este orden:Potenciación (^)División entera y módulo (%/%, %%, y cualquier otro operador especial del tipo %...%)Multiplicación y división (*, /)Suma y resta (+, -)Si la expresión presenta operadores con igual nivel de prioridad, se evalúan de izquierda derecha. Veamos algunos ejemplos:Tabla 2.2:  Ejemplos de operaciones aritméticas según el orden de precedencia de R.","code":""},{"path":"objetos-y-operadores.html","id":"operadores-relacionales-o-de-comparación","chapter":"2 Objetos y operadores","heading":"2.2.2 Operadores relacionales o de comparación","text":"Los operadores relacionales sirven para comparar dos valores de cualquier tipo y dan como resultado un valor lógico: VERDADERO (T o TRUE en R) o FALSO (F o FALSE en R).Tabla 2.3:  Operadores relacionales o de comparación.Otros ejemplos:Es interesante notar que primero se evalúan las operaciones cada lado de los operadores relacionales y luego se hace la comparación. Es decir, los operadores aritméticos preceden los relacionales en el orden de prioridad. Por eso, en los ejemplos anteriores eran necesarios los paréntesis y podríamos poner directamente:Si bien en pseudocódigo podemos usar tanto = o == para probar la igualdad entre dos elementos, en R debemos usar = para este fin, puesto que = es un operador de comparación sino de asignación, parecido al <-.","code":"\na <- 3\nb <- 4\nd <- 2\ne <- 10\nf <- 15\n(a * b) == (d + e)[1] TRUE\n(a * b) != (f - b)[1] TRUE\na * b == d + e[1] TRUE\na * b != f - b[1] TRUE"},{"path":"objetos-y-operadores.html","id":"operadores-lógicos","chapter":"2 Objetos y operadores","heading":"2.2.3 Operadores lógicos","text":"Mientras que los operadores relacionales comparan cualquier tipo de valores, los operadores lógicos sólo toman operandos de tipo lógico y producen también un resultado lógico. Los operadores lógicos que utilizaremos son:Tabla 2.4:  Operadores lógicos.La operación de conjunción (Y) devuelve un valor VERDADERO sólo si son verdaderas ambas expresiones que vincula. Ejemplo: (3 > 2) Y (3 > 5) resulta en VERDADERO Y FALSO y esto es FALSO.La operación de disyunción (O) devuelve un valor VERDADERO si al menos una de las dos expresiones que vincula es verdadera. Ejemplo: (3 > 2) O (3 > 5) resulta en VERDADERO O FALSO y esto es VERDADERO.La operación de negación () niega un valor lógico, es decir, devuelve el opuesto. Ejemplo: (3 > 2) resulta en VERDADERO y esto es FALSO.Tanto para la conjunción como para la disyunción, R provee dos operadores, repitiendo o el símbolo correspondiente: && vs &; || vs |. Hay una diferencia entre ellos que por ahora viene al caso, pero vamos señalar que por ahora estaremos usando las versiones presentadas anteriormente: && y ||.La tabla de verdad o tabla de valores de verdad se utiliza para mostrar los resultados de estas operaciones lógicas:Tabla 2.5:  Operadores relacionales o de comparación.Con estos operadores es posible construir evaluaciones lógicas más elaboradas como los siguientes ejemplos:Evaluar si el valor de ancho está entre 5 y 7: (ancho > 5) Y (ancho < 7).\n\nancho <- 6.4\n(ancho > 5) && (ancho < 7)\n[1] TRUEEvaluar si el valor de ancho está entre 5 y 7: (ancho > 5) Y (ancho < 7).Establecer si una persona estudia Estadística o Economía: (carrera == \"Estadística\") O (carrera == \"Economía\").\n\ncarrera <- \"Administración\"\n(carrera == \"Estadística\") || (carrera == \"Economía\")\n[1] FALSEEstablecer si una persona estudia Estadística o Economía: (carrera == \"Estadística\") O (carrera == \"Economía\").Determinar si una persona estudia Estadística: (carrera == \"Estadística\").\n\ncarrera <- \"Administración\"\n!(carrera == \"Estadística\")\n[1] TRUEDeterminar si una persona estudia Estadística: (carrera == \"Estadística\").Verificar que el valor guardado en x sea igual 2 ni 3:\nOpción correcta 1: (x != 2) Y (x != 3)\n\n# Da verdadero porque x es ni 2 ni 3\nx <- 10\n(x != 2) && (x != 3)\n[1] TRUE\n\n# Da falso porque x es igual 3\nx <- 3\n(x != 2) && (x != 3)\n[1] FALSE\nOpción correcta 2: ((x == 2) O (x == 3))\n\n# Da verdadero porque x es ni 2 ni 3\nx <- 10\n!(x == 2 || x == 3)\n[1] TRUE\n\n# Da falso porque x es igual 3\nx <- 3\n!(x == 2 || x == 3)\n[1] FALSE\nOpción incorrecta: (x != 2) O (x != 3)\n\n# Da verdadero, porque al ser x igual 3, es distinto de 2,\n# haciendo que la primera parte sea verdadera \nx <- 3\n(x != 2) || (x != 3)\n[1] TRUEVerificar que el valor guardado en x sea igual 2 ni 3:Opción correcta 1: (x != 2) Y (x != 3)Opción correcta 2: ((x == 2) O (x == 3))Opción incorrecta: (x != 2) O (x != 3)Este último ejemplo se relaciona con las Leyes de Morgan: siendo b y c valores lógicos, se tiene:(b O c) es equivalente b Y c.(b Y c) es equivalente b O c.Es importante notar que todos los paréntesis usados en el código de R del ejemplo 4 son innecesarios, puesto que los operadores relacionales preceden los lógicos en el orden de prioridad. Sin embargo, veces preferimos usar paréntesis para que la lectura sea más sencilla. En el siguiente ejemplo, ambas expresiones son equivalentes:Para pensar: predecir el resultado de las siguientes operaciones y luego verificar:","code":"\nancho <- 6.4\n(ancho > 5) && (ancho < 7)[1] TRUE\ncarrera <- \"Administración\"\n(carrera == \"Estadística\") || (carrera == \"Economía\")[1] FALSE\ncarrera <- \"Administración\"\n!(carrera == \"Estadística\")[1] TRUE\n# Da verdadero porque x no es ni 2 ni 3\nx <- 10\n(x != 2) && (x != 3)[1] TRUE\n# Da falso porque x es igual a 3\nx <- 3\n(x != 2) && (x != 3)[1] FALSE\n# Da verdadero porque x no es ni 2 ni 3\nx <- 10\n!(x == 2 || x == 3)[1] TRUE\n# Da falso porque x es igual a 3\nx <- 3\n!(x == 2 || x == 3)[1] FALSE\n# Da verdadero, porque al ser x igual a 3, es distinto de 2,\n# haciendo que la primera parte sea verdadera \nx <- 3\n(x != 2) || (x != 3)[1] TRUE\nancho <- 6.4\n(ancho > 5) && (ancho < 7)[1] TRUE\nancho > 5 && ancho < 7[1] TRUE\nx <- 2\ny <- -2\nx > 0 && y < 0\nx > 0 || y < 0\n!(x > 0 && y < 0)"},{"path":"objetos-y-operadores.html","id":"evaluación-en-cortocircuito","chapter":"2 Objetos y operadores","heading":"2.2.3.1 Evaluación en cortocircuito","text":"Para evaluar la operación de conjunción x && y, en R se comienza por evaluar la expresión del primer operando x y si su resultado es FALSE ya se evalúa la expresión y del segundo operando. Esto es porque si x es FALSE, el resultado de x && y ya depende de y, será siempre FALSE. Por este motivo se dice que el operador && se evalúa en cortocircuito. La evaluación en cortocircuito evita realizar operaciones innecesarias7Por ejemplo:La operación de disyunción también se evalúa en cortocircuito, es decir, si se encuentra que uno de los operandos es TRUE, hace falta evaluar los restantes, puesto que el resultado general será TRUE:","code":"\nx <- 1\ny <- 2\n\n# La primera parte da TRUE, se continúa con la segunda, pero da error porque no\n# existe un objeto llamado z\n(y > x) && (x > z)Error in eval(expr, envir, enclos): object 'z' not found\n# La primera parte da FALSE, entonces toda la operación será FALSE, no se\n# continúa con la segunda parte, con lo cual no se intenta usar el objeto\n# inexistente z y no hay error\n(y < x) && (x > z)[1] FALSE\n# Es TRUE porque la primera parte es TRUE, sin evaluar la segunda, que daría\n# error\n(y > x) || (x > z)[1] TRUE\n# Como la primera parte es FALSE, debe evaluar la segunda, no encuentra a z y da\n# error\n(x > y) || (x > z)Error in eval(expr, envir, enclos): object 'z' not found"},{"path":"objetos-y-operadores.html","id":"orden-de-precedencia-completo-en-r","chapter":"2 Objetos y operadores","heading":"2.2.3.2 Orden de precedencia completo en R","text":"Resumiendo la información anterior, continuación se presenta el orden completo de precedencia de los operadores en R que utilizaremos (hay algunos más que pueden ver en ?Syntax):Tabla 2.6:  Orden de precedencia de los operadores en R.Dentro de una misma expresión, operadores con igual prioridad se evalúan de izquierda derecha.","code":""},{"path":"objetos-y-operadores.html","id":"entrada-y-salida-de-información","chapter":"2 Objetos y operadores","heading":"2.3 Entrada y salida de información","text":"En la resolución de problemas puede ser necesario que alguna fuente externa (como un usuario del programa) provea información. En estos casos se debe registrar dicha información como un valor que debe ser asignado una variable. Cuando escribamos nuestros algoritmos en pseudocódigo, para esto utilizaremos la acción LEER. Cuando deseamos mostrar un resultado en un mensaje empleamos la acción ESCRIBIR. Las palabras o frases literales que se desean mostrar en el mensaje deben estar encerradas entre comillas porque son cadenas de texto, mientras que si se desea mostrar el valor de una variable se debe escribir su identificador sin comillas.Por ahora, en R ejecutaremos la acción LEER mediante la asignación directa de un valor una variable través del operador <-. La acción ESCRIBIR puede ser ejecutada través de la función cat() si se quiere mostrar una frase compuesta. En los casos en los que sólo interesa mostrar un valor (sin escribir una frase) será necesario usar cat(), ya que sencillamente al correr el nombre de un objeto, su valor es mostrado en la consola. En otros casos usaremos la función print(). Ya iremos viendo la utilidad de cada una de estas opciones.Vamos completar el ejemplo del algoritmo para el cálculo del área de un círculo, integrando todo lo mencionado anteriormente:Pseudocódigo:En R:Nota: pi ya es una constante incorporada en R Base, en realidad es necesario crear esta constante y asignarle valor.","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n    pi <- 3.14159265358979\n    LEER radio\n    area <- pi * radio^2\n    ESCRIBIR \"El área del círculo es \" area\nFIN\n# PROGRAMA: \"Calcular área de un círculo\" ---------------------------\n\npi <-  3.14159265358979\nradio <- 5\narea <- pi * radio^2\ncat(\"El área del círculo es\", area)El área del círculo es 78.53982"},{"path":"objetos-y-operadores.html","id":"directorio-de-trabajo","chapter":"2 Objetos y operadores","heading":"2.4 Directorio de trabajo","text":"Antes de terminar este capítulo vamos presentar un concepto fundamental acerca de cómo se relaciona R con el sistema opertaivo de nuestra computadora para poder tener acceso nuestros archivos o para generar otros nuevos.Al finalizar la sección 2.1.3 vimos ejemplos en los que se utilizó R para, en primer lugar, generar un archivo llamado objetos.RData con todos los objetos existentes en nuestro ambiente de trabajo y, en segundo lugar, cargar la información que dicho archivo contiene:En ambos casos, dentro de las funciones save.image() y load() se tuvo que escribir la dirección completa que representa cuál es la ubicación exacta de dicho archivo en la computadora: C:/Users/Marcos/Documentos/Facultad/objetos.RData. Esto significa que el archivo se encuentra en la carpeta Facultad, que su vez está dentro de la carpeta Documentos, dentro de Marcos y dentro de Users, en el disco C de la computadora.Expresiones como C:/Users/Marcos/Documentos/Facultad/objetos.RData reciben el nombre de ruta informática o path y sirven para referenciar de manera exacta la localización ya sea de una carpeta o de un archivo en particular dentro del sistema de archivos que maneja el sistema operativo de la computadora. Un path está compuesto por todos los nombres de los directorios que ordenadamente nos permiten llegar hasta la carpeta o archivo de interés, separados por un carácter que dependiendo del sistema operativo puede ser una barra diagonal / o una barra inversa \\.R siempre está mirando alguna carpeta en particular dentro de la computadora, la cual recibe el nombre directorio de trabajo (o working directory, wd). Por ejemplo, en este momento y en mi computadora, R está posando su atención en una carpeta que se llama introprog y cuya ruta puedo descubrir con la función getwd(), que significa “obtener (get) el directorio de trabajo (wd)”:Esto quiere decir que R puede ver y acceder de manera directa todos los archivos que hay allí, sin necesidad de escribir la ruta completa. Por ejemplo, si en lugar de ejecutar:ejecuto sencillamente:lo que ocurre es que el nuevo archivo se generará en mi directorio de trabajo (carpeta introprog) y en la carpeta Facultad. Del mismo modo, si ejecuto:el software va buscar el archivo objetos.RData en mi directorio de trabajo (carpeta introprog) y va cargar su contenido al ambiente de trabajo. Si en dicha carpeta existe un archivo con ese nombre, obtendremos un mensaje de error muy famoso:El directorio de trabajo por default suele ser la carpeta Documentos o alguna equivalente y es la que vemos en el panel Files de RStudio. Podemos cambiar el directorio de trabajo por cualquier otra carpeta en la que queramos estar trabajando con la función setwd() (“setear el working directory”):Por ejemplo, si estamos resolviendo un trabajo práctico para el cual tenemos varios archivos necesarios guardados en la carpeta tp1, tenemos dos opciones:Sin importar cuál es nuestro directorio de trabajo, hacer referencia dichos archivos con paths completos, por ejemplo:\n\nload(\"/home/marcos/documents/introprog/tp1/objetos.RData\")Sin importar cuál es nuestro directorio de trabajo, hacer referencia dichos archivos con paths completos, por ejemplo:Setear como directorio de trabajo la carpeta del trabajo práctico y hacer un uso directo de los archivos que se encuentren allí:\n\nsetwd(\"/home/marcos/documents/introprog/tp1\")\nload(\"objetos.RData\")Setear como directorio de trabajo la carpeta del trabajo práctico y hacer un uso directo de los archivos que se encuentren allí:Es importante recordar lo siguiente: al escribir paths, R sólo reconoce como caracteres delimitadores entre los nombres de carpetas la barra diagonal / o dos barras invertidas \\\\. Quienes usan el sistema operativo Windows notarán que en el explorador de archivos, las rutas están delimitadas con una sola barra invertida \\. En el contexto de R, debe ser reemplazada por dos barras invertidas o por una sola barra diagonal.","code":"\nsave.image(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")\nload(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")\ngetwd()[1] \"/home/marcos/GitProjects/introprog\"\nsave.image(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")\nsave.image(\"objetos.RData\")\nload(\"objetos.RData\")cannot find file 'objetos.RData', probable reason 'No such file or directory'\nsetwd(\"/home/marcos/documents/introprog/tp1\")\ngetwd()\n\"/home/marcos/documents/introprog/tp1\"\nload(\"/home/marcos/documents/introprog/tp1/objetos.RData\")\nsetwd(\"/home/marcos/documents/introprog/tp1\")\nload(\"objetos.RData\")"},{"path":"estructuras-de-control.html","id":"estructuras-de-control","chapter":"3 Estructuras de control","heading":"3 Estructuras de control","text":"Como mencionamos anteriormente, un algoritmo está compuesto por una sucesión ordenada de comandos que se ejecutan uno detrás de otro. Sin embargo, con frecuencia es necesario recurrir comandos especiales que alteran o controlan el orden en el que se ejecutan las acciones. Llamamos estructuras de control del flujo de las acciones al conjunto de reglas que permiten controlar el flujo de las acciones de un algoritmo o programa. Las mismas pueden clasificarse en secuenciales, condicionales e iterativas.","code":""},{"path":"estructuras-de-control.html","id":"estructuras-de-control-secuenciales","chapter":"3 Estructuras de control","heading":"3.1 Estructuras de control secuenciales","text":"Las estructuras secuenciales están compuestas por un número definido de acciones que se ubican en un orden específico y se suceden una tras otra. Los ejemplos que hemos discutido anteriormente están conformados por este tipo de estructura.","code":""},{"path":"estructuras-de-control.html","id":"estructuras-de-control-condicionales","chapter":"3 Estructuras de control","heading":"3.2 Estructuras de control condicionales","text":"En algunas partes de un algoritmo puede ser útil detenerse hacer una pregunta porque se llegó una situación en la que puede haber una o más opciones disponibles para continuar. Dependiendo de la respuesta la pregunta, que siempre deberá ser VERDADERO (TRUE) o FALSO (FALSE), el algoritmo seguirá ciertas acciones e ignorará otras. Estas preguntas y respuestas representan procesos de toma de decisión que conducen diferentes caminos dentro del algoritmo, permitiéndonos que la solución para el problema en cuestión sea flexible y se adapte distintas situaciones. Este tipo de estructuras de control de las acciones reciben el nombre de condicionales (o estructuras de selección) y pueden ser simples, dobles y múltiples.","code":""},{"path":"estructuras-de-control.html","id":"estructuras-condicionales-simples","chapter":"3 Estructuras de control","heading":"3.2.1 Estructuras condicionales simples","text":"Postulan una evaluación lógica y, si su resultado es VERDADERO, se procede ejecutar las acciones encerradas por esta estructura. Se describen en pseudocódigo con la siguiente sintaxis:La palabra SI indica el comando de evaluación lógica, <condición> indica la condición evaluar y Acción/es son las instrucciones que se realizarán sólo si se cumple la condición, es decir, si la evaluación resulta en VERDADERO. Si la condición se verifica, se ejecuta ninguna acción y el algoritmo sigue su estructura secuencial continuación del FIN SI.En R, la estructura que nos permite realizar esto es:Por ejemplo, el siguiente algoritmo registra la edad de una persona y, en el caso de que sea mayor de edad, avisa que puede votar en las elecciones provinciales de Santa Fe:Notar que si bien el uso de sangrías en el código es opcional, decidimos emplearlo para facilitar su lectura. Mantener la prolijidad en nuestros programas es esencial.","code":"SI <condición> ENTONCES\n    Acción/es\nFIN SIif (condición) {\n    ...código para ejecutar acciones...\n}ALGORITMO: \"Analizar edad para votar\"\nCOMENZAR\n    VARIABLE numérica edad\n    LEER edad\n    SI edad >= 18 ENTONCES\n        ESCRIBIR \"Edad = \" edad \" años: puede votar\"\n    FIN SI\nFIN\n# Programa: \"Analizar edad para votar\" -------------------------------\nedad <- 21\nif (edad >= 18) {\n    cat(\"Edad =\", edad, \"años: puede votar\")\n}Edad = 21 años: puede votar"},{"path":"estructuras-de-control.html","id":"estructuras-condicionales-dobles","chapter":"3 Estructuras de control","heading":"3.2.2 Estructuras condicionales dobles","text":"Este tipo de estructura añade una acción ejecutarse en el caso de que la condición evaluada se verifique (es decir, devuelve el valor FALSO). La sintaxis es:La palabra ENTONCES antecede las acciones que se realizan si se cumple la condición y la expresión SI las que se realizan si se verifica la misma.En R se utiliza el comando else:Retomando el ejemplo anterior:","code":"SI <condición> ENTONCES\n  Acción/es\nSI NO\n  Acción/es\nFIN SIif (condición) {\n    ...código para ejecutar acciones...\n} else {\n    ...código para ejecutar acciones...\n}ALGORITMO: \"Analizar edad para votar\"\nCOMENZAR\n    VARIABLE numérica edad\n    LEER edad\n    SI edad >= 18 ENTONCES\n        ESCRIBIR \"Edad = \" edad \" años: puede votar\"\n    SI NO\n        ESCRIBIR \"Edad = \" edad \" años: no puede votar\"\n    FIN SI\nFIN\n# Programa: \"Analizar edad para votar\" -------------------------------\nedad <- 21\nif (edad >= 18) {\n    cat(\"Edad =\", edad, \"años: puede votar\")\n} else {\n    cat(\"Edad =\", edad, \"años: no puede votar\")\n}Edad = 21 años: puede votar"},{"path":"estructuras-de-control.html","id":"estructuras-condicionales-múltiples-o-anidadas","chapter":"3 Estructuras de control","heading":"3.2.3 Estructuras condicionales múltiples o anidadas","text":"Permiten combinar varias estructuras condicionales para establecer controles más complejos sobre el flujo de las acciones, representando una toma de decisión múltiple. Podemos ejemplificar la sintaxis de la siguiente forma:En la estructura anterior, hay una primera evaluación lógica en la cual si el resultado es VERDADERO, se ejecuta la Acción 1 y nada más. En cambio, si su resultado es FALSO, se procede realizar una segunda evaluación lógica, que da lugar la ejecución de la Acción 2 o de la Acción 3 si su resultado es VERDADERO o FALSO, respectivamente.Se debe notar que luego del primer SI comienza una nueva estructura completa de SI/ENTONCES/SI /FIN SI. Cada SI termina con su propio FIN SI. Al traducir esto R, se vuelve algo más sencillo:El último bloque de acciones (...Acción 3...) se evaluará si ninguna de las condiciones lógicas anteriores fue VERDADERO.En el ejemplo de la edad:","code":"SI <condición 1> ENTONCES\n  Acción 1\nSI NO\n  SI <condición 2> ENTONCES\n    Acción 2\n  SI NO\n    Acción 3\n  FIN SI\nFIN SIif (condición 1) {\n    ...Acción 1...\n} else if (condición 2) {\n    ...Acción 2...\n} else {\n    ...Acción 3...\n}ALGORITMO: \"Analizar edad para votar\"\nCOMENZAR\n    VARIABLE numérica edad\n    LEER edad\n    SI edad < 18 ENTONCES\n        ESCRIBIR \"Edad = \" edad \" años: no puede votar\"\n    SI NO\n        SI edad >= 70 ENTONCES\n            ESCRIBIR \"Edad = \" edad \" años: puede votar opcionalmente\"\n        SI NO\n            ESCRIBIR \"Edad = \" edad \" años: debe votar obligatoriamente\"\n        FIN SI\n    FIN SI\nFIN\n# Programa: \"Analizar edad para votar\" -------------------------------\nedad <- 21\nif (edad < 18) {\n    cat(\"Edad =\", edad, \"años: no puede votar\")\n} else if (edad >= 70) {\n    cat(\"Edad =\", edad, \"años: puede votar opcionalmente\")\n} else {\n    cat(\"Edad =\", edad, \"años: debe votar obligatoriamente\")\n}Edad = 21 años: debe votar obligatoriamente"},{"path":"estructuras-de-control.html","id":"estructuras-de-control-iterativas","chapter":"3 Estructuras de control","heading":"3.3 Estructuras de control iterativas","text":"Las estructuras de control iterativas son útiles cuando la solución de un problema requiere que se ejecute repetidamente un determinado conjunto de acciones. El número de veces que se debe repetir dicha secuencia de acciones puede ser fijo o puede variar dependiendo de algún dato o condición evaluar en el algoritmo.","code":""},{"path":"estructuras-de-control.html","id":"estructuras-de-control-iterativas-con-un-número-fijo-de-iteraciones","chapter":"3 Estructuras de control","heading":"3.3.1 Estructuras de control iterativas con un número fijo de iteraciones","text":"Se aplican cuando se conoce de antemano el número exacto de veces que se debe repetir una secuencia de acciones. También se conocen como bucles (loops) controlados por un conteo, ya que el algoritmo va contando la cantidad de repeticiones haciendo uso de una variable que recibe el nombre de variable de iteración, índice o conteo.Por ejemplo, imaginemos que queremos escribir un algoritmo que permita calcular la quinta potencia de cualquier número. Para esto, se debe tomar dicho número y multiplicarlo por sí mismo 5 veces. Por lo tanto, una posible solución es:Ya que sabemos que la multiplicación se debe repetir 5 veces, podemos resumir lo anterior con la siguiente estructura:La letra es la variable de iteración. Podríamos haber elegido otra letra u otra palabra en su lugar, pero emplear es una elección bastante común. En este ejemplo, su única función es ir contando la cantidad de veces que se repiten las acciones encerradas dentro de la estructura PARA/FIN PARA. El bloque de instrucciones se repite tantas veces como tarde en llegar 5 partiendo desde 1. Por convención, la variable de iteración la declaramos junto con las otras variables numéricas (como x y resultado).En R, el ejemplo anterior se implementa así:Dado que la variable de iteración toma un valor numérico que va cambiando en cada repetición del bloque, se puede aprovechar para hacer cuentas con el mismo. Por ejemplo, el siguiente algoritmo muestra la tabla del ocho:En lo anterior, \\n es un caracter especial que indica “salto de línea”. Si lo agregamos, los mensajes se imprimirían uno al lado del otro en el mismo renglón:De manera general, la sintaxis para este tipo de estructuras es:Dado un valor inicial <valor1> asignado la <variable>, esta se irá aumentando o disminuyendo según el paso <valor3> hasta llegar tomar el valor <valor2>. Si se indica el paso se asume que la variable de iteración aumenta de uno en uno. En R:Notar en el ejemplo de la quinta potencia que 1:5 es lo mismo que seq(1, 5, 1), pero podemos usar la función seq() en otros contextos más complejos, donde la variable de iteración puede pegar otros saltos en lugar de uno en uno.","code":"ALGORITMO: \"Calcular la quinta potencia\"\nCOMENZAR\n    VARIABLE numérica x, resultado\n    LEER x\n    resultado <- 1\n    resultado <- resultado * x\n    resultado <- resultado * x\n    resultado <- resultado * x\n    resultado <- resultado * x\n    resultado <- resultado * x\n    ESCRIBIR x \"elevado a la quinta es igual a\" resultado\nFINALGORITMO: \"Calcular la quinta potencia\"\nCOMENZAR\n    VARIABLE numérica x, resultado\n    LEER x\n    resultado <- 1\n    PARA i DESDE 1 HASTA 5 HACER\n        resultado <- resultado * x\n    FIN PARA\n    ESCRIBIR x \"elevado a la quinta es igual a\" resultado\nFIN\n# Programa: \"Calcular la quinta potencia\" ------------------------\nx <- 4\nresultado <- 1\nfor (i in 1:5) {\n    resultado <- resultado * x\n}\ncat(x, \"elevado a la quinta es igual a\", resultado)4 elevado a la quinta es igual a 1024ALGORITMO: \"Mostrar tabla del 8\"\nCOMENZAR\n    VARIABLE numérica resultado\n    PARA i DESDE 0 HASTA 10 HACER\n        resultado <- 8 * i\n        ESCRIBIR \"8 x\" i \"=\" resultado\n    FIN PARA\nFIN\n# Programa: \"Mostrar tabla del 8\" -------------------------------\nresultado <- 1\nfor (i in 0:10) {\n    resultado <- 8 * i\n    cat(\"8 x\", i, \"=\", resultado, \"\\n\")\n}8 x 0 = 0 \n8 x 1 = 8 \n8 x 2 = 16 \n8 x 3 = 24 \n8 x 4 = 32 \n8 x 5 = 40 \n8 x 6 = 48 \n8 x 7 = 56 \n8 x 8 = 64 \n8 x 9 = 72 \n8 x 10 = 80 \n# Programa: \"Mostrar tabla del 8\" -------------------------------\nfor (i in 0:10) {\n    resultado <- 8 * i\n    cat(\"8 x\", i, \"=\", resultado)\n}8 x 0 = 08 x 1 = 88 x 2 = 168 x 3 = 248 x 4 = 328 x 5 = 408 x 6 = 488 x 7 = 568 x 8 = 648 x 9 = 728 x 10 = 80PARA <variable> DESDE <valor1> HASTA <valor2> CON PASO <valor3> HACER\n    Acción/es\nFIN PARAfor (<variable> in seq(<valor1>, <valor2>, <valor3>)) {\n    ...Acción/es...\n}"},{"path":"estructuras-de-control.html","id":"estructuras-de-control-iterativas-con-un-número-indeterminado-de-iteraciones","chapter":"3 Estructuras de control","heading":"3.3.2 Estructuras de control iterativas con un número indeterminado de iteraciones","text":"En otras circunstancias se puede necesitar repetir un bloque de acciones sin conocer con exactitud cuántas veces, si que esto depende de algún otro aspecto del algoritmo. Las iteraciones pueden continuar mientras que o hasta que se verifique alguna condición, dando lugar dos tipos de estructuras. Estos casos también se conocen como bucles (loops) controlados por una condición.","code":""},{"path":"estructuras-de-control.html","id":"mientras-que","chapter":"3 Estructuras de control","heading":"3.3.2.1 Mientras que","text":"El conjunto de sentencias se repite mientras que se siga evaluando como VERDADERO una condición declarada al inicio del bloque. Cuando la condición ya se cumple, el proceso deja de ejecutarse. La sintaxis es:En R:Observaciones:La evaluación de la condición se lleva cabo antes de cada iteración, incluso antes de ejecutar el código dentro del bloque por primera vez. Si la condición es FALSO inicialmente, entonces las acciones en el cuerpo de la estructura se ejecutan nunca.La evaluación de la condición sólo se lleva cabo al inicio de cada iteración. Si la condición se vuelve FALSO en algún punto durante la ejecución de un bloque, el programa lo nota hasta que se termine de ejecutar el bloque y la condición sea evaluada antes de comenzar la próxima iteración.","code":"MIENTRAS QUE <condición> HACER\n   Acción/es a repetir\nFIN MIENTRASwhile(<condición>) {\n    ...Acción/es a repetir...\n}ALGORITMO: \"Dividir un número por 2 hasta encontrar un valor menor que 0.01\"\nCOMENZAR\n    VARIABLE numérica x\n    LEER x\n    MIENTRAS QUE x >= 0.01 HACER\n        x <- x / 2\n        ESCRIBIR x\n    FIN MIENTRAS\nFIN\nx <- 100\nwhile (x >= 0.01) {\n    x <- x / 2\n    cat(x, \"\\n\")\n}50 \n25 \n12.5 \n6.25 \n3.125 \n1.5625 \n0.78125 \n0.390625 \n0.1953125 \n0.09765625 \n0.04882812 \n0.02441406 \n0.01220703 \n0.006103516 "},{"path":"estructuras-de-control.html","id":"hasta-que","chapter":"3 Estructuras de control","heading":"3.3.2.2 Hasta que","text":"diferencia de la estructura MIENTRAS QUE, la estructura HASTA QUE repite el bloque de acciones hasta que se cumpla una condición, es decir, se ejecuta mientras que dicha condición sea evaluada como FALSA. La sintaxis es:Observación: con la estructura MIENTRAS QUE podría ser que el conjunto de sentencias nunca llegue ejecutarse si desde partida la condición evaluada ya es falsa. Por el contrario, en la estructura HASTA QUE el proceso se realiza al menos una vez, dado que la condición se evalúa al final.El ejemplo anterior empleando este tipo de estructura:En R este tipo de estructura se implementa con la sentencia repeat {}. Si bien continuación se muestra el correspondiente ejemplo, vamos utilizar esta estructura, debido que su escritura es más compleja y que generalmente es posible obtener el mismo resultado con un () {}.","code":"REPETIR\n   Acción/es\nHASTA QUE <condición>ALGORITMO: \"Dividir un número por 2 hasta encontrar un valor menor que 0.01\"\nCOMENZAR\n    VARIABLE numérica x\n    LEER x\n    REPETIR\n        x <- x / 2\n        ESCRIBIR x\n    HASTA QUE x < 0.01\nFIN\nx <- 100\nrepeat {\n    x <- x / 2\n    cat(x, \"\\n\")\n    if (x < 0.01) break\n}50 \n25 \n12.5 \n6.25 \n3.125 \n1.5625 \n0.78125 \n0.390625 \n0.1953125 \n0.09765625 \n0.04882812 \n0.02441406 \n0.01220703 \n0.006103516 "},{"path":"estructuras-de-control.html","id":"loops-infinitos","chapter":"3 Estructuras de control","heading":"3.3.2.3 Loops infinitos","text":"Con las sentencias de tipo MIENTRAS QUE se debe tener mucha precaución, puesto que si la evaluación lógica está bien especificada o nunca deja de ser evaluada como TRUE, se incurre en un loop infinito: el programa nunca deja de repetir el bloque (al menos hasta que la máquina se tilde o se produzca un error por desbordamiento de memoria, por ejemplo).La siguiente situación ilustra esto:","code":"var <- 9\nwhile (var < 10) {\n    var <- var - 1\n    cat(\"var =\", var, \"No puedo parar!!!\\n\")\n}\n\nvar = 8 No puedo parar!!!\nvar = 7 No puedo parar!!!\nvar = 6 No puedo parar!!!\nvar = 5 No puedo parar!!!\nvar = 4 No puedo parar!!!\nvar = 3 No puedo parar!!!\nvar = 2 No puedo parar!!!\nvar = 1 No puedo parar!!!\nvar = 0 No puedo parar!!!\nvar = -1 No puedo parar!!!\n..."},{"path":"estructuras-de-control.html","id":"ejemplos","chapter":"3 Estructuras de control","heading":"3.4 Ejemplos","text":"continuación se presentan algunos otros ejemplosNo necesariamente tiene que ser la variable iteradora, podemos darle cualquier nombre:\n\n(guau 1:5) {\n    print(guau)\n}\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\nLa sentencia print() también sirve para mostrar resultados. La ventaja con respecto cat() es que necesitamos agregar \\n para que el siguiente mensaje se escriba en un nuevo renglón, ya que lo agrega por sí sola sin que lo pidamos. La desventaja es que nos permite crear un mensaje combinando elementos separados entre comas, tal como se puede hacer con cat() (por ejemplo, cat(\"El valor de x es igual \", x)).necesariamente tiene que ser la variable iteradora, podemos darle cualquier nombre:La sentencia print() también sirve para mostrar resultados. La ventaja con respecto cat() es que necesitamos agregar \\n para que el siguiente mensaje se escriba en un nuevo renglón, ya que lo agrega por sí sola sin que lo pidamos. La desventaja es que nos permite crear un mensaje combinando elementos separados entre comas, tal como se puede hacer con cat() (por ejemplo, cat(\"El valor de x es igual \", x)).Acá tenemos un ejemplo de dos estructuras anidadas. En primer lugar, toma el valor 1, y entonces j varía de 1 2, generando las combinaciones = 1, j = 1; = 1, j = 2. Luego que j recorrió todo su campo de variación, se actualiza y pasa valer 2, generando las combinaciones = 2, j = 1; = 2, j = 2. Finalmente, se actualiza y pasa valer 3, generando las combinaciones = 3, j = 1; = 3, j = 2. Para cada combinación, se muestra el valor de la suma:\n\n(1:3) {\n    (j 1:2) {\n        suma <- + j\n        cat(\"vale\", , \"y j vale\", j, \". La suma es igual \", suma, \"\\n\") \n    }\n}\nvale 1 y j vale 1 . La suma es igual 2 \nvale 1 y j vale 2 . La suma es igual 3 \nvale 2 y j vale 1 . La suma es igual 3 \nvale 2 y j vale 2 . La suma es igual 4 \nvale 3 y j vale 1 . La suma es igual 4 \nvale 3 y j vale 2 . La suma es igual 5 Acá tenemos un ejemplo de dos estructuras anidadas. En primer lugar, toma el valor 1, y entonces j varía de 1 2, generando las combinaciones = 1, j = 1; = 1, j = 2. Luego que j recorrió todo su campo de variación, se actualiza y pasa valer 2, generando las combinaciones = 2, j = 1; = 2, j = 2. Finalmente, se actualiza y pasa valer 3, generando las combinaciones = 3, j = 1; = 3, j = 2. Para cada combinación, se muestra el valor de la suma:Sumar los números naturales del 1 al 5:\n\nsuma <- 0\n(1:5) {\n    suma <- suma + \n}\nsuma\n[1] 15Sumar los números naturales del 1 al 5:Sumar números naturales hasta que la suma pase el valor 100 y detenerse:\n\nsuma <- 0\n<- 1\n(suma < 100) {\n    suma <-  suma + \n    <- + 1\n}\nsuma\n[1] 105Sumar números naturales hasta que la suma pase el valor 100 y detenerse:Escribir todos los múltiplos de 8 menores que 150:\nALGORITMO: \"Múltiplos de 8 menores 150\"\nCOMENZAR\n    VARIABLE numérica multiplo\n    multiplo <- 8\n    MIENTRAS QUE multiplo < 150 HACER\n        ESCRIBIR multiplo\n        multiplo <- multiplo + 8\n    FIN MIENTRAS\nFIN\n\n# Programa: \"Múltiplos de 8 menores 150\" ------------------------\nmultiplo <- 8\n(multiplo < 150) {\n    print(multiplo)\n    multiplo <- multiplo + 8\n}\n[1] 8\n[1] 16\n[1] 24\n[1] 32\n[1] 40\n[1] 48\n[1] 56\n[1] 64\n[1] 72\n[1] 80\n[1] 88\n[1] 96\n[1] 104\n[1] 112\n[1] 120\n[1] 128\n[1] 136\n[1] 144Escribir todos los múltiplos de 8 menores que 150:","code":"\nfor (guau in 1:5) {\n    print(guau)\n}[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\nfor (i in 1:3) {\n    for (j in 1:2) {\n        suma <- i + j\n        cat(\"i vale\", i, \"y j vale\", j, \". La suma es igual a\", suma, \"\\n\") \n    }\n}i vale 1 y j vale 1 . La suma es igual a 2 \ni vale 1 y j vale 2 . La suma es igual a 3 \ni vale 2 y j vale 1 . La suma es igual a 3 \ni vale 2 y j vale 2 . La suma es igual a 4 \ni vale 3 y j vale 1 . La suma es igual a 4 \ni vale 3 y j vale 2 . La suma es igual a 5 \nsuma <- 0\nfor (i in 1:5) {\n    suma <- suma + i\n}\nsuma[1] 15\nsuma <- 0\ni <- 1\nwhile (suma < 100) {\n    suma <-  suma + i\n    i <- i + 1\n}\nsuma[1] 105ALGORITMO: \"Múltiplos de 8 menores a 150\"\nCOMENZAR\n    VARIABLE numérica multiplo\n    multiplo <- 8\n    MIENTRAS QUE multiplo < 150 HACER\n        ESCRIBIR multiplo\n        multiplo <- multiplo + 8\n    FIN MIENTRAS\nFIN\n# Programa: \"Múltiplos de 8 menores a 150\" ------------------------\nmultiplo <- 8\nwhile (multiplo < 150) {\n    print(multiplo)\n    multiplo <- multiplo + 8\n}[1] 8\n[1] 16\n[1] 24\n[1] 32\n[1] 40\n[1] 48\n[1] 56\n[1] 64\n[1] 72\n[1] 80\n[1] 88\n[1] 96\n[1] 104\n[1] 112\n[1] 120\n[1] 128\n[1] 136\n[1] 144"},{"path":"descomposición-algorítmica.html","id":"descomposición-algorítmica","chapter":"4 Descomposición algorítmica","heading":"4 Descomposición algorítmica","text":"Un principio fundamental en la resolución de un problema es intentar descomponerlo en partes más pequeñas, que puedan ser más fáciles de afrontar. Este concepto también se aplica en la programación. Nuestros algoritmos pueden descomponerse en subalgoritmos que den solución un aspecto del problema, de menor extensión. Este proceso se conoce como descomposición algorítmica o descomposición modular. Cada subalgoritmo debe ser independiente de los demás y su vez podría seguir descomponiéndose en partes más sencillas en lo que se conoce como refinamiento sucesivo. Si un programa es muy largo se corre el riesgo de que sea muy difícil de entender como un todo, pero siempre se lo puede dividir en secciones más simples y manejables. Un subalgoritmo se escribe una vez y luego es utilizado por todos aquellos algoritmos que lo necesiten.Cada vez que, como parte de la resolución de un problema, desde un algoritmo se solicita que se realicen las acciones establecidas por un subalgoritmo, se dice que se lo está invocando o llamando. Al algoritmo que invoca los subalgoritmos veces le decimos algoritmo principal para darle un mayor énfasis la idea que, desde el curso de acción principal, cada tanto se delega la ejecución de algunas tareas al subalgoritmo.El empleo de subalgoritmos, desarrollando por separado ciertas partes del problema, resulta especialmente ventajoso en los casos siguientes:En algoritmos complejos: si el algoritmo, y luego el programa, se escribe todo seguido y en un único archivo de código, resulta muy complicado de entender, porque se pierde la visión de su estructura global dada la gran cantidad de operaciones que lo conforman. Aislando ciertas partes como subalgoritmos separados se reduce la complejidad.Cuando se repiten operaciones análogas: si la resolución de un problema requiere realizar una tarea que se repite varias veces en el algoritmo, podemos definir dicha tarea como un subalgoritmo por separado. De esta manera, su código se escribirá sólo una vez aunque se use en muchos puntos del programa.En este capítulo hay algunas secciones indicadas como “opcionales” y algunos comentarios agregados como notas al pie. Estas partes añaden información para quienes estén interesados en saber un poco más, pero su contenido será requerido en la práctica ni en las evaluaciones.","code":""},{"path":"descomposición-algorítmica.html","id":"tipos-de-subalgoritmos","chapter":"4 Descomposición algorítmica","heading":"4.1 Tipos de subalgoritmos","text":"En el mundo de la programación existen muchos términos para definir distintos tipos de subalgoritmos: subrutinas, funciones, procedimientos, métodos, subprogramas, etc. es posible obtener una definición que capture todas las variantes que existen en el uso de estos términos debido que el significado de cada uno de ellos varía según el paradigma\n8\ny el lenguaje de programación escogidos. Qué se entiende por cada uno de ellos depende muchas veces del paradigma de programación empleado y del lenguaje escogido, por lo cual existe una definición lo suficientemente general para cada uno.Sin embargo, suele haber bastante consenso en distinguir, dentro de los subalgoritmos, las funciones y los procedimientos de esta forma:Una función es un subalgoritmo que al ser evaluado devuelve un único resultado (por ejemplo, un valor numérico) que es utilizado en el algoritmo principal que lo invoca.Un procedimiento es un subalgoritmo que al ser evaluado devuelve un valor, sino que produce efectos secundarios en el ambiente del algoritmo principal que lo invoca. Persigue el objetivo de ayudar en la modularidad del programa.","code":""},{"path":"descomposición-algorítmica.html","id":"funciones","chapter":"4 Descomposición algorítmica","heading":"4.2 Funciones","text":"Una función es un subalgoritmo que devuelve un único resultado partir de otros valores provistos. El valor que la función devuelve define su tipo, de modo que una función puede ser de tipo numérica, caracter o lógica 9.Para ejemplificar, podemos decir que la noción de función en programación se asemeja la idea matemática de función de una o más variables. Por ejemplo, podemos pensar en la función \\(f(x, y) = x^2 + 3y\\) (ejemplo 1). Si queremos saber cuál es el valor numérico de la función \\(f\\) cuando \\(x\\) toma el valor \\(4\\) e \\(y\\) toma el valor \\(5\\), reemplazamos en la expresión anterior las variables por los valores mencionados y obtenemos: \\(f(4, 5) = 4^2 + 3 \\times 5 = 31\\).Podemos definir dicha función en pseudocódigo de la siguiente manera:El primer renglón de la definición comienza con la palabra clave FUNCIÓN y termina, luego de los dos puntos, con la palabra numérico para indicar que esta función devuelve como resultado un valor numérico.En el medio se encuentra el nombre elegido para la función (f), seguido por la declaración entre paréntesis de los parámetros o argumentos que la función necesita para operar, es decir, el input o información de entrada con la cual se realizarán las operaciones. Se dice que \\(x\\) e \\(y\\) son los parámetros formales o ficticios, ya que tienen un valor asignado en sí mismos sino que permiten expresar de manera general las acciones que la función ejecuta. Describen lo que uno diría en palabras: “hay que tomar \\(x\\), elevarlo al cuadrado y sumarle la \\(y\\) multiplicada por 3”. Entre los paréntesis también se aclara que estos parámetros formales son de tipo numérico.Los valores en los cuales se quiere evaluar la función se llaman parámetros actuales o reales. Por ejemplo, si nos interesa calcular \\(f(4, 5)\\), los valores \\(4\\) y \\(5\\) son los parámetros actuales y se establece una correspondencia entre el parámetro formal \\(x\\) y el actual \\(4\\), así como entre la \\(y\\) y el \\(5\\). El resultado que se obtiene, como observamos antes, es \\(31\\) y este es el valor que la función devuelve.La definición anterior también puede ser expresada como:Aquí notamos que debemos declarar x e y puesto que son los parámetros de la función (quedan declarados entre los paréntesis en la primera línea). Sin embargo, sí declaramos cualquier otra nueva variable que sea creada dentro de la función, por ejemplo, la variable resultado.De manera general, la definición de una función es:La palabra clave DEVOLVER provoca la inmediata finalización de la ejecución de la función e indica cuál es el resultado de la misma, cuyo tipo debe coincidir con el tipo de función declarado en el encabezado. La acción DEVOLVER se puede insertar en cualquier punto del cuerpo de la función y, además, es posible utilizar más de una sentencia DEVOLVER en una misma función, aunque sólo una llegue ejecutarse. Esto puede verse en el siguiente ejemplo (ejemplo 2):Para usar una función en un algoritmo, se la invoca escribiendo su nombre seguido por los valores actuales entre paréntesis, separados por coma. Esta invocación representa un valor que puede ser usado como operando en otra expresión. Por ejemplo:Al invocar una función es obligatorio que los valores suministrados para los argumentos actuales entre los paréntesis correspondan en cantidad, tipo y orden con los argumentos formales de la definición de la función. Es por esto que los siguientes casos son ejemplos de un uso incorrecto de funciones en el algoritmo principal:Para motivar el uso de una buena práctica que ayude distinguir entre las acciones de los subalgoritmos y del algoritmo, vamos escribir los subalgoritmos antes y por fuera del algoritmo principal10. Consideremos el ejemplo 3 mostrado continuación. Primero definimos los subalgoritmos que necesitaremos (son los de los ejemplos 1 y 2) y luego escribiremos un algoritmo principal que hace uso de ellos para resolver un problema en particular:¿Qué mensaje escribe el algoritmo anterior?","code":"FUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    DEVOLVER x^2 + 3 * y\nFIN FUNCIÓNFUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    VARIABLE numérica resultado\n    resultado <- x^2 + 3 * y\n    DEVOLVER resultado\nFIN FUNCIÓNFUNCIÓN nombre(lista de parámetros formales): tipo de resultado\nCOMENZAR\n    Declaración de variables\n    Acciones\n    DEVOLVER valor\nFIN FUNCIÓNFUNCIÓN maximo(num1: numérico, num2: numérico): numérico\nCOMENZAR\n    SI num1 >= num2 ENTONCES\n        DEVOLVER num1\n    SI NO\n        DEVOLVER num2\n    FIN SI\nFIN FUNCIÓNALGORITMO: \"Hallar el máximo entre dos valores y restarle 100\"\nCOMENZAR\n    VARIABLE numérica x, y, rtdo\n    LEER x, y\n    rtdo <- maximo(x, y) - 100\n    ESCRIBIR \"El resultado es \" rtdo\nFINALGORITMO: \"Incorrecto por proveer pocos argumentos para la función\"\nCOMENZAR\n    VARIABLE numérica x, y, rtdo\n    LEER x, y\n    rtdo <- maximo(x) - 100\n    ESCRIBIR \"El resultado es \" rtdo\nFIN\n\nALGORITMO: \"Incorrecto por proveer valores de tipo caracter para la función\"\nCOMENZAR\n    VARIABLE numérica rtdo\n    VARIABLE caracter x, y\n    x <- \"chau\"\n    y <- \"hola\"\n    rtdo <- maximo(x, y) - 100\n    ESCRIBIR \"El resultado es \" rtdo\nFIN\n\nALGORITMO: \"Incorrecto por no proveer argumentos para la función\"\nCOMENZAR\n    VARIABLE numérica x, y, rtdo\n    LEER x, y\n    rtdo <- maximo - 100\n    ESCRIBIR \"El resultado es \" rtdo\nFIN---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    DEVOLVER x^2 + 3 * y\nFIN FUNCIÓN\n\nFUNCIÓN maximo(num1: numérico, num2: numérico): numérico\nCOMENZAR\n    SI num1 >= num2 ENTONCES\n        DEVOLVER num1\n    SI NO\n        DEVOLVER num2\n    FIN SI\nFIN FUNCIÓN\n\n--------------------------------------------------------------\nALGORITMO PRINCIPAL\n--------------------------------------------------------------\n\nALGORITMO: \"Realizar  operaciones matemáticas muy importantes\"\nCOMENZAR\n    VARIABLE numérica rtdo1, rtdo2, rtdo3\n    rtdo1 <- f(2, 5)\n    rtdo2 <- f(3, 10)\n    rtdo3 <- maximo(rtdo1, rtdo2) + 20\n    ESCRIBIR \"El resultado es \" rtdo3\nFIN"},{"path":"descomposición-algorítmica.html","id":"funciones-en-r","chapter":"4 Descomposición algorítmica","heading":"4.3 Funciones en R","text":"En la sección anterior vimos cómo definir funciones en pseudocódigo. Antes de pasar ver cómo programar nuestras funciones en R, vamos comentar algunas cuestiones acerca de las funciones que R ya trae disponibles como parte de su funcionalidad básica.","code":""},{"path":"descomposición-algorítmica.html","id":"funcpredef","chapter":"4 Descomposición algorítmica","heading":"4.3.1 Funciones predefinidas de R","text":"R, como todo lenguaje de programación, tiene funciones predefinidas, es decir, sentencias que se encargan de realizar alguna actividad. Ya estuvimos usando algunas de ellas, por ejemplo, cuando hemos necesitado mostrar algún mensaje usamos las funciones cat() o print()11. Además, existen muchas otras funciones predefinidas, como todas aquellas que se necesitan para realizar ciertas operaciones matemáticas:En los ejemplos anteriores, 100 representa un valor numérico que se pasa como argumento la función para que la misma opere. Algunas funciones predefinidas en R pueden trabajar con más de un argumento, en cuyo caso hay que enumerarlos dentro de los paréntesis, separados con comas. Por ejemplo, si en lugar de calcular el logaritmo natural (cuya base es la constante matemática \\(e\\)), queremos calcular un logaritmo en base 10, podemos hacer lo siguiente:¿Cómo sabemos que la función log() se puede usar de esa forma, cambiando el valor de la base con respecto la cual toma el logaritmo? Lo aprendemos al leer el manual de ayuda de R. Toda función predefinida de R viene con un instructivo que detalla cómo se usa, qué argumentos incluye y otras aclaraciones. Lo encontramos en la pestaña de Ayuda (Help) en el panel de abajo la derecha en RStudio. Otras formas de abrir la página de ayuda sobre una función es correr en la consola alguna de estas sentencias:Esa página de ayuda tiene bastante información, porque reúne información sobre muchas funciones relacionadas con logaritmos y exponenciales, pero podemos detenernos en la parte resaltada que se muestra continuación:\nFigura 4.1: Captura de pantalla de la ayuda sobre la función log()\nEn la sección Usage (“uso”) descubrimos que la función log() puede usarse con dos argumentos: x y base. En la sección Arguments entendemos que x es el número al cual le vamos sacar el logaritmo y base es la base con respecto la cual se toma el logaritmo. Por eso, al correr log(100, 10), estamos calculando el logaritmo de x = 100 con base = 10.Vemos, además, una diferencia en la forma en que x y base aparecen en la descripción: log(x, base = exp(1)). Cuando un argumento tiene un signo = significa que tiene asignado un valor por default y que es necesario usarlo. Por eso, cuando corremos log(100) estamos calculando el logaritmo de x = 100 con la base elegida por R por defecto: base = exp(1), que es la forma que tiene R de nombrar la constante \\(e = 2.718282...\\) (es el logaritmo natural). Si quiero cambiar la base, debo proveer un valor, por ejemplo, log(100, 10). Por el contrario, el argumento x tiene asignado un valor por default. Eso significa que obligatoriamente tenemos que proveer un valor para el mismo.R también permite usar una función escribiendo los nombres de los argumentos (es decir, detallando tanto los parámetros formales como los actuales), lo cual muchas veces es muy esclarecedor:Es más, si escribimos los nombres de los parámetros explícitamente, podemos cambiar su orden, sin alterar el resultado:Si escribimos los nombres, el orden importa:Al tener los nombres indicados explícitamente, R hace corresponder los parámetros formales x y base con los valores provistos en ese orden: en el primer caso x recibe el valor 100 y base, el valor 10, mientras que en el segundo caso es al revés.Finalmente, se debe observar que es necesario invocar la función escribiendo de forma directa los valores entre los paréntesis, sino que en su lugar pueden ir variables:","code":"\n# Raiz cuadrada\nsqrt(100)[1] 10\n# Valor absoluto\nabs(100)[1] 100\n# Función exponencial\nexp(100)[1] 2.688117e+43\n# Logaritmo natural\nlog(100)[1] 4.60517\n# Logaritmo de 100 en base 10\nlog(100, 10)[1] 2\nhelp(log)\n?log\nlog(x = 100, base = 10)[1] 2\nlog(base = 10, x = 100)[1] 2\nlog(100, 10)[1] 2\nlog(10, 100)[1] 0.5\nx <- 100\ny <- x / 2\nz <- 4\nlog(x - y, 4)       # Log en base 4 de x - y[1] 2.821928"},{"path":"descomposición-algorítmica.html","id":"definición-de-nuevas-funciones-en-r","chapter":"4 Descomposición algorítmica","heading":"4.3.2 Definición de nuevas funciones en R","text":"Ahora que ya hemos visto cómo se trabaja con funciones en R de manera general, vamos aprender definir nuestras propias funciones. Recordemos el subalgoritmo del ejemplo 1:En R, definimos esta función así:\nFigura 4.2: Estructura de una función en R\nLa estructura general es:Debemos:Elegir un nombreAl lado del nombre, colocar el operador de asignación (<-) para asociar ese nombre la definición de una función.Escribir la sentencia function(...) {...}, donde entre paréntesis se definen todos los parámetros formales separados con coma y entre llaves el conjunto de acciones englobar.El valor que la función debe arrojar como resultado se encierra dentro de la sentencia return(), que indica el fin de la ejecución.Una vez que la definición de la función es ejecutada, pasa formar parte de los elementos que conforman al ambiente, como se puede apreciar al verla listada como un objeto más en el panel Environment de RStudio 12. partir de este momento, podemos utilizarla, como parte de otro programa. Para invocarla, escribimos el nombre de la función y entre paréntesis los valores que nos interesan para el cálculo (parámetros actuales). Por ejemplo:Recordando lo discutido en la sección anterior, podemos apreciar que los siguientes usos de la función f() son equivalentes:Sin embargo, son equivalentes los siguientes:continuación, podemos ver casos que generan error por hacer un uso incorrecto de la función (¿por qué?):Retomemos ahora el ejemplo 3. Mencionamos que es importante distinguir entre la definición de los subalgoritmos y la de un algoritmo principal que los invoca:Esta distinción también es importante en R: la definición de las funciones debe ejecutarse antes de que las mismas sean llamadas desde el programa principal. Así, para traducir el pseudocódigo anterior R, podríamos crear un archivo de código (llamado, por ejemplo, ejemplo3.R) con el siguiente contenido:","code":"FUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    VARIABLE numérica resultado\n    resultado <- x^2 + 3 * y\n    DEVOLVER resultado\nFIN FUNCIÓN\nf <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}nombre <- function(argumentos) {\n  ... sentencias de R ...\n}\n# Ejemplos de uso de la función f\nf(4, 5)[1] 31\nf(6, -5)[1] 21\nf(0, 0)[1] 0\nf(4, 5)[1] 31\nf(x = 4, y = 5)[1] 31\nf(y = 5, x = 4)[1] 31\n# Siguiendo el orden de definición, x recibe el valor 4, y recibe el 5:\nf(4, 5)[1] 31\n# Siguiendo el orden de definición, x recibe el valor 5, y recibe el 4:\nf(5, 4)[1] 37\n# Error por omitir un argumento de uso obligatorio (x recibe 4, falta y)\nf(4)Error in f(4): argument \"y\" is missing, with no default\n# Error por proveer más argumentos de los declarados en la definición\nf(4, 5, 6)Error in f(4, 5, 6): unused argument (6)---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    DEVOLVER x^2 + 3 * y\nFIN FUNCIÓN\n\nFUNCIÓN maximo(num1: numérico, num2: numérico): numérico\nCOMENZAR\n    SI num1 >= num2 ENTONCES\n        DEVOLVER num1\n    SI NO\n        DEVOLVER num2\n    FIN SI\nFIN FUNCIÓN\n\n--------------------------------------------------------------\nALGORITMO PRINCIPAL\n--------------------------------------------------------------\n\nALGORITMO: \"Realizar  operaciones matemáticas muy importantes\"\nCOMENZAR\n    VARIABLE numérica rtdo1, rtdo2, rtdo3\n    rtdo1 <- f(2, 5)\n    rtdo2 <- f(3, 10)\n    rtdo3 <- maximo(rtdo1, rtdo2) + 20\n    ESCRIBIR \"El resultado es \" rtdo3\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nf <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}\n\nmaximo <- function(num1, num2) {\n    if (num1 > num2) {\n        return(num1)\n    } else {\n        return(num2)\n    }\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\nrtdo1 <- f(2, 5)\nrtdo2 <- f(3, 10)\nrtdo3 <- maximo(rtdo1, rtdo2) + 20\ncat(\"El resultado es\", rtdo3)El resultado es 59"},{"path":"descomposición-algorítmica.html","id":"ejemplofact","chapter":"4 Descomposición algorítmica","heading":"4.4 Documentación de los subalgoritmos","text":"En el contexto de la programación, documentar significa escribir indicaciones para que otras personas puedan entender lo que queremos hacer en nuestro código o para que sepan cómo usar nuestras funciones. Por ejemplo, como vimos antes todas funciones predefinidas de R están documentadas para que podamos buscar ayuda si la necesitamos. Cuando estamos creando nuestras propios subalgoritmos, es importante que también incluyamos comentarios para guiar otras personas (y nosotros mismos en el futuro si nos olvidamos) para qué y cómo se usa lo que estamos desarrollando.Para ilustrar esto, vamos recordar que en la práctica 2 escribimos un algoritmo para el cálculo de factoriales. Dado que los mismos son muy útiles en variadas aplicaciones, podemos escribir un subalgortimo que se encargue de obtenerlos. Luego, escribiremos un algoritmo para mostrar todos los factoriales de los números 1 10.En R:","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\n#-------------------------------------------------------\n# Función fact\n# Calcula el factorial de números enteros no negativos\n# Entrada:\n#   - n, entero no negativo\n# Salida:\n#   - el factorial de n\n#-------------------------------------------------------\nFUNCIÓN fact(n: numérico): numérico\nCOMENZAR\n    VARIABLE numérica resultado\n    resultado <- 1\n    SI n > 0 ENTONCES\n        PARA i DESDE 1 HASTA n HACER\n            resultado <- resultado * i\n        FIN PARA\n    FIN SI\n    DEVOLVER resultado\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Mostrar los factoriales de los 10 primeros naturales\"\nCOMENZAR\n    PARA j DESDE 1 HASTA 10 HACER\n        ESCRIBIR \"El factorial de \" j \" es igual a \" fact(j)\n    FIN PARA\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\n#-----------------------------------------------------\n# Función fact\n# Calcula el factorial de números enteros no negativos\n# Entrada:\n#       - n, entero no negativo\n# Salida:\n#       - el factorial de n\n#-----------------------------------------------------\nfact <- function(n) {\n    resultado <- 1\n    if (n > 0) {\n        for (i in 1:n) {\n            resultado <- resultado * i\n        }\n    }\n    return(resultado)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL: Mostrar los factoriales de los 10 primeros naturales\n# ---------------------------------------------------------------\nfor (j in 1:10) {\n    cat(\"El factorial de\", j, \"es igual a\", fact(j), \"\\n\")\n}El factorial de 1 es igual a 1 \nEl factorial de 2 es igual a 2 \nEl factorial de 3 es igual a 6 \nEl factorial de 4 es igual a 24 \nEl factorial de 5 es igual a 120 \nEl factorial de 6 es igual a 720 \nEl factorial de 7 es igual a 5040 \nEl factorial de 8 es igual a 40320 \nEl factorial de 9 es igual a 362880 \nEl factorial de 10 es igual a 3628800 "},{"path":"descomposición-algorítmica.html","id":"pasaje-de-parámetros","chapter":"4 Descomposición algorítmica","heading":"4.5 Pasaje de parámetros","text":"Los algoritmos y subalgoritmos comunican información entre sí través de los parámetros o argumentos. Esta comunicación recibe el nombre de pasaje de argumentos y se puede realizar de dos formas: por valor o por referencia. Algunos lenguajes de programación trabajan con uno u otro sistema, mientras que otros lenguajes permiten el uso de ambos.","code":""},{"path":"descomposición-algorítmica.html","id":"pasaje-por-valor","chapter":"4 Descomposición algorítmica","heading":"4.5.1 Pasaje por valor","text":"En este caso, los argumentos representan valores que se transmiten desde el algoritmo hacia el subalgoritmo. El pasaje por valor implica que los objetos del algoritmo provistos como argumentos en la llamada al subalgoritmo serán modificados por la ejecución del mismo. Este sistema funciona de la siguiente forma:Se evalúan los argumentos actuales usados en la invocación al subalgoritmo.Los valores obtenidos se copian en los argumentos formales dentro del subalgoritmo.Los argumentos formales se usan como variables dentro del subalgoritmo. Aunque los mismos sean modificados (por ejemplo, se les asignen nuevos valores), se modifican los argumentos actuales en el algoritmo, sólo sus copias dentro del subalgoritmo.Veamos un ejemplo:Si el pasaje de argumentos se hace por valor, los cambios producidos en el cuerpo de la función sobre los parámetros formales son transmitidos los parámetros actuales en el algoritmo principal. Esto significa que los formales son una “copia” de los actuales. Los pasos que sigue el algoritmo son:En el algoritmo principal, se asignan los valores: = 3, b = 5.Al invocar la función, se establece la correspondencia: x = 3, y = 5 - 3 = 2.Primera línea de la función: x = 3 + 1 = 4.La función devuelve el valor x + y = 4 + 2 = 6.De regreso en el algoritmo principal: c recibe el valor 6.El algoritmo escribe: 3 5 6.En R, el pasaje de argumentos es por valor. Por lo tanto, este tipo de comportamiento es lo que vemos cuando implementamos el ejemplo discutido13:","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN fun(x: numérico, y: numérico): numérico\nCOMENZAR\n    x <- x + 1\n    DEVOLVER x + y\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo de pasaje de argumentos\"\nCOMENZAR\n    VARIABLE numérica a, b, c\n    a <- 3\n    b <- 5\n    c <- fun(a, b - a)\n    ESCRIBIR a b c\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nfun <- function(x, y) {\n    x <- x + 1\n    return(x + y)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\na <- 3\nb <- 5\nc <- fun(a, b - a)\ncat(a, b, c)3 5 6"},{"path":"descomposición-algorítmica.html","id":"pasaje-por-referencia","chapter":"4 Descomposición algorítmica","heading":"4.5.2 Pasaje por referencia","text":"En este caso, los argumentos sólo representan valores que se transmiten desde el algoritmo hacia el subalgoritmo, sino también desde el subalgoritmo al algoritmo. Esto sirve en las situaciones en las que se quiere que el subalgoritmo pueda modificar las variables del algoritmo principal que se pasaron como argumentos. De esta manera, un subalgoritmo puede producir uno o varios efectos secundarios en el ambiente del algoritmo.Si un parámetro se pasa por referencia, todos los cambios que experimente dentro del subalgoritmo se producirán también en la variable externa pasada como argumento. Esto se debe que la información que es pasada desde el algoritmo al subalgoritmo es la dirección en la memoria de la computadora donde se halla almacenado el parámetro actual, es decir, se pasa una referencia la variable, el valor que contiene.Este sistema funciona de la siguiente forma:Se seleccionan las variables usadas como argumentos actuales.Se asocia cada variable con el argumento formal correspondiente.Los cambios que experimenten los argumentos formales se reflejan también en los argumentos actuales de origen.Retomemos el ejemplo anterior:Si el pasaje de argumentos se hace por referencia, los pasos que sigue el algoritmo son:En el algoritmo principal, se asignan los valores: = 3, b = 5.Al invocar la función, se establece la correspondencia: x = 3, y = 5 - 3 = 2.Primera línea de la función: x = 3 + 1 = 4. El parámetro actual asociado con x, , sufre el mismo cambio y recibe el valor 4 (= 4).La función devuelve el valor x + y = 4 + 2 = 6.De regreso en el algoritmo principal: c recibe el valor 6.El algoritmo escribe: 4 5 6.Debe notarse que los resultados difieren dependiendo del tipo de pasaje de argumentos empleado\n14. R trabaja con pasaje por referencia (aunque es posible forzar que haga algo similar, si así se lo desea).","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN fun(x: numérico, y: numérico): numérico\nCOMENZAR\n    x <- x + 1\n    DEVOLVER x + y\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo de pasaje de argumentos\"\nCOMENZAR\n    VARIABLE numérica a, b, c\n    a <- 3\n    b <- 5\n    c <- fun(a, b - a)\n    ESCRIBIR a b c\nFIN"},{"path":"descomposición-algorítmica.html","id":"ámbito-de-las-variables","chapter":"4 Descomposición algorítmica","heading":"4.6 Ámbito de las variables","text":"En todo lenguaje de programación se le dice ámbito o scope la región del programa donde una variable definida existe y es visible, tal que fuera de dicha región se puede acceder la misma\n15. Según el ámbito en el que existen, las variables pueden considerarse locales o globales.","code":""},{"path":"descomposición-algorítmica.html","id":"variables-locales","chapter":"4 Descomposición algorítmica","heading":"4.6.1 Variables locales","text":"Las variables declaradas dentro de un subalgoritmo (por ejemplo, dentro de una función) se llaman variables locales. Sólo pueden ser usadas por las sentencias que están dentro de esa función, mientras que el programa principal u otros subalgoritmos desconocen su existencia y las pueden usar. Las variables locales residen en el ambiente local de un subalgortimo y tienen nada que ver con las variables que puedan ser declaradas con el mismo nombre en otros lugares16. En el siguiente ejemplo, las variables y b son locales la función f1 y se pueden usar desde el programa principal, porque dejan de existir una vez que termina la ejecución de f1:El error se genera porque el algoritmo principal quiere usar la variable , la cual es local la función f1() y sólo existe dentro de la misma.El uso de variables locales tiene muchas ventajas. Permiten independizar al subalgoritmo del algoritmo principal, ya que las variables definidas localmente en un subalgoritmo son reconocidas fuera de él. La comunicación entre el subalgoritmo y el algoritmo principal se da exclusivamente través de la lista de parámetros. Esta característica hace posible dividir grandes proyectos en piezas más pequeñas y que, por ejemplo, diferentes programadores puedan trabajar independientemente en un mismo proyecto.","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f1(x: numérico): numérico\nCOMENZAR\n    VARIABLE numérica a, b\n    a <- x - 10\n    b <- x + 10\n    DEVOLVER a + b\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo\"\nCOMENZAR\n    VARIABLE numérica z\n    z <- f1(50)\n    ESCRIBIR z\n    ESCRIBIR z + a   ---LÍNEA CON ERROR---\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nf1 <- function(x) {\n    a <- x - 10\n    b <- x + 10\n    return(a + b)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\nz <- f1(50)\nz[1] 100\nz + aError in eval(expr, envir, enclos): object 'a' not found"},{"path":"descomposición-algorítmica.html","id":"variables-globales","chapter":"4 Descomposición algorítmica","heading":"4.6.2 Variables globales","text":"Las variables globales son las que se definen fuera de una función, mantienen su valor lo largo de todo el programa y pueden ser usadas dentro de las funciones, aún cuando se la pasemos como argumento. En el ejemplo anterior z es una variable global17. Las variables globales residen en el ambiente global del algoritmo.El siguiente ejemplo muestra cómo la función f2 puede hacer uso de una variable global y que fue definida fuera de ella, en el programa principal\n18:La función pudo hacer uso de la variable global y sin haberse comunicado con el programa principal través de los argumentos. Esta práctica es recomendable: si bien evaluemos f2(2) dos veces, el resultado fue el mismo, porque depende de cuánto vale y en el ambiente global en el momento que f2 es invocada. Además de ser confuso, esto es una violación al principio de transparencia referencial: un subalgoritmo sólo debe utilizar elementos mencionados en la lista de argumentos o definidos localmente, sin emplear variables globales. En particular, si hablamos de una función donde el pasaje de parámetros es por valor, esta práctica garantiza que la misma siempre devuelva el mismo resultado cada vez que sea invocada con los mismos valores en los argumentos de entrada, sin producir ningún efecto secundario en el algoritmo principal. El uso de variables globales permite escribir subalgoritmos que carecen de transparencia referencial.Un algoritmo puede usar el mismo nombre para variables locales y globales, pero dentro de una función toma precedencia la variable local. En el siguiente ejemplo, hay una variable global en el programa principal que recibe el valor 70. Y hay otra variable que es local la función f3. Cuando f3 calcula + b, lo hace con el valor de su variable local (x - 10) y con el valor de la variable global (70):Se debe prestar atención que con la sentencia ESCRIBIR o la función cat() en R se muestra en pantalla un mensaje en el momento en el que se ejecuta esa acción. Si el mensaje incluye mostrar valores guardados en objetos, se mostrarán los valores que los mismos tienen en ese momento. Por otro lado, lo devuelto por la sentencia DEVOLVER o la función return() es el resultado de la ejecución de la función: el valor que la función entrega puede ser asignado otro objeto en el algoritmo principal, como ocurre en la lína de z <- f3(50).","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f2(x: numérico): numérico\nCOMENZAR\n    VARIABLE numérica a\n    a <- x * y\n    DEVOLVER a\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo\"\nCOMENZAR\n    VARIABLE numérica y\n    y <- 20\n    ESCRIBIR f2(2)\n    y <- 18\n    ESCRIBIR f2(2)\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nf2 <- function(x) {\n    a <- x * y\n    return(a)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\ny <- 20\nf2(2)[1] 40\ny <- 18\nf2(2)[1] 36---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f3(x: numérico): numérico\nCOMENZAR\n    VARIABLE numérica a, b\n    a <- x - 10\n    b <- x + 10\n    ESCRIBIR \"Acá, dentro de la f3, el valor de a es\", a\n    DEVOLVER a + b\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo\"\nCOMENZAR\n    VARIABLE numérica a, z\n    a <- 70\n    z <- f3(50)\n    ESCRIBIR z\n    ESCRIBIR \"Acá, en el programa principal, el valor de a es\", a\n    ESCRIBIR a + z\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nf3 <- function(x) {\n    a <- x - 10\n    b <- x + 10\n    cat(\"Acá, dentro de la f3, el valor de a es\", a)\n    return(a + b)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\na <- 70\nz <- f3(50)Acá, dentro de la f3, el valor de a es 40\nz[1] 100\ncat(\"Acá, en el programa principal, el valor de a es\", a)Acá, en el programa principal, el valor de a es 70\na + z[1] 170"},{"path":"descomposición-algorítmica.html","id":"otros-tópicos-de-lectura-opcional","chapter":"4 Descomposición algorítmica","heading":"4.7 Otros tópicos de lectura opcional","text":"","code":""},{"path":"descomposición-algorítmica.html","id":"la-función-source","chapter":"4 Descomposición algorítmica","heading":"4.7.1 La función source()","text":"Cuanto más grande o complejo es el problema resolver, más funciones deben ser programadas y es necesario escribirlas todas en el mismo archivo de código del programa principal. Para ser más ordenados, podemos escribir nuestras funciones en uno o más archivos separados. Si hacemos esto, en el comienzo del script del programa principal debemos incluir una sentencia para que en primer lugar se ejecute el código guardado en esos otros archivos, de modo que las funciones sean definidas y formen parte del ambiente global.Consideremos otra vez el ejemplo de la función para el cálculo de factoriales. Podemos guardar el código de esta función (y otras si hubiese) en un archivo llamado funciones.R, con el siguiente contenido:Luego, en cualquier problema que requiera el cálculo de factoriales, vamos pedirle R que ejecute el código guardado en el archivo funciones.R con la sentencia source(), como paso inicial en el archivo donde estemos escribiendo el programa principal. Por ejemplo:Gracias source() todas las funciones definidas en el archivo funciones.R aparecerán en el entorno y hay necesidad ni siquiera de abrirlo. Notar que C:/Documentos/Facultad/IALP/ es la dirección o path de la carpeta en la computadora donde hayas guardado el archivo funciones.R.","code":"#-----------------------------------------------------\n# Función fact\n# Calcula el factorial de números enteros no negativos\n# Entrada:\n#       - n, entero no negativo\n# Salida:\n#       - el factorial de n\n#-----------------------------------------------------\nfact <- function(n) {\n    resultado <- 1\n    if (n > 0) {\n        for (i in 1:n) {\n            resultado <- resultado * i\n        }\n    }\n    return(resultado)\n}\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL: Mostrar los factoriales de los 10 primeros naturales\n# ---------------------------------------------------------------\n\nsource(\"C:/Documentos/Facultad/IALP/funciones.R\")\n\nfor (j in 1:10) {\n    cat(\"El factorial de\", j, \"es igual a\", fact(j), \"\\n\")\n}"},{"path":"descomposición-algorítmica.html","id":"sentencia-return","chapter":"4 Descomposición algorítmica","heading":"4.7.2 Sentencia return","text":"La sentencia return() puede omitirse. R devuelve el resultado de la última expresión analizada. Por eso, las siguientes funciones son equivalentes:De todos modos, es aconsejable usar return() para ganar en claridad. Además, en funciones más complejas, su uso puede ser indispensable para indicar el término de la evaluación de la función.","code":"\ng1 <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}\ng1(4, 5)[1] 31\ng2 <- function(x, y) {\n    x^2 + 3 * y\n}\ng2(4, 5)[1] 31"},{"path":"descomposición-algorítmica.html","id":"argumentos-con-valores-asignados-por-defecto","chapter":"4 Descomposición algorítmica","heading":"4.7.3 Argumentos con valores asignados por defecto","text":"Hemos visto que algunos argumentos de las funciones predefinidas de R tienen valores asignados por defecto, como es el caso de la función log(), que menos que indiquemos otra cosa opera con la base natural. Cuando definimos nuestras propias funciones, también es posible asignarle un valor por defecto uno o más de sus argumentos.\nTomemos el primer ejemplo de este capítulo:Esta función también podría ser definida así:Esto significa que si proveemos un valor para el argumento y, este se le asignará por default el valor 100. Luego:En el caso anterior, se hace corresponder el 4 al primer argumento de la función, x, y como hay ningún otro parámetro actual que le estemos pasando la función, la misma le asigna y el valor 100 y calcula: x^2 + 3 * y = 16 + 300 = 316. Sin embargo, podemos, como antes, proveer cualquier otro valor para y, de modo que se use el valor por default:Como x tiene valor asignado por default en la función nueva_f(), siempre debemos pasarle un valor. En caso contrario, recibiremos un error:","code":"\nf <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}\nf(4, 5)[1] 31\nnueva_f <- function(x, y = 100) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}\nnueva_f(4)[1] 316\nnueva_f(4, 5)[1] 31\nnueva_f()Error in nueva_f(): argument \"x\" is missing, with no default\nnueva_f(y = 5)Error in nueva_f(y = 5): argument \"x\" is missing, with no default"},{"path":"descomposición-algorítmica.html","id":"modificar-una-variable-global-desde-el-cuerpo-de-una-función-en-r","chapter":"4 Descomposición algorítmica","heading":"4.7.4 Modificar una variable global desde el cuerpo de una función en R","text":"Hemos dicho que una función recibe información desde el programa principal través de sus parámetros, y envía información al mismo mediante el valor que devuelve. Sin embargo, es posible alterar el comportamiento para que sea capaz de producir efectos secundarios, por ejemplo, modificando el valor de una variable global, violando así el principio de transparencia referencial.Los siguientes ejemplos definen dos funciones con un único argumento, x, pero que en su cuerpo hacen uso de una variable global, y, definida el algoritmo principal (estos casos violan el principio de transparencia referencial, su práctica es recomendable). La diferencia entre ellas es que g1() modifica el valor de y dentro de la función, pero el valor de y en el ambiente global es alterado; mientras que g2() cambia el valor de y sólo localmente, sino también en el ambiente global. Esto se logra mediante el uso del operador <<-19.Nuevamente, esta forma de trabajo es aconsejable porque estamos produciendo efectos secundarios desde la función en el ambiente global que pueden pasar desapercibidos si estamos muy atentos. Así como la mejor práctica es pasar toda la información desde el programa principal hacia la función través de sus parámetros, también es recomendable que toda comunicación desde la función hacia el programa principal se realice través del valor (u objeto) que la función devuelve, sin producir efectos secundarios (transparencia referencial).","code":"\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\ng1 <- function(x) {\n    y <- y + 100\n    return(x / y)\n}\n\ng2 <- function(x) {\n    y <<- y + 100\n    return(x / y)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\n# Caso 1: el valor de y en el ambiente global no es modificado por g1\nx <- 500\ny <- 50\nz <- g1(x)\ncat(x, y, z)500 50 3.333333\n# Caso 2: el valor de y en el ambiente global es modificado por g2\nx <- 500\ny <- 50\nz <- g2(x)\ncat(x, y, z)500 150 3.333333"},{"path":"descomposición-algorítmica.html","id":"procedimientos","chapter":"4 Descomposición algorítmica","heading":"4.7.5 Procedimientos","text":"Un procedimiento es un subalgoritmo que agrupa una acción o conjunto de acciones, dándoles un nombre por el que se las puede identificar posteriormente. Se diferencia de la función en que tiene como objetivo, en general, devolver un valor, sino sólo contribuir la descomposición o modularidad del programa. R trabaja con el concepto de procedimiento, sino que todo tipo de subalgoritmo se genera con la misma estructura de function(...){...}20.Como en las funciones, desde el algoritmo principal se pasan valores al procedimiento utilizando parámetros o argumentos, aunque también puede haber procedimientos que carezcan de los mismos. Para usar un procedimiento hay que invocarlo, escribiendo su nombre y continuación, si los hay, los valores de los argumentos actuales para esa llamada, separados por comas. Aquí también los argumentos actuales deben ser compatibles en cuanto la cantidad, tipo y orden que los argumentos formales declarados en la definición del procedimiento.En el siguiente ejemplo podemos identificar los argumentos actuales (con el valor 5), b (con el valor 2), c y d (sin valores asignados inicialmente). Cuando el procedimiento proced1 es invocado, se establece una correspondencia con los argumentos formales n1, n2, n3 y n4, respectivamente. n1 toma el valor 5, n2 toma el valor 2 y el procedimiento le asigna los valores 7 n3 y 1 n4. Al finalizar, este procedimiento habrá dejado sin cambios las variables y b, mientras que le habrá asignado los valores 7 c y 1 d. Como resultado, el algoritmo escribe “5 2 7 1”.En el siguiente ejemplo, el procedimiento proced2 modifica las variables que actúan como argumentos actuales. Al ser invocado, se establece una correspondencia entre los argumentos actuales (con el valor 5) y b (con el valor 2), y los argumentos formales n1 y n2, respectivamente. De esta forma, la primera acción del procedimiento le asigna el valor 7 n1 y 1 n2. De esta manera, al finalizar vale 7 y b vale 1 y el algoritmo escribe “7 1”.Analicemos ahora el tipo de pasaje de argumentos en el contexto de un procedimiento:Si el pasaje es por referencia, los pasos que sigue el algoritmo serían:En el algortimo se asignan los valores: = 8, b = 4.Al invocar la función: x = 8, y = 4.Primera línea de la función: x = 8 * 2 = 16. Lo mismo sucede con el parámetro actual : = 16.Segunda línea de la función: y = 16 - 4 = 12. Lo mismo sucede con el parámetro actual b: b = 12.Al regresar al algoritmo principal, la sentencia ESCRIBIR produce: 16 12.Si el pasaje hubiese sido por valor, y b hubiesen cambiado y la sentencia ESCRIBIR mostraría 8, 4. Como en un procedimiento los resultados regresan en los mismos parámetros, pueden ser todos pasados por valor, porque en ese caso el procedimiento nunca realizaría ninguna acción.Si el parámetro x se pasa por valor mientras que y se pasa por referencia, los pasos serían:= 8, b = 4.Al invocar la función: x = 8, y = 4.Primera línea de la función: x = 8 * 2 = 16.Segunda línea de la función: y = 16 - 4 = 12. Lo mismo sucede con el parámetro actual b: b = 12.Al regresar al algoritmo principal, la sentencia ESCRIBIR produce: 8 12.Dado que en R el pasaje de argumentos es siempre por valor y por referencia, existen los procedimientos. Por esta razón, esta sección se ejemplifica con código de R.","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nPROCEDIMIENTO proced1(n1: numérico, n2: numérico, n3: numérico, n4: numérico)\n    n3 <- n1 + n2\n    n4 <- n2 - 1\nFIN PROCEDIMIENTO\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: Primer ejemplo de procedimiento\nCOMENZAR\n    VARIABLE numérica a, b, c, d\n    a <- 5\n    b <- 2\n    proced1(a, b, c, d)\n    ESCRIBIR a b c d\nFIN---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nPROCEDIMIENTO proced2(n1: numérico, n2: numérico)\n    n1 <- n1 + n2\n    n2 <- n2 - 1\nFIN PROCEDIMIENTO\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: Segundo ejemplo de procedimiento\nCOMENZAR\n    VARIABLE numérica a, b\n    a <- 5\n    b <- 2\n    proced2(a, b)\n    ESCRIBIR a b\nFIN---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nPROCEDIMIENTO miProc(x: numérico, y: numérico)\n    x <- x * 2\n    y <- x - y\nFIN PROCEDIMIENTO\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: Tercer ejemplo de procedimiento\nCOMENZAR\n    VARIABLE numérica a, b\n    a <- 8\n    b <- 4\n    miProc(a, b)\n    ESCRIBIR a b\nFIN"},{"path":"estructuras-de-datos.html","id":"estructuras-de-datos","chapter":"5 Estructuras de Datos","heading":"5 Estructuras de Datos","text":"Hasta ahora todos los algoritmos que hemos desarrollado hacen uso de objetos que guardan datos individuales, los cuales representaban un número, una cadena de texto o un valor lógico. Sin embargo, la verdadera utilidad de la computación radica en poder trabajar con conjuntos de datos, organizados de acuerdo ciertas reglas que permitan su manipulación y acceso. Definimos entonces como estructura de datos un conjunto de datos que cuentan con un sistema de organización.Veremos dos tipos de estructuras de datos: los arreglos y las listas.","code":""},{"path":"estructuras-de-datos.html","id":"arreglos","chapter":"5 Estructuras de Datos","heading":"5.1 Arreglos","text":"Un arreglo (o array) se define como una colección de valores individuales con dos características fundamentales:Ordenamiento: los valores individuales pueden ser enumerados en orden, es decir, debe ser posible identificar en qué posición del arreglo se encuentra cada valor.Homogeneidad: los valores individuales almacenados en un arreglo son todos del mismo tipo (numérico, caracter, lógico).Los arreglos son muy útiles para almacenar información en la memoria de la computadora, organizando valores que estén relacionados entre sí de alguna manera, por ejemplo, una conjunto de precios, los meses del año, el listado de calificaciones de estudiantes en distintos parciales, etc.Los componentes individuales del conjunto se llaman elementos. Para indicar qué posición ocupa cada elemento en el arreglo se emplean uno o más índices. Dependiendo de cuántos índices se deban utilizar para acceder cada elemento dentro de los arreglos, estos se clasifican en unidmensionales (vectores), bidimensionales (matrices) o multidimensionales.","code":""},{"path":"estructuras-de-datos.html","id":"arreglos-unidimensionales-o-vectores","chapter":"5 Estructuras de Datos","heading":"5.1.1 Arreglos unidimensionales o vectores","text":"Un arreglo unidimensional o vector tiene n elementos todos del mismo tipo. Por ejemplo, el siguiente es un vector de tipo numérico llamado x con 5 elementos:\nFigura 5.1: Ejemplo de un vector numérico\nCada uno de los elementos ocupa una posición determinada en el vector. Por ejemplo, el elemento 3 del vector x es el numéro 2.71. Se puede acceder o hacer referencia cada elemento mediante el uso de índices, expresados entre corchetes al lado del nombre del vector. De esta forma, si escribimos x[3] hacemos referencia la tercera posición del vector, que actualmente guarda al valor 2.71. Como podemos ver, sólo hace falta un índice para hacer referencia cada elemento de un vector.\nFigura 5.2: Ejemplo de un vector numérico: índices para señalar cada posición.\nLos siguientes son ejemplos de vectores de tipo caracter y lógico, con distintas cantidades de elementos:\nFigura 5.3: Ejemplo de un vector caracter y un vector lógico\nAl igual que todas las variables que empleamos en nuestros algoritmos, los vectores que serán utilizados deben ser declarados en el pseudocódigo, eligiendo un identificador (nombre) e indicando su tipo y su tamaño, es decir, la cantidad de posiciones que contienen. Esto último se señala entre paréntesis al lado del nombre elegido. Por ejemplo, el vector x visto anteriomente puede ser creado de la siguiente forma:Si bien la declaración de un vector sólo tiene como objetivo permitirle la computadora que reserve internamente el espacio necesario en memoria para el mismo, para escribir pseudocódigo de una manera sencilla estableceremos la siguiente convención. Cuando declaramos un vector de tipo numérico con la expresión VARIABLE numérica x(5) asumiremos que, además de reservar espacio en memoria para el vector, se le asigna un 0 (cero) en cada posición. Es decir, el vector x es iniciado con ceros, que más tarde pueden ser reemplazados por otros valores. Del mismo modo, asumiremos que cuando declaramos vectores de tipo caracter, todos sus elementos son iniciados con valores \"\" (una cadena de texto vacía) y cuando declaramos vectores de tipo lógico, con el valor FALSO.En R, los vectores se construyen de forma dinámica por lo cual es necesario declararlos antes de comenzar utilizarlos. La función c() (de combinar) permite crear vectores, por ejemplo, los mencionados anteriormente:\nFigura 5.4: Creación de vectores en R\nCuando ejecutamos dichas líneas, se crean en el ambiente global los objetos x, y y z, como podemos notar en la pestaña Environment de RStudio. Es decir, los vectores, así como cualquier otro tipo de arreglo, son objetos que constituyen entidades en sí mismas y que pueden ser manipulados al hacer referencia sus indicadores. Además, RStudio nos muestra en la pestaña mencionada qué tipo de vector es cada uno (num, chr, logi), cuántos elementos tiene ([1:5], [1:4], [1:3]) y una previsualización de sus primeros elementos.Dado que la función c() resulta, en consecuencia, muy importante al programar en R, es recomendable que evitemos usar la letra c como nombre para otros objetos21.Podemos emplear estructuras iterativas para recorrer todas las posiciones de un vector y realizar operaciones con ellas, por ejemplo:Todos los lenguajes de programación incluyen, además, alguna función para determinar cuántos elementos tiene un vector que ya fue creado. Para esto emplearemos la expresión LARGO() en el pseudocódigo y la función length de R:Entonces, para recorrer todos los elementos del vector podemos hacer también:O bien:Antes comentamos que en R los vectores se crean con expresiones como x <- c(-4.5, 12, 2.71, -6, 25), donde sus elementos están listados de forma literal. También podemos crear vectores de un largo determinado dejando que cada posición quede ocupada por un valor por default. Por ejemplo, el siguiente código crea un vector tipo numérico con 10 posiciones, uno caracter con 7 y otro lógico con 2. En cada caso, R rellena por defecto todas las posiciones con el mismo valor: un 0 para todas las posiciones del vector numérico, un caracter vacío \"\" para las del vector caracter y el valor FALSE para el vector lógico:Se pueden asignar valores una, varias o todas las posiciones de un vector en cualquier parte del algoritmo. Además, en pseudocódigo emplearemos la palabra clave MOSTRAR cuando deseamos que se escriba en pantalla todo el contenido de un vector. Por ejemplo:En los ejemplos anteriores, declaramos los vectores explicitando su tamaño con un número: VARIABLE numérica x(5) o VARIABLE numérica (10). Sin embargo, el tamaño del vector podría estar guardado en otra variable, cuyo valor se determina en cada ejecución del programa mediante información externa o como resultado de algún cálculo anterior. En el siguiente ejemplo se deja que el usuario determine la dimensión del vector y que provea cada uno de los valores para el mismo. Antes de poder declarar la existencia del nuevo vector llamado mi_vector, se “lee” su tamaño:Por ahora, toda instrucción de leer en el pseudocódigo será traducida en R mediante la asignación directa de valores. Por ejemplo, LEER tam se reemplaza por tam <- 5 (o el número que necesitemos).Antes de terminar esta sección haremos una última observación. En R todos los objetos que hemos considerado como “variable” y que guardan un único valor (como tam en el ejemplo anterior), son también considerados como vectores, cuyo largo es 1, como podemos verificar en el siguiente ejemplo:Ejemplo: invertir los elementos de un vectorNos planteamos el problema de dar vuelta los elementos pertenecientes un vector, de manera que el primer elemento pase ser el último, el segundo pase al penúltimo lugar, etcétera. Por ejemplo, dado el vector de tipo caracter v:\nFigura 5.5: Vector v original\nqueremos modificarlo para obtener:\nFigura 5.6: Vector v reordenado\nSi bien podemos pensar en distintas formas para resolver este problema, probablemente la más sencilla requiere que intercambiemos de dos los valores en ciertas posiciones del vector, por ejemplo, empezando por intercambiar el primero con el último. Para esto podemos emplear una variable auxiliar que guarde el valor de alguna de las celdas temporariamente (por eso lo vamos llamar tmp):\nFigura 5.7: Pasos para intercambiar valores\nAhora sólo resta realizar el mismo procedimiento para los valores de las posiciones 2 y 4. Como el número de elementos en el vector es impar, el valor en la posición central queda en su lugar. Podemos definir el siguiente algorimo para resolver este problema de manera general. En el siguiente pseudocódigo, primero declaramos una variable numérica n que puede tomar cualquier valor y que servirá para declarar cuántos espacios necesita el vector. Luego, se itera para leer cada elemento del vector. Finalmente, se implementa la estrategia de reordenamiento:En el ejemplo anterior hemos incorporado el uso de comentarios en el pseudocódigo para describir el objetivo de cada parte. Imitando lo que hacemos en R, señalamos la presencia de comentarios con el caracter # (podríamos usar otra cosa, pero adheriremos esta convención). Se usó la expresión ENTERO() para hacer referencia la parte entera del número indicado entre paréntesis, lo cual se puede indicar en R con la función floor(). Además, en R reemplazamos todas las instrucciones LEER por una asignación directa de valores:","code":"VARIABLE numérica x(5)\nx[1] <- -4.5\nx[2] <- 12\nx[3] <- 2.71\nx[4] <- -6\nx[5] <- 25\nx <- c(-4.5, 12, 2.71, -6, 25)\ny <- c(\"ARG\", \"correo@gmail.com\", \"Ok\", \"chau\")\nz <- c(TRUE, TRUE, FALSE)PARA i DESDE 1 HASTA 5 HACER\n    ESCRIBIR \"La posición \" i \"de x está ocupada por el valor \" x[i]\nFIN PARA\nfor (i in 1:5) {\n    cat(\"La posición\", i, \"de x está ocupada por el valor\", x[i], \"\\n\")\n}La posición 1 de x está ocupada por el valor -4.5 \nLa posición 2 de x está ocupada por el valor 12 \nLa posición 3 de x está ocupada por el valor 2.71 \nLa posición 4 de x está ocupada por el valor -6 \nLa posición 5 de x está ocupada por el valor 25 ESCRIBIR \"El vector x tiene \" LARGO(x) \" elementos.\"\nESCRIBIR \"El vector y tiene \" LARGO(y) \" elementos.\"\nESCRIBIR \"El vector z tiene \" LARGO(z) \" elementos.\"\ncat(\"El vector x tiene\", length(x), \"elementos.\")El vector x tiene 5 elementos.\ncat(\"El vector y tiene\", length(y), \"elementos.\")El vector y tiene 4 elementos.\ncat(\"El vector z tiene\", length(z), \"elementos.\")El vector z tiene 3 elementos.PARA i DESDE 1 HASTA LARGO(x) HACER\n    ESCRIBIR \"La posición \" i \"de x está ocupada por el valor \" x[i]\nFIN PARAtam <- LARGO(x)\nPARA i DESDE 1 HASTA tam HACER\n    ESCRIBIR \"La posición \" i \"de x está ocupada por el valor \" x[i]\nFIN PARA\na <- numeric(10)\nb <- character(7)\nd <- logical(2)\n\na [1] 0 0 0 0 0 0 0 0 0 0\nb[1] \"\" \"\" \"\" \"\" \"\" \"\" \"\"\nd[1] FALSE FALSEVARIABLE numérica a(10)\n...algunas acciones...\nPARA i DESDE 1 HASTA LARGO(a) HACER\n    SI i %% 3 == 0 ENTONCES  \n        a[i] <- i * 100\n    FIN SI\nFIN PARA\nMOSTRAR a\na <- numeric(10)\nfor (i in 1:length(a)) {\n    if (i %% 3 == 0) {\n        a[i] <- i * 100\n    }\n}\na       # También: cat(a) o print(a) [1]   0   0 300   0   0 600   0   0 900   0VARIABLE numérica tam\nLEER tam\nVARIABLE numérica mi_vector(tam)\nPARA i DESDE 1 HASTA tam HACER\n    LEER mi_vector[i]\nFIN PARA\nx <- 25\nlength(x)[1] 1\nis.vector(x) # Esta función lógica le pregunta a R si el objeto x es un vector[1] TRUEALGORITMO: \"Invertir (dar vuelta) los elementos de un vector\"\nCOMENZAR\n    \n  # Declarar variables\n  VARIABLE numérica n\n  VARIABLE caracter tmp\n  LEER n\n  VARIABLE caracter v(n)\n  \n  # Asignar valores al vector\n  PARA i DESDE 1 HASTA n HACER\n      LEER v[i]\n  FIN PARA\n  \n  # Reordenar\n  PARA i DESDE 1 HASTA ENTERO(n / 2) HACER\n      tmp <- v[i]                 # Paso 1\n      v[i] <- v[n - i + 1]        # Paso 2\n      v[n - i + 1] <- tmp         # Paso 3\n  FIN PARA\n  \n  # Mostrar el vector reodenado\n  MOSTRAR v\n    \nFIN\nv <- c(\"Estadística\", \"en\", \"Licenciatura\", \"la\", \"Aguante\")\nn <- length(v)\nfor (i in 1:floor(n / 2)) {\n    tmp <- v[i]\n    v[i] <- v[n - i + 1]\n    v[n - i + 1] <- tmp\n}\nv[1] \"Aguante\"      \"la\"           \"Licenciatura\" \"en\"           \"Estadística\" "},{"path":"estructuras-de-datos.html","id":"arreglos-bidimensionales-o-matrices","chapter":"5 Estructuras de Datos","heading":"5.1.2 Arreglos bidimensionales o matrices","text":"Un arreglo bidimensional representa lo que habitualmente conocemos en matemática como matriz y por eso también lo llamamos de esa forma. Podemos imaginar que en una matriz los elementos están organizados en filas y columnas formando una tabla. Por ejemplo, la siguiente es una matriz llamada x:\nFigura 5.8: Ejemplo de una matriz numérica\ndiferencia de los vectores, las matrices requieren dos índices para señalar la posición de cada elemento, el primero para indicar la fila y el segundo para indicar la columna. Los mismos se colocan entre corchetes, separados por una coma, al lado del identificador de la matriz. De esta forma, si hablamos de x[1, 3] hacemos referencia la posición ocupada por el valor 18, mientras que si mencionamos x[3, 1] nos referimos al valor 14.\nFigura 5.9: Ejemplo de una matriz numérica: índices para señalar cada posición\nAl tamaño de una matriz, es decir, cuántas filas y columnas tiene, se le dice dimensión. La matriz anterior es de dimension \\(3 \\times 4\\).Como hicimos con los vectores, debemos declarar las matrices que vamos usar en el pseudocódigo, indicando su identificador, tipo y dimensión: VARIABLE numérica x(3, 4). También vamos asumir que todas las posiciones de una matriz son iniciadas con el valor 0, \"\" o FALSO si la misma es numérica, caracter o lógica, respectivamente. La matriz x puede ser generada en pseudocódigo de esta forma:En R, es necesario declarar las matrices con anterioridad y las mismas pueden ser creadas de manera literal con la función matrix(). Su primer argumento, data, es un vector con todos los elementos que queremos guardar en la matriz. Luego, se indica la cantidad de filas para la misma con nrow y la cantidad de columnas con ncol:Notar que R ubicó los valores provistos llenando primero la columna 1, luego la 2, etc. Ese comportamiento puede ser modificado con el argumento byrow, que por default es FALSE. Si lo cambiamos TRUE los elementos son ubicados por fila. Además, podemos usar saltos de líneas (enter) para visualizar las diferentes filas de la matriz. Esto tiene ningún impacto en R, sólo sirve para que el código sea más fácil de leer. Dado que hemos provisto 12 valores e indicamos que queremos 3 filas, el argumento ncol es necesario (es obvio que quedarán 4 columnas). Por eso, las siguientes sentencias son equivalentes la anterior:Si colocamos un único valor como primer argumento en la función matrix(), el mismo se repetirá en todas las posiciones. En este caso sí o sí tenemos que indicar cuántas filas y columnas deseamos:Una vez que la matriz ya existe, en el pseudocódigo haremos referencia al número de filas y columnas de la misma con las expresiones NFILA(x) y NCOL(x). En R tenemos las siguientes funciones para analizar el tamaño de las matrices:Podemos recorrer todas las posiciones de una matriz con una estructura iterativa doble: nos situamos en la primera fila y recorremos cada columna, luego en la segunda fila y recorremos todas las columnas y así sucesivamente:\nFigura 5.10: Recorrer una matriz por fila\nTambién se puede recorrer la matriz por columna, si modificamos ligeramente las estructuras iterativas:\nFigura 5.11: Recorrer una matriz por columna\nSe puede usar cualquier letra o palabra como variables iteradoras, pero el uso de para las filas y de j para las columnas es bastante común.También podemos asignar valores en cada celda mientras recorremos la matriz. De hecho, la matriz x del ejemplo puede ser generada así, donde los índices y j sólo señalan una posición en particular dentro de la matriz, sino que además se usan para hacer el cálculo del valor asignar:Si queremos dejar que el valor en cada posición sea determinado por una fuente de información externa la hora de correr el programa, empleamos la sentencia LEER en el pseudocódigo:","code":"VARIABLE numérica x(3, 4)\nx[1, 1] <- 8\nx[1, 2] <- 13\nx[1, 3] <- 18\nx[1, 4] <- 23\nx[2, 1] <- 11\nx[2, 2] <- 16\nx[2, 3] <- 21\nx[2, 4] <- 26\nx[3, 1] <- 14\nx[3, 2] <- 19\nx[3, 3] <- 24\nx[3, 4] <- 29\nx <- matrix(data = c(8, 11, 14, 13, 16, 19, 18, 21, 24, 23, 26, 29),\n            nrow = 3, ncol = 4)\nx     [,1] [,2] [,3] [,4]\n[1,]    8   13   18   23\n[2,]   11   16   21   26\n[3,]   14   19   24   29\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n            nrow = 3, byrow = TRUE)\n\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n            ncol = 4, byrow = TRUE)\ny <- matrix(0, nrow = 2, ncol = 5)\ny     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    0    0    0    0\n[2,]    0    0    0    0    0\ndim(x)[1] 3 4\nnrow(x)[1] 3\nncol(x)[1] 4\ndim(y)[1] 2 5\nnrow(y)[1] 2\nncol(y)[1] 5VARIABLE numérica x(3, 4)\nPARA i DESDE 1 HASTA NFILA(x) HACER\n    PARA j DESDE 1 HASTA NCOL(x) HACER\n        x[i, j] <- 3 * i + 5 * j\n    FIN PARA\nFIN PARA\nMOSTRAR x\nx <- matrix(0, nrow = 3, ncol = 4)\nfor (i in 1:nrow(x)) {\n    for (j in 1:ncol(x)) {\n        x[i, j] <- 3 * i + 5 * j\n    }\n}\nx     [,1] [,2] [,3] [,4]\n[1,]    8   13   18   23\n[2,]   11   16   21   26\n[3,]   14   19   24   29VARIABLE numérica x(3, 4)\nPARA i DESDE 1 HASTA NFILA(x) HACER\n  PARA j DESDE 1 HASTA NCOL(x) HACER\n    LEER x[i, j]\n  FIN PARA\nFIN PARA"},{"path":"estructuras-de-datos.html","id":"ejemplo-trasponer-una-matriz","chapter":"5 Estructuras de Datos","heading":"5.1.2.1 Ejemplo: trasponer una matriz","text":"En Álgebra, trasponer una matriz de dimensión \\(m \\times n\\) significa generar una nueva matriz de dimensión \\(n \\times m\\), donde los elementos se intercambian de este modo:\nFigura 5.12: Matriz traspuesta\nPodemos formalizar el algoritmo que permite generar la matriz traspuesta, teniendo en cuenta que cada elemento que originalmente ocupa la posición [, j] en la matriz original, debe pasar ocupar la posición [j, ] en la matriz traspuesta:Dado que en R vamos asignar valores en la matriz de manera literal, primero la creamos y luego usamos nrow() y ncol() para obtener los correspondientes valores de nf y nc. En el siguiente ejemplo, además, todas las posiciones de la matriz traspuesta son iniciadas con el valor NA (valor lógico que significa Available o “disponible”).","code":"ALGORITMO: Trasponer matriz\nCOMENZAR\n    \n    # Declarar objetos\n    VARIABLE numérica nf, nc\n    LEER nf, nc\n    VARIABLE numérica x(nf, nc), traspuesta(nc, nf)\n    \n    # Leer los valores de la matriz\n    PARA i DESDE 1 HASTA nf HACER\n        PARA j DESDE 1 HASTA nc HACER\n            LEER x[i, j]\n        FIN PARA\n    FIN PARA\n    \n    # Trasponer\n    PARA i DESDE 1 HASTA nf HACER\n        PARA j DESDE 1 HASTA nc HACER\n            traspuesta[j, i] <- x[i, j]\n        FIN PARA\n    FIN PARA\n    \n    # Mostrar ambas matrices\n    ESCRIBIR \"Matriz original\"\n    MOSTRAR x\n    ESCRIBIR \"Matriz traspuesta\"\n    MOSTRAR traspuesta\n    \nFIN\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n            nrow = 3, byrow = TRUE)\nnf <- nrow(x)\nnc <- ncol(x)\ntraspuesta <- matrix(NA, nc, nf)\nfor (i in 1:nf) {\n    for (j in 1:nc) {\n        traspuesta[j, i] <- x[i, j]\n    }\n}\ncat(\"Matriz original\\n\")\nx\ncat(\"Matriz traspuesta\\n\")\ntraspuestaMatriz original\n     [,1] [,2] [,3] [,4]\n[1,]    8   13   18   23\n[2,]   11   16   21   26\n[3,]   14   19   24   29\nMatriz traspuesta\n     [,1] [,2] [,3]\n[1,]    8   11   14\n[2,]   13   16   19\n[3,]   18   21   24\n[4,]   23   26   29"},{"path":"estructuras-de-datos.html","id":"arreglos-multidimensionales","chapter":"5 Estructuras de Datos","heading":"5.1.3 Arreglos multidimensionales","text":"Un arreglo multidimensional contiene más de dos dimensiones, es decir, requiere más de dos índices para identificar cada uno de sus elementos. La representación matemática o visual ya es tan sencilla. Para interpretarlos o saber cuándo usarlos, pensamos que cada una de las dimensiones representa una característica de los elementos.Por ejemplo, imaginemos que en un local comercial se quiere registrar cuántos clientes se atendieron en cada una de las tres cajas disponibles (primer dimensión del arreglo: caja 1, caja 2 o caja 3), ya sea en el turno mañana o tarde (segunda dimensión: 1 para la mañana o 2 para la tarde) en cada día hábil de una semana (tercera dimensión: 1 lunes, 2 martes, 3 miércoles, 4 jueves o 5 viernes). Si queremos registrar, por ejemplo, que la caja 1 en el turno tarde del día jueves atendió 12 clientes, tenemos que guardar el valor 12 en la posición [1, 2, 4] del arreglo.Para situaciones como la anterior, resulta más útil guardar los valores en otros tipos de estructuras especializadas en conjuntos de datos, como veremos más adelante. Por esta razón, en esta asignatura profundizaremos en el estudio de arreglos multidimensionales y nos bastaremos con vectores y matrices. Sin embargo, debemos saber de su existencia porque son estructuras útiles para ciertas tareas de programación.Por lo tanto, lo siguiente es de lectura opcional. El arreglo de 3 dimensiones que permite acomodar toda la información del ejemplo en una sola estructura puede definirse en pseudocódigo así:Y en R:Luego, si queremos registrar que la caja 1 en el turno tarde del día jueves atendió 12 clientes, hacemos, tanto en R como en pseudocódigo:En R, podemos ponerle un nombre cada una de las dimensiones del arreglo (“caja”, “turno”, “dia”), para poder identificar mejor qué aspecto hace referencia y, su vez, un nombre cada una de sus modalidades (por ejemplo, “caja 1”, “caja 2” o “caja 3”). Esto se logra de la siguiente forma:En lo anterior hemos utilizado una lista, que se trata de otro tipo de estructura de datos definida continuación.","code":"VARIABLE numérica clientes(3, 2, 5)\nclientes <- array(0, dim = c(3, 2, 5))\nclientes, , 1\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 2\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 3\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 4\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 5\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\nclientes[1, 2, 4] <- 12\nclientes, , 1\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 2\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 3\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 4\n\n     [,1] [,2]\n[1,]    0   12\n[2,]    0    0\n[3,]    0    0\n\n, , 5\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\ndimnames(clientes) <- list(caja = c(\"caja 1\", \"caja 2\", \"caja 3\"),\n                           turno = c(\"mañana\", \"tarde\"),\n                           dia = c(\"lun\", \"mar\", \"mie\", \"jue\", \"vie\"))\nclientes, , dia = lun\n\n        turno\ncaja     mañana tarde\n  caja 1      0     0\n  caja 2      0     0\n  caja 3      0     0\n\n, , dia = mar\n\n        turno\ncaja     mañana tarde\n  caja 1      0     0\n  caja 2      0     0\n  caja 3      0     0\n\n, , dia = mie\n\n        turno\ncaja     mañana tarde\n  caja 1      0     0\n  caja 2      0     0\n  caja 3      0     0\n\n, , dia = jue\n\n        turno\ncaja     mañana tarde\n  caja 1      0    12\n  caja 2      0     0\n  caja 3      0     0\n\n, , dia = vie\n\n        turno\ncaja     mañana tarde\n  caja 1      0     0\n  caja 2      0     0\n  caja 3      0     0"},{"path":"estructuras-de-datos.html","id":"listas","chapter":"5 Estructuras de Datos","heading":"5.2 Listas","text":"Una de las principales características de los arreglos es la homegeneidad: todos los elementos que contienen deben ser del mismo tipo. se puede, por ejemplo, mezclar en una matriz valores numéricos y lógicos. Sin embargo, en muchos problemas resulta útil contar con alguna estructura de datos que permita agrupar objetos de diversos tipos. Esa es, justamente, la definición de una lista. Podemos imaginarla como una bolsa en la cual podemos meter todo tipo de objetos, incluyendo vectores, matrices y, por qué , otras bolsas (es decir, bolsas dentro de una bolsa o listas dentro de una lista). Todos los lenguajes de programación proveen algún tipo de estructura con estas características, aunque todos las llaman igual. Otros posibles nombres con los que se conocen pueden ser tupla o agregado. En R se llaman listas o vectores recursivos. El siguiente diagrama presenta una lista (recuadro con puntas redondeadas) que contiene:Un vector numérico de largo 3.Un vector caracter de largo 2.Una matriz numérica de dimensión 2x2.Un valor lógico.\nFigura 5.13: Ejemplo de una lista\nEn R la creación de esta lista se realiza mediante la función list(), cuyos argumentos son los elementos que queremos guardar en la lista, separados por comas:Luego de correr la sentencia anterior, podemos ver que mi_lista es un nuevo objeto disponible en el ambiente global y como tal está listado en el panel Environment. Allí se nos indica que se trata de una lista y, además, podemos previsualizar su contenido al hacer clic en el círculo celeste que antecede su nombre:\nFigura 5.14: La lista en la pestaña Environment de RStudio\nUsamos dobles corchetes [[ ]] para referenciar cada objeto que forma parte de la lista. Además, si queremos indicar un elemento dentro de un objeto que forma parte de la lista, agregamos otro conjunto de corchetes como hacemos con vectores y matrices. Por ejemplo:\nFigura 5.15: Ejemplo de una lista\nPodemos asignar valor algún elemento usando los índices de esa misma forma:medida que las estructuras de datos se hacen más complejas, existen menos convenciones para su representación en pseudocódigo, siendo admisible cualquier expresión que logre comunicar sin ambigüedad las acciones que se deben realizar, incluso la descripción en palabras. La creación de la lista anterior podría ser expresada como:Para asignar valores, podemos usar en pseudocódigo el mismo tipo de notación que en R:Ejemplo: función que devuelve una listaEn el capítulo anterior, dijimos que las funciones son subalgoritmos que podían devolver exactamente un objeto como resultado. Esto puede ser una limitación, ya que en algunos casos tal vez necesitemos devolver varios elementos de distinto tipo\n22\n.\nLa solución consiste en devolver una lista que englobe todos los objetos que nos interese que la función le entregue como resultado al algoritmo principal que la invocó. Como una lista es un único objeto, ¡la función puede devolverla sin ningún problema!Para ejemplificar, recordemos el siguiente ejercicio de la práctica 3: escribir el algoritmo y el programa en R para la creación de la función triangulos(, b, c) que partir de la longitud de los tres lados de un triángulo , b y c (valores positivos) lo clasifica con los siguientes resultados posibles: forman un triángulo (un lado mayor que la suma de los otros dos), triángulo equilátero, isósceles o escaleno. Vamos modificar la función para que tenga el siguiente comportamiento: la función debe devolver el tipo de triángulo como cadena de texto y el valor numérico del perímetro del mismo (o un 0 si es triángulo). Es decir, la función debe devolver tanto un objeto de tipo caracter y otro de tipo numérico. Para lograrlo los encerraremos en una lista:Algoritmo:Código en R:Ejemplos del uso de esta función:","code":"\nmi_lista <- list(\n    c(-4.5, 12, 2.71),\n    c(\"hola\", \"chau\"),\n    matrix(c(8, 11, 13, 16), nrow = 2),\n    TRUE\n)\nmi_lista[[1]]\n[1] -4.50 12.00  2.71\n\n[[2]]\n[1] \"hola\" \"chau\"\n\n[[3]]\n     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\n\n[[4]]\n[1] TRUE\nmi_lista[[1]][1] -4.50 12.00  2.71\nmi_lista[[1]][3][1] 2.71\nmi_lista[[2]][1] \"hola\" \"chau\"\nmi_lista[[2]][2][1] \"chau\"\nmi_lista[[3]]     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\nmi_lista[[3]][2, 1][1] 11\nmi_lista[[4]][1] TRUE\nmi_lista[[4]][1][1] TRUE\nmi_lista[[1]][3] <- 0\nmi_lista[[1]]\n[1] -4.5 12.0  0.0\n\n[[2]]\n[1] \"hola\" \"chau\"\n\n[[3]]\n     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\n\n[[4]]\n[1] TRUEVARIABLE numérica w(3), y(2, 2)\nVARIABLE caracter x(2)\nVARIABLE lógica z\nVARIABLE LISTA mi_lista\nmi_lista <- LISTA(x, w, y, z)mi_lista[[1]][1] <- -4.5\nmi_lista[[1]][2] <- 12\nmi_lista[[1]][3] <- 2.71\nmi_lista[[2]][1] <- \"hola\"\n...\nmi_lista[[4]] <- VERDADERO#-----------------------------------------------------\n# Función triangulos\n# Clasifica un triángulo según la longitud de sus lados\n# Entrada:\n#       - a, b, c, números reales positivos\n# Salida:\n#       - una lista cuyo primer elemento es un caracter que indica el tipo de\n#       triángulo y el segundo elemento es el perímetro del triángulo o el valor 0 si\n#       no los lados provistos no corresponden a un triángulo\n#-----------------------------------------------------\nFUNCIÓN triangulos(a: numérico, b: numérico, c: numérico): lista\nCOMENZAR\n    VARIABLE caracter tipo\n    VARIABLE numérica perimetro\n    SI a > b + c O b > a + c O c > a + b ENTONCES\n        tipo <- \"no es triángulo\"\n        perimetro <- 0\n    SI NO\n        perimetro <- a + b + c\n        SI a == b Y a == c ENTONCES\n            tipo <- \"equilátero\"\n        SI NO\n            SI a == b O a == c O b == c ENTONCES\n                tipo <- \"isósceles\"\n            SI NO\n                tipo <- \"escaleno\"\n            FIN SI\n        FIN SI\n    FIN SI\n    DEVOLVER LISTA(tipo, perimetro)\nFIN FUNCIÓN\n#-----------------------------------------------------\n# Función triangulos\n# Clasifica un triángulo según la longitud de sus lados\n# Entrada:\n#       - a, b, c, números reales positivos\n# Salida:\n#       - una lista cuyo primer elemento es un caracter que indica el tipo de\n#       triángulo y el segundo elemento es el perímetro del triángulo o el valor 0 si\n#       no los lados provistos no corresponden a un triángulo\n#-----------------------------------------------------\ntriangulos <- function(a, b, c) {\n    perimetro <- a + b + c\n    if (a > b + c || b > a + c || c > a + b) {\n        tipo <- \"no es triángulo\"\n        perimetro <- 0\n    } else if (a == b & a == c) {\n        tipo <- \"equilátero\"\n    } else if (a == b || a == c || b == c) {\n        tipo <- \"isósceles\"\n    } else {\n        tipo <- \"escaleno\"\n    }\n    return(list(tipo, perimetro))\n}\n# Guardamos el resultado devuelto (una lista) en el objeto resultado\nresultado <- triangulos(2, 3, 4)\n# Miramos el primer elemento de la lista (caracter que indica el tipo)\nresultado[[1]][1] \"escaleno\"\n# Miramos el primer elemento de la lista (perímetro)\nresultado[[2]][1] 9\n# Miramos todo junto\nresultado[[1]]\n[1] \"escaleno\"\n\n[[2]]\n[1] 9\n# Otro ejemplo:\nresultado2 <- triangulos(2, 3, 10)\nresultado2[[1]][1] \"no es triángulo\"\nresultado2[[2]][1] 0"},{"path":"estructuras-de-datos.html","id":"elementos-con-nombre-lectura-opcional","chapter":"5 Estructuras de Datos","heading":"5.3 Elementos con nombre (lectura opcional)","text":"La presente sección es de lectura opcional, lo cual significa que será necesaria para la resolución de la práctica ni será tenida en cuenta en las evaluaciones.Además de guardar información, los objetos de R pueden poseer ciertos atributos, que consisten en información adicional sobre el objeto. Uno de ellos es el atributo names, que permite que cada elemento dentro de un vector o una lista pueda tener su propio nombre, así como también que cada fila o columna de una matriz tenga su propio nombre, independientemente del nombre general del objeto.","code":""},{"path":"estructuras-de-datos.html","id":"vectores","chapter":"5 Estructuras de Datos","heading":"5.3.1 Vectores","text":"cada elemento de un vector se le puede, opcionalmente, asignar un nombre. Esto se realiza de alguna de estas formas:Opción 1: después de crear el vector\n\n# El vector se llama \"frutas\" y tiene 4 elementos\nfrutas <- c(3, 7, 2, 1)\nfrutas\n[1] 3 7 2 1\n\n# Cada uno de estos elementos tienen nombres\nnames(frutas)\nNULL\n\n# Le doy un nombre cada elemento\nnames(frutas) <- c(\"manzanas\", \"naranjas\", \"bananas\", \"peras\")\nfrutas\nmanzanas naranjas  bananas    peras \n       3        7        2        1 Opción 1: después de crear el vectorOpción 2: en el momento de crear el vector\n\nfrutas <- c(manzanas = 3, naranjas = 7, bananas = 2, peras = 1)\nfrutas\nmanzanas naranjas  bananas    peras \n       3        7        2        1 Opción 2: en el momento de crear el vectorLos nombres son útiles porque permiten indexar al vector, sin necesidad de usar como índice la posición del elemento:todos los elementos de un vector tienen que tener nombre:","code":"\n# El vector se llama \"frutas\" y tiene 4 elementos\nfrutas <- c(3, 7, 2, 1)\nfrutas[1] 3 7 2 1\n# Cada uno de estos elementos no tienen nombres\nnames(frutas)NULL\n# Le doy un nombre a cada elemento\nnames(frutas) <- c(\"manzanas\", \"naranjas\", \"bananas\", \"peras\")\nfrutasmanzanas naranjas  bananas    peras \n       3        7        2        1 \nfrutas <- c(manzanas = 3, naranjas = 7, bananas = 2, peras = 1)\nfrutasmanzanas naranjas  bananas    peras \n       3        7        2        1 \nfrutas[2]naranjas \n       7 \nfrutas[\"naranjas\"]naranjas \n       7 \nfrutas <- c(manzanas = 3, 7, bananas = 2, 1)\nfrutasmanzanas           bananas          \n       3        7        2        1 \nnames(frutas)[1] \"manzanas\" \"\"         \"bananas\"  \"\"        "},{"path":"estructuras-de-datos.html","id":"matrices","chapter":"5 Estructuras de Datos","heading":"5.3.2 Matrices","text":"En el caso de las matrices, se le puede asignar nombres sus filas y columnas:Opción 1: después de crear la matriz\n\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n              nrow = 3, byrow = TRUE)\nrownames(x) <- c(\"\", \"B\", \"C\")\ncolnames(x) <- c(\"col1\", \"grupo2\", \"grupo3\", \"grupo4\")\nx\n  col1 grupo2 grupo3 grupo4\n   8     13     18     23\nB   11     16     21     26\nC   14     19     24     29Opción 1: después de crear la matrizOpción 2: al crear la matrizOpción 2: al crear la matrizAl igual que con los vectores, podemos usar los nombres de filas y columnas para indexar:En el caso de los arreglos multidimensionales, ya se indicó en el ejemplo del local comercial el uso de nombres para las distintas dimensiones.","code":"\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n              nrow = 3, byrow = TRUE)\nrownames(x) <- c(\"A\", \"B\", \"C\")\ncolnames(x) <- c(\"col1\", \"grupo2\", \"grupo3\", \"grupo4\")\nx  col1 grupo2 grupo3 grupo4\nA    8     13     18     23\nB   11     16     21     26\nC   14     19     24     29\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n            nrow = 3, byrow = TRUE,\n            dimnames = list(Categorias = c(\"A\", \"B\", \"C\"), \n                            Grupos = c(\"grupo1\", \"grupo2\", \"grupo3\", \"grupo4\")))\nx          Grupos\nCategorias grupo1 grupo2 grupo3 grupo4\n         A      8     13     18     23\n         B     11     16     21     26\n         C     14     19     24     29En este último ejemplo, se han elegido arbitrariamente los nombres `Categorias` y `Grupos` para llamar al conjunto completo de las filas y de las columnas, respectivamente. Esos nombres pueden ser cambiados por otros.\nx[\"B\", \"grupo2\"][1] 16"},{"path":"estructuras-de-datos.html","id":"listas-1","chapter":"5 Estructuras de Datos","heading":"5.3.3 Listas","text":"Podemos asignarle un nombre uno, algunos o todos los integrantes en una lista:Esto amplía las opciones para hacer referencia cada objeto y elemento allí contenido. Las siguientes sentencias son todas equivalentes y sirven para acceder al tercer elemento de la lista, cuyo nombre es y:","code":"\nmi_lista <- list(\n    w = c(-4.5, 12, 2.71),\n    x = c(\"hola\", \"chau\"),\n    y = matrix(c(8, 11, 13, 16), nrow = 2),\n    z = TRUE\n)\nmi_lista$w\n[1] -4.50 12.00  2.71\n\n$x\n[1] \"hola\" \"chau\"\n\n$y\n     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\n\n$z\n[1] TRUE\nmi_lista[[3]]     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\nmi_lista[[\"y\"]]     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\nmi_lista$y     [,1] [,2]\n[1,]    8   13\n[2,]   11   16"},{"path":"estructuras-de-datos.html","id":"otras-consideraciones-lectura-opcional","chapter":"5 Estructuras de Datos","heading":"5.4 Otras consideraciones (lectura opcional)","text":"Dependiendo de cómo se almacenan los datos que componen una estructura en el hardware de la computadora, las mismas se pueden clasificar en contiguas o enlazadas. En las estructuras contiguas, los datos se sitúan en áreas adyacentes de memoria y cada uno de ellos se puede localizar partiendo de la posición en memoria del primer elemento de la estructura. En las estructuras enlazadas, los datos se sitúan necesariamente de forma continua en la memoria sino que existen punteros (otro tipo de dato que apunta hacia determinada posición de memoria) que permite identificar cuál es el orden de los elementos dentro de la estructura.Por otro lado, las estructuras también se pueden clasificar en dinámicas o estáticas, según si su tamaño puede cambiar o durante la ejecución de un programa, respectivamente. Cuando se emplea una estructura estática, se declara con anterioridad el tamaño que ocupará en memoria y su dimensión podrá variar, aún cuando se ocupen todas las posiciones reservadas. En contraposición, una estructura dinámica puede cambiar en tamaño.Antes se mencionó que las listas de R pueden contener objetos de distintos tipos. Para ser más rigurosos, una lista es un tipo especial de vector que agrupa punteros hacia distintos objetos. Técnicamente, todos los elementos de una lista son del mismo tipo (punteros), pero hacen referencia distintos objetos, dándonos la impresión de que en una lista de R, sencillamente, podemos meter cualquier tipo de objeto.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"uso-de-archivos-de-datos","chapter":"6 Uso de archivos de datos","heading":"6 Uso de archivos de datos","text":"Como hemos visto, los programas usan variables para guardar información: datos de entrada, resultados calculados, valores intermedios, etc. Sin embargo, la información guardada en las variables es efímera. Cuando los programas paran de correr, el valor almacenado en las variables se pierde. En muchas ocasiones, es necesario guardar información de una forma más permanente.En estos casos, el enfoque usual es recolectar la información en un todo lógicamente cohesivo y guardarlo en un medio permanente que generalmente se graba en el disco rígido de la máquina, es decir, en un archivo. Un archivo o fichero es un conjunto de información sobre un mismo tema tratado como una unidad de almacenamiento y organizado de forma estructurada para la búsqueda de un dato individual. Los archivos pueden contener instrucciones de programas o información creada o usada por un programa. Todos los objetos de datos permanentes que guardamos en nuestra computadora (documentos, juegos, programas ejecutables, código, etc.) son guardados en la forma de archivos.Un archivo se identifica con un nombre, seguido por un punto y una extensión, la cual es un sufijo empleado para indicar características de su contenido, el uso pretendido o el software con el cual puede ser empleado. Por ejemplo, un archivo que se llama planilla.xlsx es una hoja de cálculo de Excel o un archivo llamado codigo.R es un script de código de R.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"registros-campos-claves-y-bases-de-datos","chapter":"6 Uso de archivos de datos","heading":"6.1 Registros, campos, claves y bases de datos","text":"En esta asignatura nos limitaremos trabajar con archivos que guardan información de forma tabular, en los que la unidad elemental que los compone es un registro, es decir, una colección de información relativa una misma entidad. En general, cada registro de un mismo archivo tiene la misma estructura que los demás. Los datos individuales sobre dicha entidad se organizan en campos. Un campo es la mínima unidad de información de un registro. Por ejemplo:Un campo está caracterizado por el tipo de datos que almacena (caracter, numérico, lógico) y en algunos contextos es necesario precisar su longitud (por ejemplo, cantidad de caracteres admitidos como máximo en los datos del campo). Algunos lenguajes, como R, admiten trabajar con campos de longitud variable (sin necesidad de que sea especificada con anticipación).En el contexto del análisis de datos, cada columna o campo en este tipo de archivos puede representar una variable observada sobre los individuos o unidades de interés, los cuales se encuentran dispuestos en las sucesivas filas.Generalmente suele ser necesario identificar de manera única cada registro de un archivo. Para esto suele considerarse uno de los campos del archivo como el campo clave o, más sencillamente, clave. La clave o key es el campo que identifica inequívocamente cada registro, permitiendo diferenciarlo del resto, como podría ser el número de pasaporte en el ejemplo anterior. En ocasiones donde hay un campo clave es posible identificar un registro través de la combinación de los valores presentes en más de uno de los campos.Por último, cabe mencionar que llamamos base de datos un conjunto de archivos que contienen datos relacionados entre sí, vinculados mediante sistemas complejos que enlazan las claves de uno y otro archivo y que pueden ser consultados mediante el uso de software especializado. Por eso, cuando trabajamos con los datos almacenados en un único archivo, es conveniente referirse los mismos como “conjunto de datos” y como “base de datos”.","code":"ARCHIVO: Pasajeros\nCampo 1 - Pasaporte: número de pasaporte del pasajero, tipo caracter\nCampo 2 - Nombre: nombre del pasajero, tipo caracter\nCampo 3 - NroVuelo: número del vuelo, tipo caracter\nCampo 4 - FechaVuelo: fecha del vuelo, tipo caracter\nCampo 5 - NroAsiento: número del asiento, tipo caracter\nCampo 6 - Origen: ciudad de origen, tipo caracter\nCampo 7 - Destino: ciudad de destino, tipo caracter\nCampo 8 - Precio: precio del pasaje, tipo numérico"},{"path":"uso-de-archivos-de-datos.html","id":"organización-de-archivos","chapter":"6 Uso de archivos de datos","heading":"6.2 Organización de archivos","text":"Existen distintos tipos de organización de los archivos según la forma en la que se pueda acceder cada uno de sus registros:Organización secuencial\nLos registros se encuentran en cierto orden que debe ser respetado para la lectura de los mismos. Para leer el registro situado en la posición n, el programa previamente tiene que pasar por los n-1 registros que ocupan las posiciones anteriores.\nLos archivos de tipo secuencial en general ocupan menos memoria y suelen ser utilizados para guardar contenidos que sufren pocas modificaciones. Los registros se graban consecutivamente en el soporte que los aloja (por ejemplo, en el disco). El orden físico con el que fueron escritos los registros coincide con el orden de lectura de los mismos.\nLos registros pueden leerse uno por uno hasta llegar al final del archivo, donde se indica de alguna manera el fin del mismo, muchas veces través de un caracter especial como un asterisco o de una línea en blanco. Esta marca generalmente se conoce como EOF (end file). La mayoría de los lenguajes de programación disponen de una función lógica que devuelve un valor VERDADERO cuando se alcanza el final del archivo.\nOrganización secuencialLos registros se encuentran en cierto orden que debe ser respetado para la lectura de los mismos. Para leer el registro situado en la posición n, el programa previamente tiene que pasar por los n-1 registros que ocupan las posiciones anteriores.Los archivos de tipo secuencial en general ocupan menos memoria y suelen ser utilizados para guardar contenidos que sufren pocas modificaciones. Los registros se graban consecutivamente en el soporte que los aloja (por ejemplo, en el disco). El orden físico con el que fueron escritos los registros coincide con el orden de lectura de los mismos.Los registros pueden leerse uno por uno hasta llegar al final del archivo, donde se indica de alguna manera el fin del mismo, muchas veces través de un caracter especial como un asterisco o de una línea en blanco. Esta marca generalmente se conoce como EOF (end file). La mayoría de los lenguajes de programación disponen de una función lógica que devuelve un valor VERDADERO cuando se alcanza el final del archivo.Organización directa\nSon archivos que están organizados de manera que se pueda acceder de forma directa cada registro mediante su posición en el soporte físico que lo contiene, sin tener que pasar secuencialmente por los registros anteriores. Poseen la ventaja de brindar un acceso rápido la información y la posibilidad de leer y escribir registros en cualquier posición y orden.\nSe puede mencionar como desventaja de este tipo de organización el hecho de que requiere la programación de la forma de identificar la posición de un registro partir de alguno de los valores de sus campos, generalmente, la clave. Esto se hace mediante un algoritmo de transformación de la clave (llamado hash function) que partir de la misma devuelve la dirección del registro en el soporte físico. El archivo debe diseñarse teniendo en cuenta de antemano una cantidad total de registros fija.Organización directaSon archivos que están organizados de manera que se pueda acceder de forma directa cada registro mediante su posición en el soporte físico que lo contiene, sin tener que pasar secuencialmente por los registros anteriores. Poseen la ventaja de brindar un acceso rápido la información y la posibilidad de leer y escribir registros en cualquier posición y orden.Se puede mencionar como desventaja de este tipo de organización el hecho de que requiere la programación de la forma de identificar la posición de un registro partir de alguno de los valores de sus campos, generalmente, la clave. Esto se hace mediante un algoritmo de transformación de la clave (llamado hash function) que partir de la misma devuelve la dirección del registro en el soporte físico. El archivo debe diseñarse teniendo en cuenta de antemano una cantidad total de registros fija.Organización indexada\nLos archivos están estructurados de manera que los registros se pueden localizar sin pasar por los anteriores, consultando en una tabla adicional de índices la zona del archivo donde se encuentra el registro buscado. Esto permite localizar un registro por medio de su clave o del valor de algún campo en particular.\nPara imaginarnos esto, podemos pensar que un diccionario es un ejemplo de un archivo indexado, ya que podemos encontrar la región donde se encuentra un registro (palabra) mediante el índice de letras. Si queremos buscar el término “programación” en un diccionario, recorremos todas las palabras del mismo desde la “” hasta encontrar el término de interés, sino que buscamos en el índice en qué página del diccionario se encuentra la “P” y comenzamos una búsqueda secuencial desde la misma.\nUn archivo indexado, entonces, cuenta en realidad con dos archivos, uno de índices (que se recorre de forma secuencial) y otro con los registros propiamente dichos. Posee la ventaja de brindar un rápido acceso los registros, pero con el costo de utilizar espacio adicional para la tabla de índices.Organización indexadaLos archivos están estructurados de manera que los registros se pueden localizar sin pasar por los anteriores, consultando en una tabla adicional de índices la zona del archivo donde se encuentra el registro buscado. Esto permite localizar un registro por medio de su clave o del valor de algún campo en particular.Para imaginarnos esto, podemos pensar que un diccionario es un ejemplo de un archivo indexado, ya que podemos encontrar la región donde se encuentra un registro (palabra) mediante el índice de letras. Si queremos buscar el término “programación” en un diccionario, recorremos todas las palabras del mismo desde la “” hasta encontrar el término de interés, sino que buscamos en el índice en qué página del diccionario se encuentra la “P” y comenzamos una búsqueda secuencial desde la misma.Un archivo indexado, entonces, cuenta en realidad con dos archivos, uno de índices (que se recorre de forma secuencial) y otro con los registros propiamente dichos. Posee la ventaja de brindar un rápido acceso los registros, pero con el costo de utilizar espacio adicional para la tabla de índices.La organización más sencilla y más comúnmente empleada es la secuencial, aunque en algunos casos puede ser la más eficiente. Si bien todos los lenguajes de programación permiten el trabajo con archivos indexados o de organización directa, todos pueden manejar archivos secuenciales.En este curso trabajaremos solamente con archivos cuyos registros estén organizados de forma secuencial y que puedan ser registrados como documentos de Excel (extensión .xlsx) o archivos de texto (extensión .txt o .csv).Un archivo de texto (también conocido como texto llano o texto simple) es un archivo informático que contiene únicamente texto formado por una secuencia ordenada de caracteres. El texto almacenado en este tipo de archivo carece de cualquier tipo de formato tipográfico (negrita, cursiva, colores, subrayado, fuente, etc.), lo cual permite que una gran variedad de programas pueda leer y editar el contenido. Cada renglón en el archivo de texto es un registro y los distintos campos suelen estar señalizados con tabulaciones (archivos .txt) o separados por comas o punto y comas (archivos .csv).Los archivos de texto están compuestos por caracteres ordinarios, como las letras, números y signos de puntuación, y por caracteres especiales que indican, por ejemplo, saltos de línea (\\n) y tabulaciones (\\t). Pero como en realidad las computadoras solamente entienden números, cada caracter es codificado internamente con una representación numérica binaria, que nosotros nunca llegamos ver. Distintas maneras de hacer esta representación dan lugar diferentes formatos de codificación de caracteres (como ASCII, ISO-8859-1 o UTF-8). Si en alguna oportunidad abrimos un archivo y nos percatamos que caracteres como la “ñ” o las tildes han sido reemplazadas por otros produciendo un aspecto “raro”, significa que el archivo ha sido abierto empleando una codificación diferente de la que se utilizó al crear el archivo. La solución para este problema es muy sencilla, sólo hay que cambiar la opción de codificación la hora de guardar o de abrir el archivo.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"operaciones-sobre-archivos","chapter":"6 Uso de archivos de datos","heading":"6.3 Operaciones sobre archivos","text":"El uso de archivos en programación es muy importante ya que nos permite leer datos para hacer algún tipo de procesamiento y también guardar resultados obtenidos. El sistema operativo de la computadora es el que se encarga de manipular los archivos para que podamos leerlos o escribir en ellos, pero debemos aprender las sentencias que el lenguaje de programación elegido utiliza para encargarle esas tareas al sistema operativo. Además, necesitamos elegir una forma clara para comunicar estas acciones mediante pseudocódigo en los algoritmos.Los procedimientos básicos que los programas pueden llevar cabo sobre los distintos tipos de archivos son:Creación de un archivo\nPara que un archivo pueda ser utilizado, antes tiene que existir, obviamente. Si bien la creación de un nuevo archivo es una tarea propia del sistema operativo, la representaremos en el pseudocódigo de la siguiente forma, donde nombre puede ser reemplazado por cualquier nombre que deseemos darle al archivo:\n  CREAR ARCHIVO (nombre)\nUna vez que el archivo fue creado y existe, se pueden hacer con él las restantes operaciones. En la mayoría de las aplicaciones que veremos, tendremos archivos que han sido creados con anterioridad y ya tienen registros, por lo cual usaremos pocas veces esta acción.Creación de un archivoPara que un archivo pueda ser utilizado, antes tiene que existir, obviamente. Si bien la creación de un nuevo archivo es una tarea propia del sistema operativo, la representaremos en el pseudocódigo de la siguiente forma, donde nombre puede ser reemplazado por cualquier nombre que deseemos darle al archivo:Una vez que el archivo fue creado y existe, se pueden hacer con él las restantes operaciones. En la mayoría de las aplicaciones que veremos, tendremos archivos que han sido creados con anterioridad y ya tienen registros, por lo cual usaremos pocas veces esta acción.Apertura de un archivo\nPara que un programa pueda operar sobre un archivo, la primera acción que debe realizar es la apertura del mismo, que incluye la identificación del archivo utilizar y el modo (lectura o escritura). Esto hace que el sistema operativo establezca una conexión con el archivo que mientras se mantenga activa permitirá la lectura y escritura de registros en el mismo. En pseudocódigo lo indicaremos así:\nABRIR ARCHIVO (nombre) secuencial, lectura\nABRIR ARCHIVO (nombre) secuencial, escrituraApertura de un archivoPara que un programa pueda operar sobre un archivo, la primera acción que debe realizar es la apertura del mismo, que incluye la identificación del archivo utilizar y el modo (lectura o escritura). Esto hace que el sistema operativo establezca una conexión con el archivo que mientras se mantenga activa permitirá la lectura y escritura de registros en el mismo. En pseudocódigo lo indicaremos así:Lectura de registros en un archivo\nLa lectura consiste en transferir información del archivo la memoria principal usada por el programa. En los archivos de organización secuencial, los registros se leen uno por uno, es decir, línea por línea, hasta llegar al final del archivo. Veremos dos formas de indicar en nuestro pseudocódigo la lectura de todos los registros de un archivo.\nOpción : registro por registro\nPor ejemplo, si deseamos realizar alguna o algunas acciones con los valores que forman parte de cada registro mientras el archivo es recorrido secuencialmente línea por línea, podemos emplear una estructura iterativa:\nMIENTRAS FIN DE ARCHIVO (nombre) == FALSO ENTONCES\n  LEER SIGUIENTE REGISTRO (nombre) campo1, campo2, ...  \n  ... realizar operaciones con las variables campo1, campo2, ...\nFIN MIENTRAS\nEn cada iteración se lee un registro con la expresión LEER SIGUIENTE REGISTRO (nombre). campo1 y campo2 son variables que se definen para representar los valores leídos de cada uno de los campos (columnas) en el registro que está siendo analizado. Luego de ser leídos, con esos valores se pueden realizar distintas acciones, antes de proseguir con la lectura del siguiente registro.\nAl ir recorriendo cada línea del archivo, la expresión FIN DE ARCHIVO (nombre) devuelve el valor FALSO, pero después de haber leído el último registro, devolverá VERDADERO. Esto indica que se ha llegado al final, quedan registros por leer y se debe detener la estructura iterativa. FIN DE ARCHIVO (nombre) también suele indicarse con EOF (nombre).\nOpción B: lectura completa\nOtra opción es leer automáticamente todos los registros y almacenarlos en alguna estructura de datos especializada que definamos en el ambiente de trabajo. Para esto, vamos introducir la noción de dataset: una estructura de datos bidimensional (como una matriz) en la cual cada fila representa un registro y cada columna representa uno de los campos del archivo, pudiendo entonces almacenar valores de distinto tipo en cada una de ellas (numérico, lógico, caracter). Para indicar que todo el contenido del archivo (llamado nombre) debe ser leído y almacenado en un dataset llamado, por ejemplo, datos, emplearemos la siguiente expresión:\nLEER REGISTROS (nombre) DATASET (datos)\nUna vez que los registros fueron leídos y almacenados en el dataset, podemos hacer referencia cada uno de ellos utilizando índices como lo hacemos con las matrices. Por ejemplo, datos[3, 4] hace referencia al valor correspondiente al cuarto campo en el tercer registro. Así, podemos recorrer todos los registros del dataset con una estructura iterativa para realizar distintas operaciones con ellos:\nLEER REGISTROS (nombre) DATASET (datos)\n\nPARA DESDE 1 HASTA NFILA(datos) HACER\n    ...realizar operaciones con  datos[, 1], datos[, 2], etc. ...\nFIN PARALectura de registros en un archivoLa lectura consiste en transferir información del archivo la memoria principal usada por el programa. En los archivos de organización secuencial, los registros se leen uno por uno, es decir, línea por línea, hasta llegar al final del archivo. Veremos dos formas de indicar en nuestro pseudocódigo la lectura de todos los registros de un archivo.Opción : registro por registroPor ejemplo, si deseamos realizar alguna o algunas acciones con los valores que forman parte de cada registro mientras el archivo es recorrido secuencialmente línea por línea, podemos emplear una estructura iterativa:En cada iteración se lee un registro con la expresión LEER SIGUIENTE REGISTRO (nombre). campo1 y campo2 son variables que se definen para representar los valores leídos de cada uno de los campos (columnas) en el registro que está siendo analizado. Luego de ser leídos, con esos valores se pueden realizar distintas acciones, antes de proseguir con la lectura del siguiente registro.Al ir recorriendo cada línea del archivo, la expresión FIN DE ARCHIVO (nombre) devuelve el valor FALSO, pero después de haber leído el último registro, devolverá VERDADERO. Esto indica que se ha llegado al final, quedan registros por leer y se debe detener la estructura iterativa. FIN DE ARCHIVO (nombre) también suele indicarse con EOF (nombre).Opción B: lectura completaOtra opción es leer automáticamente todos los registros y almacenarlos en alguna estructura de datos especializada que definamos en el ambiente de trabajo. Para esto, vamos introducir la noción de dataset: una estructura de datos bidimensional (como una matriz) en la cual cada fila representa un registro y cada columna representa uno de los campos del archivo, pudiendo entonces almacenar valores de distinto tipo en cada una de ellas (numérico, lógico, caracter). Para indicar que todo el contenido del archivo (llamado nombre) debe ser leído y almacenado en un dataset llamado, por ejemplo, datos, emplearemos la siguiente expresión:Una vez que los registros fueron leídos y almacenados en el dataset, podemos hacer referencia cada uno de ellos utilizando índices como lo hacemos con las matrices. Por ejemplo, datos[3, 4] hace referencia al valor correspondiente al cuarto campo en el tercer registro. Así, podemos recorrer todos los registros del dataset con una estructura iterativa para realizar distintas operaciones con ellos:Escritura en un archivo\nLa escritura es la transferencia de información guardada en las variables del programa al archivo. Si el archivo fue abierto en modo de escritura, con la siguiente expresión representamos el agregado de un nuevo registro al final del mismo, donde valor1, valor2, etc. son los valores que se guardarán en los respectivos campos del archivo, respetando el orden.\n  ESCRIBIR REGISTRO (nombre) valor1, valor2, ...Escritura en un archivoLa escritura es la transferencia de información guardada en las variables del programa al archivo. Si el archivo fue abierto en modo de escritura, con la siguiente expresión representamos el agregado de un nuevo registro al final del mismo, donde valor1, valor2, etc. son los valores que se guardarán en los respectivos campos del archivo, respetando el orden.Cierre de un archivo\nCuando un programa vaya acceder más un archivo, es necesario indicarlo través del cierre del mismo, para que se interrumpa la conexión establecida por el sistema operativo. Esto hace que se liberen memoria y recursos del sistema, se prevenga la corrupción de los datos y se exprese explícitamente que ya se hará más uso del mismo. En pseudocódigo lo indicaremos así:\nCERRAR ARCHIVO (nombre)Cierre de un archivoCuando un programa vaya acceder más un archivo, es necesario indicarlo través del cierre del mismo, para que se interrumpa la conexión establecida por el sistema operativo. Esto hace que se liberen memoria y recursos del sistema, se prevenga la corrupción de los datos y se exprese explícitamente que ya se hará más uso del mismo. En pseudocódigo lo indicaremos así:Otras operaciones\nOtras operaciones que se pueden realizar sobre los archivos, en base combinaciones de las anteriores, incluyen las acciones de:\nActualización: añadir (dar de alta), modificar o eliminar (dar de baja) algún registro.\nClasificación: reubicar los registros de tal forma que queden ordenados por algún campo determinado.\nFusión o mezcla: combinar dos o más archivos para formar uno nuevo.\nPartición: subdividir los registros por el valor que toman en algún campo para generar más de un archivo.\nOtras operacionesOtras operaciones que se pueden realizar sobre los archivos, en base combinaciones de las anteriores, incluyen las acciones de:Actualización: añadir (dar de alta), modificar o eliminar (dar de baja) algún registro.Clasificación: reubicar los registros de tal forma que queden ordenados por algún campo determinado.Fusión o mezcla: combinar dos o más archivos para formar uno nuevo.Partición: subdividir los registros por el valor que toman en algún campo para generar más de un archivo.","code":"  CREAR ARCHIVO (nombre)ABRIR ARCHIVO (nombre) secuencial, lectura\nABRIR ARCHIVO (nombre) secuencial, escrituraMIENTRAS FIN DE ARCHIVO (nombre) == FALSO ENTONCES\n  LEER SIGUIENTE REGISTRO (nombre) campo1, campo2, ...  \n  ... realizar operaciones con las variables campo1, campo2, ...\nFIN MIENTRASLEER REGISTROS (nombre) A DATASET (datos)LEER REGISTROS (nombre) A DATASET (datos)\n\nPARA i DESDE 1 HASTA NFILA(datos) HACER\n    ...realizar operaciones con  datos[i, 1], datos[i, 2], etc. ...\nFIN PARA  ESCRIBIR REGISTRO (nombre) valor1, valor2, ...CERRAR ARCHIVO (nombre)"},{"path":"uso-de-archivos-de-datos.html","id":"ejemplo","chapter":"6 Uso de archivos de datos","heading":"6.4 Ejemplo","text":"El archivo reservas.txt cuenta con los registros de reservas en un famoso hotel de la ciudad de Rosario durante el año 2019. Cada registro del archivo dispone de información acerca del mes de la reserva, tipo de habitación reservada y cantidad de noches de la estadía:Archivo: reservas.txtArchivo: reservas.txtCampos:\ntipohab: tipo de habitación, numérico (1 = habitación simple, 2 = habitación doble, 3 = habitación triple)23.\nmes: mes en el que se realizó la reserva, numérico (1 = enero, …, 12 = diciembre).\nnoches: cantidad de noches reservadas, numérico.\nCampos:tipohab: tipo de habitación, numérico (1 = habitación simple, 2 = habitación doble, 3 = habitación triple)23.mes: mes en el que se realizó la reserva, numérico (1 = enero, …, 12 = diciembre).noches: cantidad de noches reservadas, numérico.Como ilustración, se muestran los primeros registros del archivo:\nFigura 6.1: Primeros registros del archivo reservas.txt\nLa primera línea de este archivo de texto contiene los nombres de los campos. La segunda línea contiene los datos correspondientes al registro, que se trata de una reserva para una habitación triple (tipohab es igual 3), en el mes de enero (mes es igual 1) y por 1 noche (noches es igual 1).Se necesita crear un programa que permita obtener los siguientes resultados:Generar la siguiente tabla de contingencia que presenta el número de reservas durante el año 2019 según mes y tipo de habitación:\n\nHab. simple\nHab. doble\nHab. triple\nTotal\nEnero\n\n\n\n\n…\n\n\n\n\nDiciembre\n\n\n\n\nTotal\n\n\n\n\nGenerar la siguiente tabla de contingencia que presenta el número de reservas durante el año 2019 según mes y tipo de habitación:Determinar el total de pernoctaciones en el hotel durante el 2019, es decir, la cantidad total de noches que los huéspedes se alojaron en el establecimiento (información que cada hotel debe comunicar la secretaría de turismo de la municipalidad).Determinar el total de pernoctaciones en el hotel durante el 2019, es decir, la cantidad total de noches que los huéspedes se alojaron en el establecimiento (información que cada hotel debe comunicar la secretaría de turismo de la municipalidad).Determinar cuál fue el mes de mayor cantidad de reservas.Determinar cuál fue el mes de mayor cantidad de reservas.Determinar para cada tipo de habitación el mes con menor número de reservas.Determinar para cada tipo de habitación el mes con menor número de reservas.En este link o en el aula virtual podrás encontrar el archivo de datos. Al final de esta sección se presenta el algoritmo y el programa en R que resuelven este problema, pero antes iremos explicando cada parte por separado.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"lectura-de-los-registros-del-archivo","chapter":"6 Uso de archivos de datos","heading":"6.4.1 Lectura de los registros del archivo","text":"En el pseudocódigo, la lectura de los registros comienza con la apertura del archivo. Luego, se recurre la estrategia de leer todos los registros automáticamente, almacenándolos en una estructura de datos de tipo dataset, la que se le da el nombre datos. Una vez que la lectura es realizada, se cierra el archivo y exploramos cuántos registros (filas) y campos (columnas o variables) tiene el dataset:En R, podemos leer todos los registros de un archivo de texto con campos separados por tabulaciones con la función read.delim(), informando la ruta completa hasta la ubicación del archivo en la computadora. Por ejemplo:RStudio provee asistencia para la importación de datos mediante el botón Import Dataset en el panel Environment. Sin embargo, para este curso es importante que dichas opciones sean utilizadas y los datos sean leídos mediante el código propuesto anteriormente. Esto se debe que algunas de las opciones provistas por RStudio producen estructuras para almacenar datos con ciertas propiedades que imposibilitan la indexación con corchetes tal como la hemos implementado hasta el momento.Una vez completo este paso, en el ambiente podremos ver listado un nuevo objeto llamado datos, junto con una breve descripción del mismo que nos dice que tiene 3853 observaciones (registros) de 3 variables (campos). Si hacemos clic sobre el nombre del objeto se abrirá una pestaña para que podamos explorar su contenido.Si bien simple vista parece una matriz numérica como las que ya habíamos utilizado, lo es. Este objeto es un dataset, lo cual significa que sus columnas pueden tener distintos tipos de datos (numérico, caracter, lógico). Más específicamente, si le preguntamos R de qué tipo de objeto se trata, nos indicará que es un data.frame, que es el término que utiliza R para referirse los conjuntos de datos. Así como tenemos objetos que pueden ser numéricos, lógicos o caracter, vectores, matrices o listas, hay de estos otros objetos que son de tipo data.frame:Existen algunas funciones de R que nos permiten explorar el contenido de un dataset:Detalles de lectura opcional:Internamente, un data.frame es sencillamente una lista, compuesta por vectores de distinto tipo que tienen todos el mismo largo y que se organizan como columnas. Además, esta lista es almacenada junto con cierta información adicional (atributos) que nos permiten manipularla como una estructura tabular.Internamente, un data.frame es sencillamente una lista, compuesta por vectores de distinto tipo que tienen todos el mismo largo y que se organizan como columnas. Además, esta lista es almacenada junto con cierta información adicional (atributos) que nos permiten manipularla como una estructura tabular.Importar un archivo es la única forma de crear un data.frame, también se puede crear uno de forma “manual”, por ejemplo:\n\nmis_datos <- data.frame(\n    nombre = c(\"Ale\", \"Marti\", \"Edu\"),\n    edad = c(21, 20, 22)\n)\nmis_datos\n  nombre edad\n1    Ale   21\n2  Marti   20\n3    Edu   22Importar un archivo es la única forma de crear un data.frame, también se puede crear uno de forma “manual”, por ejemplo:","code":"ABRIR ARCHIVO (reservas) secuencial, lectura\nLEER REGISTROS (reservas) A DATASET (datos)\nCERRAR ARCHIVO (reservas)\nESCRIBIR \"El archivo cuenta con\" NFILA(datos) \"registros de\" NCOL(datos) \"campos.\" \ndatos <- read.delim(\"/home/marcos/GitProjects/introprog/archivos/reservas.txt\")\nclass(datos)[1] \"data.frame\"\n# Muestra los nombres de las columnas (campos del archivo)\nnames(datos)[1] \"tipohab\" \"mes\"     \"noches\" \n# Muestra la \"estructura\" interna del dataset\nstr(datos)'data.frame':   3853 obs. of  3 variables:\n $ tipohab: int  3 2 1 2 3 2 1 1 2 3 ...\n $ mes    : int  1 1 1 1 1 1 1 1 1 1 ...\n $ noches : int  1 12 4 7 6 1 5 4 7 1 ...\n# Muestra la cantidad de filas y columnas\ndim(datos)[1] 3853    3\n# Muestra la cantidad de filas\nnrow(datos)[1] 3853\n# Muestra la cantidad de columnas\nncol(datos)[1] 3\n# Muestra los primeros registros\nhead(datos)  tipohab mes noches\n1       3   1      1\n2       2   1     12\n3       1   1      4\n4       2   1      7\n5       3   1      6\n6       2   1      1\n# Muestra los últimos registros\ntail(datos)     tipohab mes noches\n3848       3  12     10\n3849       1  12      8\n3850       3  12      1\n3851       2  12      6\n3852       1  12      8\n3853       2  12      8\n# Muestra un resumen de cada campo\n# No siempre tiene sentido (por ejemplo, calcula la media de \"tipohab\")\nsummary(datos)    tipohab           mes             noches      \n Min.   :1.000   Min.   : 1.000   Min.   : 1.000  \n 1st Qu.:1.000   1st Qu.: 3.000   1st Qu.: 2.000  \n Median :1.000   Median : 7.000   Median : 5.000  \n Mean   :1.671   Mean   : 6.412   Mean   : 5.015  \n 3rd Qu.:2.000   3rd Qu.: 9.000   3rd Qu.: 7.000  \n Max.   :3.000   Max.   :12.000   Max.   :12.000  \nmis_datos <- data.frame(\n    nombre = c(\"Ale\", \"Marti\", \"Edu\"),\n    edad = c(21, 20, 22)\n)\nmis_datos  nombre edad\n1    Ale   21\n2  Marti   20\n3    Edu   22"},{"path":"uso-de-archivos-de-datos.html","id":"recorrer-todos-los-registros-para-obtener-la-info-necesaria","chapter":"6 Uso de archivos de datos","heading":"6.4.2 Recorrer todos los registros para obtener la info necesaria","text":"Una vez leído el archivo, vamos continuar con los puntos pedidos. El primero de ellos pedía generar un cuadro con el conteo de la cantidad de reservas en cada mes y según el tipo de habitación, incluyendo los totales marginales y el total general. Por otro lado, para el punto b necesitamos sumar el número de noches en cada reserva. Será necesario, entonces, recorrer todos los registros guardados en el dataset datos e ir realizando los conteos correspondientes.El paso más importante es diseñar todas las estructuras de datos que necesitaremos para almacenar esta información. Una buena idea es agarrar papel y lápiz y hacer un bosquejo, por ejemplo, como el que sigue:\nFigura 6.2: Bosquejo de las estructuras de datos necesarias\nEn la figura anterior se señalan los vectores y matrices necesarios para cumplir con el objetivo. Por ahora, nos concentraremos en obtener los conteos y acumular la cantidad de noches. Más adelante, veremos cómo unir todos los resultados y poner nombres de filas y columnas.Vamos declarar la existencia de una matriz numérica llamada tabla con 12 filas (para los meses) y 3 columnas (tipos de habitación) para almacenar los conteos; dos vectores total_fila y total_col para los totales marginales; y una variable pernoc para ir sumando el número de noches:Analicemos ahora el primer registro. En la primera fila del dataset tenemos que el tipo de habitación es triple (tipohab es 3), que la reserva se hizo en enero (mes es 1) y que sólo consistió de una noche (noches es 1), como lo podemos verificar continuación:Entonces, para completar la tabla de conteos, debemos sumar un 1 para contar este caso en la celda que corresponde la fila 1 (enero) y columna 3 (habitación triple). Además, debemos ir sumando la cantidad de noches:Si al inicio del algoritmo declaramos las variables numéricas tipohab, mes y noches, lo anterior puede ser escrito de manera un poco más general así:Si hacemos lo anterior con cada uno de los registros, podremos obtener los conteos y la suma deseada. Eso lo podemos automatizar con una estructura iterativa. Además, debemos olvidarnos de que también tenemos que calcular los totales marginales:Ya casi tenemos la tabla pedida, sólo queda acomodar todas estas cositas para formar un lindo cuadro.","code":"# Pseudocódigo\nVARIABLE numérica pernoc, tabla(12, 3), total_fila(12), total_col(3)\npernoc <- 0\n# En R\ntabla <- matrix(0, 12, 3)\ntotal_fila <- numeric(12)\ntotal_col <- numeric(3)\npernoc <- 0\n# La columna 1 corresponde al tipo de habitación\ndatos[1, 1][1] 3\n# La columna 2 corresponde al mes de la reserva\ndatos[1, 2][1] 1\n# La columna 3 corresponde a la cantidad de noches\ndatos[1, 3][1] 1# +1 en [1, 3] porque es una reserva en enero y habitación triple\ntabla[1, 3] <- tabla[1, 3] + 1      \n\n# +1 en pernoc porque la reserva consistió de una sola noche\npernoc <- pernoc + 1# Pseudocódigo y R:\ntipohab <- datos[1, 1]      # El tipo de habitación es triple (3)\nmes <- datos[1, 2]          # El mes es enero (1)\nnoches <- datos[1, 3]       # La reserva fue por una noche\n\ntabla[mes, tipohab] <- tabla[mes, tipohab] + 1\npernoc <- pernoc + noches# Pseudocódigo\nPARA i DESDE 1 HASTA NFILA(datos) HACER\n  \n  tipohab <- datos[i, 1]\n  mes <- datos[i, 2]\n  noches <- datos[1, 3]\n  \n  tabla[mes, tipohab] <- tabla[mes, tipohab] + 1\n  pernoc <- pernoc + noches\n  total_fila[mes] <- total_fila[mes] + 1\n  total_col[tipohab] <- total_col[tipohab] + 1\n  \nFIN PARA\n# En R\nfor (i in 1:nrow(datos)) {\n    \n    tipohab <- datos[i, 1]\n    mes <- datos[i, 2]\n    noches <- datos[1, 3]\n    \n    tabla[mes, tipohab] <- tabla[mes, tipohab] + 1\n    pernoc <- pernoc + datos[i, 3]\n    total_fila[mes] <- total_fila[mes] + 1\n    total_col[tipohab] <- total_col[tipohab] + 1\n    \n}\n\n# Resultados: \ntabla      [,1] [,2] [,3]\n [1,]  200  129   72\n [2,]  202   98   80\n [3,]  131   70   35\n [4,]  113   61   40\n [5,]  169   91   61\n [6,]  139   78   61\n [7,]  298  179  112\n [8,]  105   85   41\n [9,]  138   95   35\n[10,]  181   99   67\n[11,]   99   68   36\n[12,]  200  119   66\ntotal_fila [1] 401 380 236 214 321 278 589 231 268 347 203 385\ntotal_col[1] 1975 1172  706\npernoc[1] 19323"},{"path":"uso-de-archivos-de-datos.html","id":"a-mostrar-el-cuadro","chapter":"6 Uso de archivos de datos","heading":"6.4.3 a) Mostrar el cuadro","text":"Tenemos que anexarle tabla los totales fila, los totales columna, el total general y los nombres de fila y columna para poder completar el pedido. Vamos empezar por definir vectores de tipo caracter que tengan todos los meses del año y los tipos de habitación, para usarlos como nombres de filas y columnas más adelante:Siendo que el número total de reservas que se debe colocar en la última celda del cuadro coincide con el total de filas en datos, ya tenemos todos los elementos necesarios para mostrar el cuadro pedido, cuya construcción será indicada con el siguiente bloque de pseudocódigo:Comenzando por el cuerpo principal del cuadro que es la matriz tabla, la sentencia ANEXAR FILA total_col implica que hay que agregarle una fila por debajo, con los valores guardados en total_col. Luego, indicamos que esto debe ser concatenado agregándole una columna la derecha con la sentencia ANEXAR COLUMNA total_fila NFILA(datos). Esta nueva columna estará formada por los valores de total_fila, seguido por el valor guardado en NFILA(datos). De esta manera, todas las dimensiones de los elementos que estamos uniendo coinciden.Finalmente, indicamos que el cuadro así construido debe ser mostrado con ciertos nombres o etiquetas para sus filas y columnas. Por ejemplo, NOMBRES FILAS meses \"Total\" señala que los nombres de las filas están determinados por los valores guardados en el vector meses y el valor de tipo caracter \"Total\".Lo anterior es suficiente como para expresar la idea de cómo tiene que ser el cuadro, pero al traducirlo R tendremos que ser más específicos. Por ejemplo, la acción de anexar se puede realizar uniendo vectores y/o marices con las funciones rbind() (row bind, unir filas) o cbind() (column bind, unir columnas). Veamos el siguiente ejemplo pequeño:Entonces, para unir los conteos que están en tabla con los totales marginales y el total general, tenemos que hacer:Ahora podemos agregarle nombres las columnas y las filas. Para esto debemos definir una lista, que se le asigna al objeto cuadro como atributo mediante la función dimnames():","code":"# Pseudocódigo\nVARIABLE caracter tipos(3), meses(12)\ntipos[1] <- \"Simple\"\ntipos[2] <- \"Doble\"\ntipos[3] <- \"Triple\"\nmeses[1] <- \"Enero\"\nmeses[2] <- \"Febrero\"\n...\nmeses[12] <- \"Diciembre\"\n# En R\n# Crear un vector caracter con todos los nombres de los meses\nmeses <- c(\"Enero\", \"Febrero\", \"Marzo\", \"Abril\",\n           \"Mayo\", \"Junio\", \"Julio\", \"Agosto\",\n           \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\")\n# Crear un vector caracter con los tipos de habitación\ntipos <- c(\"Simple\", \"Doble\", \"Triple\")# Pseudocódigo\nMOSTRAR CUADRO\n  CUERPO tabla\n  ANEXAR FILA total_col\n  ANEXAR COLUMNA total_fila NFILA(datos)\n  NOMBRES FILAS meses \"Total\"\n  NOMBRES COLUMNAS  tipos \"Total\"\nFIN MOSTRAR CUADRO\n# Concatenar verticalmente, es decir, unir por columnas:\nX <- matrix(1:4, 2)\nX     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\nY <- 5:6\nY[1] 5 6\nW <- cbind(X, Y)\nW         Y\n[1,] 1 3 5\n[2,] 2 4 6\n# Concatenar horizontalmente, es decir, unir por fila. \n# A W se le agrega una fila compuesta por los elementos de Z y el número 9:\nZ <- 7:8\nZ[1] 7 8\nrbind(W, c(Z, 9))         Y\n[1,] 1 3 5\n[2,] 2 4 6\n[3,] 7 8 9\n# Concatenar la tabla con los totales por fila y llamarlo \"cuadro\"\ncuadro <- cbind(tabla, total_fila)\ncuadro                  total_fila\n [1,] 200 129  72        401\n [2,] 202  98  80        380\n [3,] 131  70  35        236\n [4,] 113  61  40        214\n [5,] 169  91  61        321\n [6,] 139  78  61        278\n [7,] 298 179 112        589\n [8,] 105  85  41        231\n [9,] 138  95  35        268\n[10,] 181  99  67        347\n[11,]  99  68  36        203\n[12,] 200 119  66        385\n# Concatenar el cuadro con los totales por columna y el total general\ncuadro <- rbind(cuadro, c(total_col, nrow(datos)))\ncuadro                    total_fila\n [1,]  200  129  72        401\n [2,]  202   98  80        380\n [3,]  131   70  35        236\n [4,]  113   61  40        214\n [5,]  169   91  61        321\n [6,]  139   78  61        278\n [7,]  298  179 112        589\n [8,]  105   85  41        231\n [9,]  138   95  35        268\n[10,]  181   99  67        347\n[11,]   99   68  36        203\n[12,]  200  119  66        385\n[13,] 1975 1172 706       3853\ndimnames(cuadro) <- list(\"Mes\" = c(meses, \"Total\"), \n                         \"Tipo de habitación\" = c(tipos, \"Total\") )\ncuadro            Tipo de habitación\nMes          Simple Doble Triple Total\n  Enero         200   129     72   401\n  Febrero       202    98     80   380\n  Marzo         131    70     35   236\n  Abril         113    61     40   214\n  Mayo          169    91     61   321\n  Junio         139    78     61   278\n  Julio         298   179    112   589\n  Agosto        105    85     41   231\n  Septiembre    138    95     35   268\n  Octubre       181    99     67   347\n  Noviembre      99    68     36   203\n  Diciembre     200   119     66   385\n  Total        1975  1172    706  3853"},{"path":"uso-de-archivos-de-datos.html","id":"b-determinar-el-total-de-pernoctaciones-en-el-hotel-durante-el-2019","chapter":"6 Uso de archivos de datos","heading":"6.4.4 b) Determinar el total de pernoctaciones en el hotel durante el 2019","text":"Como dijimos antes, el total de pernoctaciones es la suma de las cantidades de noches de cada reserva y esto ya lo calculamos en la variable pernoc mientras recorrimos todos los registros del dataset. Solamente tenemos que mostrar el resultado:","code":"# Pseudocódigo\nESCRIBIR \"El número total de pernoctaciones en el hotel durante el 2019 fue\", pernoc\n# En R\ncat(\"El número total de pernoctaciones en el hotel durante el 2019 fue\", pernoc, \"\\n\")El número total de pernoctaciones en el hotel durante el 2019 fue 19323 "},{"path":"uso-de-archivos-de-datos.html","id":"c-determinar-cuál-fue-el-mes-de-mayor-cantidad-de-reservas","chapter":"6 Uso de archivos de datos","heading":"6.4.5 c) Determinar cuál fue el mes de mayor cantidad de reservas","text":"Para lograr este objetivo tenemos que ver cuál es el valor máximo en el vector total_fila. Dado que el mismo tiene la cantidad total de reservas hecha en cada mes, saber en qué posición de este vector se encuentra el máximo nos permitirá determinar de qué mes se trata.Si prestamos atención nos daremos cuenta que este tipo de problema ya lo hemos resuelto en la práctica 4, en la cual hemos escrito una función llamada maximo() que devolvía como resultado tanto el valor máximo en un vector como su posición en el mismo. Entonces, podemos invocar dicho subalgoritmo:Si recordamos la definición de la función maximo(), veremos que el resultado arrojado, res, es un vector de 2 elementos: el primero, res[1], tiene el valor del máximo, mientras que el segundo, res[2], tiene el valor de su posición. Por ejemplo, si res[2] vale 7, significa que el máximo está en la posición 7, es decir, en el mes de julio. Como meses es un vector que guarda todos los nombres de los meses, indicar meses[res[2]] sería equivalente hacer meses[7] que devuelve el valor Julio. De esta manera se pudo construir el mensaje mostrado.En R tenemos que recordar que la función maximo() debe existir en nuestro ambiente de trabajo para poder utilizarla. Para esto, tenemos que agregarla nuestro script y correrla con anterioridad de ejecutar el resto del código, aunque sería más recomendable guardar esta y cualquier otra función que necesitemos en un archivo auxiliar de código de R. De esta forma, el script en el que estamos escribiendo nuestro programa principal queda más limpio y ordenado. Para ejecutar el archivo de código adicional con las funciones que deben ser creadas, podemos hacer uso desde nuestro script principal de la función source(), indicando entre los paréntesis el camino hacia dicho archivo de funciones auxiliares:En el archivo funciones.R se encuentra la definición de la función maximo(), la cual ahora está lista para ser usada:","code":"# Pseudocódigo\nres <- maximo(total_fila)\nESCRIBIR \"El mes de mayor cantidad de reservas fue\", meses[res[2]], \"con\", res[1], \"reservas.\"\nsource(\"/home/marcos/GitProjects/introprog/archivos/funciones.R\")\nres <- maximo(total_fila)\n\n# Ver el contenido de res: valor del máximo\nres[1][1] 589\n# Ver el contenido de res: posición del máximo\nres[2][1] 7\n# Mes que le corresponde al máximo\nmeses[res[2]][1] \"Julio\"\n# Generar el mensaje\ncat(\"El mes de mayor cantidad de reservas fue\", meses[res[2]], \"con\", \n    res[1], \"reservas.\\n\")El mes de mayor cantidad de reservas fue Julio con 589 reservas."},{"path":"uso-de-archivos-de-datos.html","id":"d-determinar-para-cada-tipo-de-habitación-el-mes-con-menor-número-de-reservas","chapter":"6 Uso de archivos de datos","heading":"6.4.6 d) Determinar para cada tipo de habitación el mes con menor número de reservas","text":"Para resolver este último punto tenemos que identificar que lo que se pide es buscar el mínimo valor en cada columna de la matriz tabla. La fila en la que se encuentra el mínimo corresponde al mes en el cual se ha presentado el menor número de reservas en cada tipo de habitación. Nuevamente, debemos recordar que en la Práctica 4 hemos escrito un subalgoritmo que se encarga justamente de esto. La función minimo_matriz_col identifica el mínimo en una columna en particular de una matriz e informa también en qué fila se encuentra, justo lo que necesitamos. Como lo tenemos que hacer una vez para cada tipo de habitación, es decir, una vez para cada columna, podemos encerrar esto en una estructura iterativa:","code":"PARA j DESDE 1 HASTA 3 HACER\n  res <- minimo_matriz_col(tabla, j)\n  ESCRIBIR \"Para las habitaciones de tipo\", tipos[j], \n           \"el mes con menor número de reservas fue\", meses[res[2]], \n           \"con\", res[1], \"reservas.\"\nFIN PARA\nfor (j in 1:3) {\n    res <- minimo_matriz_col(tabla, j)\n    cat(\"Para las habitaciones de tipo\", tipos[j], \n        \"el mes con menor \\n    número de reservas fue\", \n        meses[res[2]], \"con\", res[1], \"reservas.\\n\")\n}Para las habitaciones de tipo Simple el mes con menor \n    número de reservas fue Noviembre con 99 reservas.\nPara las habitaciones de tipo Doble el mes con menor \n    número de reservas fue Abril con 61 reservas.\nPara las habitaciones de tipo Triple el mes con menor \n    número de reservas fue Marzo con 35 reservas."},{"path":"uso-de-archivos-de-datos.html","id":"solución-completa","chapter":"6 Uso de archivos de datos","heading":"6.4.7 Solución completa","text":"Ahora estamos en condiciones de juntar las piezas de este gran rompecabezas y presentar la solución completa al problema, tanto su algortimo como su código en R:","code":"ALGORITMO: \"Análisis de las reservas en un famoso hotel de Rosario durante el año 2019\"\nCOMENZAR\n    \n  VARIABLE numérica pernoc, tipohab, mes,tabla(12, 3), total_fila(12), total_col(3), res(2)\n  VARIABLE caracter tipos(3), meses(12)\n\n  # Lectura de registros en el archivo\n  ABRIR ARCHIVO (reservas) secuencial, lectura\n  LEER REGISTROS (reservas) A DATASET (datos)\n  CERRAR ARCHIVO (reservas)\n  ESCRIBIR \"El archivo cuenta con\" NFILA(datos) \"registros de\" NCOL(datos) \"campos.\" \n\n  # Recorrer todos los registros para obtener la info necesaria\n  pernoc <- 0\n  PARA i DESDE 1 HASTA NFILA(datos) HACER\n    \n    tipohab <- datos[i, 1]\n    mes <- datos[i, 2]\n    noches <- datos[i, 3]\n    \n    tabla[mes, tipohab] <- tabla[mes, tipohab] + 1\n    pernoc <- pernoc + noches\n    total_fila[mes] <- total_fila[mes] + 1\n    total_col[tipohab] <- total_col[tipohab] + 1\n    \n  FIN PARA\n\n  # a) Mostrar la tabla\n  tipos[1] <- \"Simple\"\n  tipos[2] <- \"Doble\"\n  tipos[3] <- \"Triple\"\n  meses[1] <- \"Enero\"\n  ...\n  meses[12] <- \"Diciembre\"\n  MOSTRAR CUADRO\n    CUERPO tabla\n    ANEXAR FILA total_col\n    ANEXAR COLUMNA total_fila NFILA(datos)\n    NOMBRES FILAS meses \"Total\"\n    NOMBRES COLUMNAS  tipos \"Total\"\n  FIN MOSTRAR CUADRO\n\n  # b) Determinar el total de pernoctaciones en el hotel durante el 2019\n  ESCRIBIR \"El número total de pernoctaciones en el hotel durante el 2019 fue\", pernoc\n\n  # c) Determinar cuál fue el mes de mayor cantidad de reservas\n  res <- maximo(total_fila)\n  ESCRIBIR \"El mes de mayor cantidad de reservas fue\", meses[res[2]], \"con\", res[1], \"reservas.\"\n\n  # d) Determinar para cada tipo de habitación el mes con menor número de reservas\n  PARA j DESDE 1 HASTA 3 HACER\n    res <- minimo_matriz_col(tabla, j)\n    ESCRIBIR \"Para las habitaciones de tipo\", tipos[j], \"el mes con menor número de reservas fue\", meses[res[2]], \"con\", res[1], \"reservas.\"\n  FIN PARA\n   \nFIN\n# Correr archivo con funciones creadas anteriormente\nsource(\"/home/marcos/GitProjects/introprog/archivos/funciones.R\")\n\n# Leer archivo\ndatos <- read.delim(\"/home/marcos/GitProjects/introprog/archivos/reservas.txt\")\n\n# Programa: \"Análisis de las reservas en un famoso hotel de Rosario durante el año 2019\"\ntabla <- matrix(0, 12, 3)\ntotal_fila <- numeric(12)\ntotal_col <- numeric(3)\npernoc <- 0\nfor (i in 1:nrow(datos)) {\n    tipohab <- datos[i, 1]\n    mes <- datos[i, 2]\n    noches <- datos[i, 3]\n    \n    tabla[mes, tipohab] <- tabla[mes, tipohab] + 1\n    pernoc <- pernoc + noches\n    total_fila[mes] <- total_fila[mes] + 1\n    total_col[tipohab] <- total_col[tipohab] + 1\n    \n}\n\n# a) Mostrar la tabla\n# Crear un vector caracter con todos los nombres de los meses\nmeses <- c(\"Enero\", \"Febrero\", \"Marzo\", \"Abril\",\n           \"Mayo\", \"Junio\", \"Julio\", \"Agosto\",\n           \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\")\n# Crear un vector caracter con los tipos de habitación\ntipos <- c(\"Simple\", \"Doble\", \"Triple\")\n# Concatenar la tabla con los totales por fila y llamarlo \"cuadro\"\ncuadro <- cbind(tabla, total_fila)\n# Concatenar el cuadro con los totales por columna y el total general\ncuadro <- rbind(cuadro, c(total_col, nrow(datos)))\ndimnames(cuadro) <- list(Mes = c(meses, \"Total\"), \n                         \"Tipo de habitación\" = c(tipos, \"Total\") )\n# Mostrar el resultado\ncat(\"Número de reservas durante el 2019 según mes y tipo de habitación\\n\")\ncuadro\n\n# b) Determinar el total de pernoctaciones en el hotel durante el 2019\ncat(\"\\nEl número total de pernoctaciones en el hotel durante el 2019 fue\", pernoc, \"\\n\\n\")\n\n# c) Determinar cuál fue el mes de mayor cantidad de reservas\nres <- maximo(total_fila)\ncat(\"El mes de mayor cantidad de reservas fue\", meses[res[2]], \"con\", \n    res[1], \"reservas.\\n\\n\")\n\n# d) Determinar para cada tipo de habitación el mes con menor número de reservas\nfor (j in 1:3) {\n    res <- minimo_matriz_col(tabla, j)\n    cat(\"Para las habitaciones de tipo\", tipos[j], \n        \"el mes con menor\\n     número de reservas fue\", \n        meses[res[2]], \"con\", res[1], \"reservas.\\n\")\n}Número de reservas durante el 2019 según mes y tipo de habitación\n            Tipo de habitación\nMes          Simple Doble Triple Total\n  Enero         200   129     72   401\n  Febrero       202    98     80   380\n  Marzo         131    70     35   236\n  Abril         113    61     40   214\n  Mayo          169    91     61   321\n  Junio         139    78     61   278\n  Julio         298   179    112   589\n  Agosto        105    85     41   231\n  Septiembre    138    95     35   268\n  Octubre       181    99     67   347\n  Noviembre      99    68     36   203\n  Diciembre     200   119     66   385\n  Total        1975  1172    706  3853\n\nEl número total de pernoctaciones en el hotel durante el 2019 fue 19323 \n\nEl mes de mayor cantidad de reservas fue Julio con 589 reservas.\n\nPara las habitaciones de tipo Simple el mes con menor\n     número de reservas fue Noviembre con 99 reservas.\nPara las habitaciones de tipo Doble el mes con menor\n     número de reservas fue Abril con 61 reservas.\nPara las habitaciones de tipo Triple el mes con menor\n     número de reservas fue Marzo con 35 reservas."},{"path":"uso-de-archivos-de-datos.html","id":"creación-de-archivos-y-escritura-de-resultados","chapter":"6 Uso de archivos de datos","heading":"6.5 Creación de archivos y escritura de resultados","text":"Anteriormente hemos mencionado que cuando trabajamos con archivos podemos realizar acciones tanto de lectura como de escritura, aunque hasta el momento nos hemos limitado leer registros de un archivo. En este apartado presentamos cómo crear un archivo de texto desde R, de manera que pueda utilizarse para escribir y guardar allí los resultados obtenidos.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"crear-un-archivo-para-guardar-resultados","chapter":"6 Uso de archivos de datos","heading":"6.5.1 Crear un archivo para guardar resultados","text":"La función sink() permite escribir en un archivo de texto todos los resultados que habitualmente vemos en la consola de R. Sus argumentos son:file: nombre del archivo, si existe será creado. Se guarda en el directorio de trabajo actual, menos que indiquemos aquí la ruta completa hacia otra carpeta.append: si el archivo ya existía, por default lo sobreescribe (borra lo anterior), menos que indiquemos append = TRUE para que agregue nuevas línea sin borrar nada.split: por default mientras la conexión al archivo está activa, los resultados que enviamos al mismo se muestran en la consola de R, menos que indiquemos split = TRUE, en cuyo caso sucederán ambas cosas: los resultados serán escritos en el archivo y se verán en la consola.Cuando se desea cerrar la conexión al archivo, se debe correr sink() sin ningún argumento. Todo lo que imprimamos con cat() entre ambos llamados sink() se guardará en el archivo. Veamos un ejemplo:Así luce el archivo salida.txt:Se deja propuesto como ejercicio implementar esto en el ejemplo anterior, para que los resultados del análisis de las reservas se guarden en un archivo de texto.","code":"\na <- matrix(1:9, nrow = 3)\nb <- 3\nd <- 5\nsink(file = \"salida.txt\", append = TRUE, split = TRUE)\ncat(\"==========================================\\n\")\ncat(\"            ARCHIVO DE RESULTADOS         \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"El valor de b es\", b, \", mientras que d vale \", d, \"\\n\\n\", sep = \"\")\ncat(\"Esta es la matriz a:\\n\\n\")\na\nsink()==========================================\n            ARCHIVO DE RESULTADOS         \n==========================================\n\nEl valor de b es  3, mientras que d vale 5 \n\nEsta es la matriz a:\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9"},{"path":"uso-de-archivos-de-datos.html","id":"crear-un-archivo-para-guardar-conjuntos-de-datos-línea-por-línea","chapter":"6 Uso de archivos de datos","heading":"6.5.2 Crear un archivo para guardar conjuntos de datos, línea por línea","text":"En algunas oportunidades con nuestro trabajo modificamos o generamos nuevos conjuntos de datos o tablas que queremos guardar y para esto necesitamos crear un nuevo archivo. Supongamos que, por ejemplo, como parte de nuestro algoritmo tenemos un dataset llamado datos con 4 columnas, cuyo contenido deseamos que sea escrito y guardado en un archivo llamado mi_archivo.txt. Siguiendo las convenciones indicadas en la sección 6.3, esto puede ser incorporado en el pseudocódigo de esta forma:En R podemos cumplir este objetivo usando tan solo la ya muy conocida función cat(), pero con algunos argumentos adicionales. En file = indicamos el nombre del archivo donde queremos escribir. Si el mismo existe previamente, será creado al correr cat(). Con sep = \"\\t\" establecemos que los distintos valores imprimir estarán separados por tabulaciones (podría ser sep = \",\" si queremos generar un archivo de extensión .csv). Con fill = TRUE nos aseguramos que lo que se imprima en el mismo archivo más tarde con otro llamado cat() se coloque en una línea nueva por debajo. Sabiendo todo esto, podemos crear un nuevo archivo de datos de esta forma:Por ahora el archivo sólo tiene una línea con los nombres de los campos, pero todavía tiene ningún dato. Si quisiera escribir un primer registro, puedo hacer, por ejemplo:El argumento append = TRUE hace que se borre lo que hayamos escrito antes. Luego de esta sentencia, el archivo luce así:Claramente, se debe proceder de manera análoga, tal vez haciendo uso de alguna estructura iterativa, para agregar todos los registros que se deseen en el archivo.","code":"CREAR ARCHIVO (mi_archivo)\nABRIR ARCHIVO (mi_archivo) secuencial, de salida\nPARA i DESDE 1 HASTA NFILA(datos) HACER\n    ESCRIBIR REGISTRO (mi_archivo) datos[i, 1] datos[i, 2] datos[i, 3] datos[i, 4]\nFIN PARA\nCERRAR ARCHIVO (mi_archivo)\ncat(\"campo1\", \"campo2\", \"campo3\", \"campo4\", file = \"mi_archivo.txt\", sep = \"\\t\", fill = TRUE)\ncat(23, 1, \"hola\", 985, file = \"mi_archivo.txt\", sep = \"\\t\", fill = TRUE, append = TRUE)campo1  campo2  campo3  campo4\n23      1       hola    985 "},{"path":"uso-de-archivos-de-datos.html","id":"crear-un-archivo-para-guardar-conjuntos-de-datos-todos-los-registros-juntos","chapter":"6 Uso de archivos de datos","heading":"6.5.3 Crear un archivo para guardar conjuntos de datos, todos los registros juntos","text":"Si bien lo anterior sigue la estructura planteada en el pseudocódigo, R provee una gran variedad de funciones para guardar todo el contenido de un objeto de tipo data.frame en un archivo de una sola vez, como se muestra en los ejemplos que siguen, en los cuales suponemos que deseamos guardar el contenido de un data.frame llamado mis_datos en un archivo llamado mi_archivo:","code":"\n# Guardarlo en un archivo de texto separado por tabulaciones\nwrite.table(mis_datos, \"mi_archivo.txt\", quote = FALSE, row.names = FALSE, sep = \"\\t\")\n\n# Guardarlo en un archivo de texto separado por comas\nwrite.csv(mis_datos, \"mi_archivo.txt\", quote = FALSE, row.names = FALSE)\n\n# Guardarlo en un archivo de Excel\n# install.packages(\"writexl\")\nlibrary(writexl)\nwrite_xlsx(mis_datos, \"mi_archivo.xlsx\")"},{"path":"otros-tópicos.html","id":"otros-tópicos","chapter":"7 Otros tópicos","heading":"7 Otros tópicos","text":"Las reglas que aprendimos para escribir el pseudocódigo nos permiten traducir nuestros algoritmos cualquier lenguaje de computación de manera muy general y sencilla. Sin embargo, cada lenguaje de programación tiene diseñado su propio conjunto de funciones y estructuras de datos que facilitan algunas tareas. Una vez que hemos incorporado los conceptos básicos de la programación, podemos dedicarnos aprender las profundidades de un lenguaje en particular.En este capítulo vamos mencionar algunas cosas útiles sobre R y otras cuestiones.","code":""},{"path":"otros-tópicos.html","id":"la-consola","chapter":"7 Otros tópicos","heading":"7.1 La consola","text":"Cuando prendemos nuestra computadora nos encontramos con una interfaz gráfica implementada por el sistema operativo para que podamos hacer lo que necesitemos de manera sencilla usando ventanas y menúes, interactuando con el sistema través del mouse, teclado, micrófono o pantalla táctil. Sin embargo, es posible usar la compu de otra forma, escribiendo comandos especiales en una ventanita, llamada consola que es capaz de interpretarlos para hacer cualquier tipo de actividad, sin utilizar la interfaz gráfica. Años atrás, esta era la única manera disponible de usar la computadora (por ejemplo, con sistema operativo MS-DOS de Windows).Saber usar la consola es muy útil para automatizar actividades, realizar tareas administrativas, manipular varios archivos u objetos en simultáneo, lanzar correr proyectos grandes, conectarse de manera remota un servidor, etc. La primera vez que uno se mete en esto puede ser intimidante, pero hay que olvidar que ya estamos acostumbrados usar la consola de R, con lo cual esto de escribir comandos e interpretar respuestas es algo familiar.Los términos terminal, consola, shell y línea de comandos son términos que veces se usan como sinónimos sin demasiada preocupación, como si fuesen distintas formas de llamar lo mismo: una ventanita donde puedo escribir comandos y hacer que sucedan cosas en la computadora. Sin embargo, hay pequeñas diferencias entre estos conceptos, que acá tratamos de resumir (aunque ni siquiera entre informáticos hay mucho acuerdo en las definiciones):Shell (intérprete de línea de comandos): es software, es un programa que corre otros programas, procesa los comandos que recibe y devuelve resultados Ejemplo: Bash (la más común en sistemas Linux), sh, PowerShell, etc.Terminal: un programa que propicia la transferencia de input/output entre el usuario y la shell. ejecuta comandos, pero recibe los comandos que el shell va procesar. Ejemplos: Command prompt, guake, gnome-terminal, etc. Antiguamente, se trataba de las múltiples estaciones con un monitor y un teclado que una gran computadora tenía para ser usada por varias personas.Consola: un tipo particular de terminal, con una ventana escribir inputs y leer outputs. Históricamente, se trataba de un panel físico (consola) con controles. Siri o Cortana podrían considerarse terminales, pero son consolas, ya que hay que escribir para mandar comandos. Terminal y consola se usan prácticamente como sinónimos.Para abrir una terminal en Linux se puede usar el atajo ctrl + alt + t y en Windows se puede escribir cmd en Inicio.\nFigura 7.1: Abrir la terminal en Windows. En computadoras con Windows en español, en lugar de Command Prompt dice Símbolo del sistema.\nAsí luce la línea de comandos de Windows:\nFigura 7.2: Línea de comandos de Windows.\nLos comandos se escriben en la última línea continuación del símbolo >, que su vez está precedido por la ruta la carpeta que es el directorio de trabajo actual de la terminal, en este caso, C:\\Users\\Marcos (carpeta Marcos, dentro de la carpeta Users, en el disco C).Si bien hay muchísimos comandos para utilizar en la terminal, acá vamos mencionar algunos como ejemplo:Mostrar en qué carpeta (directorio) de la compu estamos situados: pwd en Linux o cd en WindowsListar todos los archivos y carpetas que tenemos en el directorio actual: lsEntrar una subcarpeta desde el directorio en el que estamos: cd nombresubcarpetaVer la ayuda de los comandos: helpLimpiar la consola: cls en Windows o clear en LinuxCerrar la consola: exitPor ejemplo, podemos ver todos los archivos que existen en el directorio actual con ls:\nFigura 7.3: Contenido del directorio actual (Windows).\nPara los siguientes ejemplos, trabajaremos en una carpeta llamada Ejemplos, cuyo path es C:\\Users\\Marcos\\Trabajo\\Ejemplos que tiene la siguiente composición:\nFigura 7.4: Carpeta en la cual deseamos trabajar.\nPodemos convertir dicha carpeta como nuestro nuevo directorio de trabajo con el comando cd (change directory):\nFigura 7.5: Cambio de directorio de trabajo y listado de archivos en el mismo.\nEn Windows hay una forma más directa de abrir la terminal y que ya tenga seteada como directorio de trabajo una carpeta deseada. Antes de abrir la terminal, vamos con el Explorador de archivos la carpeta en cuestión, nos posicionamos en la barra del explorador, escribimos cmd y le damos ENTER. Automáticamente se abrirá la terminal, con esta carpeta como directorio de referencia.\nFigura 7.6: Abrir la terminal desde una carpeta en particular en Windows.\nDesde la terminal podemos correr nuestros programas de R. Hacer esto es necesario cuando tenemos que programar alguna tarea de gran escala que se ejecutará de manera remota en algún servidor o cuando necesitamos encapsular nuestro programa para que otros lo puedan correr sin siquiera saber nada de R.Veamos un ejemplo. En la carpeta C:\\Users\\Marcos\\Trabajo\\Ejemplos tengo guardado el siguiente script, en un archivo llamado mi_programa.R que tiene este contenido:Para ejecutar este programa desde la terminal, sin abrir RStudio o R, utilizo el comando Rscript, que le indica la computadora que el contenido del archivo mi_programa.R debe ser evaluado por R. Esto es lo que se observa en la consola:\nFigura 7.7: Correr el programa de R desde la consola en Windows.\nTodo lo que en el programa estaba encerrado en una llamada la función cat() es lo que se muestra como mensajes en la terminal. Notar que la instrucción RScript mi_programa.R funcione, debemos tener como directorio de trabajo aquella carpeta que aloja al archivo mi_programa.R, en caso contrario el sistema nos alertará que el mismo está disponible.Para que lo anterior funcione en Windows, hay que indicarle al sistema operativo que Rscript es un comando que se instaló con R y que lo puede encontrar en la carpeta de los archivos del programa R. Esto hay que hacerlo una sola vez editando las variables de entorno de Windows, que son cadenas de texto que contienen información acerca del sistema para determinar, por ejemplo, dónde buscar algunos archivos. Esto se logra siguiendo estos pasos:Fijarse en qué carpeta de la compu está instalado R. Seguramente lo encuentres si, abriendo el explorador de archivo, vas siguiendo este camino: Este equipo > Windows (C:) > Archivos de programa > R > R-version > bin. En esta carpeta tiene que haber dos archivos, llamados R.exe y Rscript.exe. Si es así, hacé clic con el botón derecho del mouse sobre cualquiera de ellos, luego en “Propiedades” y copiá el path que aparece en “Ubicación” (deberías copiar algo como C:\\Program Files\\R\\R-3.6.0\\bin).En Inicio, escribir “Entorno” y hacer clic en la opción “Editar las variables de entorno del sistema (panel de control)”.Hacer clic en el botón “Variables de entorno”.En el cuadro “Variables del sistema”, hacer clic en la variable “Path” y luego en “Editar”.Hacer clic en “Nuevo”, pegar la dirección C:\\Program Files\\R\\R-3.6.0\\bin y dar Enter. Luego, hacer clic en “Aceptar” tres veces para cerrar todo.¡Listo! Ya podés correr tus programas desde la consola con el comando Rscript.Lo bueno de esto es que si corremos nuestros programas desde la terminal, podemos hacer cosas interactivas. Por ejemplo, para todo lo que pusimos LEER en nuestros pseudocódigos, ahora podemos hacer verdaderamente que la persona usuaria del programa provea los valores correspondientes.Veamos algunos ejemplos.Práctica 2, Ejercicio 1: paridad de un númeroLa función scan() es la que permite escanear o leer valores que los usuarios ingresen por la terminal. Entre sus argumentos tenemos file, que si lo seteamos como file = \"stdin\" indica que vamos leer información desde la consola. Otros argumentos que son de utilidad incluyen n = 1, que indica que sólo leeremos un valor y quite = TRUE que le pide esta función que emita ningún mensaje. Por ejemplo, si el siguiente código se guarda en el archivo paridad.R y es ejecutado desde la consola, le va pedir la persona que lo esté usando que indique cualquier número y luego le va comunicar si es par o impar:Esto es lo que ocurre en la terminal:\nFigura 7.8: Programa paridad.R.\nPráctica 2, Ejercicio 3: salarioEn este ejemplo, tenemos que leer tres valores, dos de lo cuales son de tipo carácter. Para esto tenemos que agregar en la función scan() el argumento = \"\", que admite el ingreso de caracteres alfanuméricos (por default scan() sòlo espera recibir valores numéricos). Si el siguiente código se guarda en el archivo salario.R y se lo ejecuta desde la consola, produce el resultado que se muestra en la imagen:\nFigura 7.9: Programa salario.R.\nPráctica 4, Ejercicio 1: suma de elementos de un vector24En este ejercicio escribimos una función para sumar los elementos de un vector. Vamos ver cómo hacer para que un usuario nos diga cuáles son los valores que quiere sumar desde la consola. Primero preguntamos cuántos números se desean sumar y luego los recibimos en el vector v. Si el siguiente código queda guardado en el archivo suma.R y se lo corre desde la terminal, produce el resultado que se muestra en la imagen.\nFigura 7.10: Programa suma.R.\n","code":"\na <- \"¡Hola, Mundo!\"\nb <- 3\nd <- 5\ncat(\"==========================================\\n\")\ncat(\"                 RESULTADOS               \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"El valor de b es \", b, \", mientras que d vale \", d, \".\\n\\n\", sep = \"\")\ncat(\"La suma entre ellos es igual a \", b + d, \".\\n\\n\", sep = \"\")\ncat(\"Este es un saludo:\", a)\ncat(\"==========================================\\n\")\ncat(\"           PARIDAD DE UN NÚMERO           \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"Ingrese un número entero y presione enter:\\n\")\nn <- scan(file = \"stdin\", n = 1, quiet = TRUE)\nif (n %% 2 == 0) {\n    cat(n, \"es par\\n\")\n} else {\n    cat(n, \"es impar\\n\")\n}\ncat(\"==========================================\\n\")\ncat(\"           CÁLCULO DEL SALARIO            \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"Ingrese la cantidad de horas trabajadas:\\n\")\nhoras <- scan(\"stdin\", n = 1, quiet = TRUE)\ncat(\"\\nIngrese el día de la semana (DOM LUN MAR MIE JUE VIE SAB):\\n\")\ndia <- scan(\"stdin\", what = \"\", n = 1, quiet = TRUE)\ncat(\"\\nIngrese el turno (M T N):\\n\")\nturno <- scan(\"stdin\", what = \"\", n = 1, quiet = TRUE)\n\nsalario <- horas * 400\nif (turno == \"N\") {\n    salario <- salario + horas * 200\n}\nif (turno == \"DOM\") {\n    salario <- salario + horas * 100\n}\ncat(\"\\nEl salario que se debe abonar es $\", salario, \"\\n\", sep = \"\")\ncat(\"==========================================\\n\")\ncat(\"              SUMA DE NÚMEROS             \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"¿Cuántos números va a ingresar?\\n\")\nn <- scan(\"stdin\", n = 1, quiet = TRUE)\ncat(\"\\nIngrese los números, presionando Enter luego de cada uno:\\n\")\nv <- scan(\"stdin\", n = n, quiet = TRUE)\nsuma <- 0\nfor (i in 1:length(v)) {\n    suma <- suma + v[i]\n}\ncat(\"\\nLa suma de los números es:\", suma, \"\\n\")"},{"path":"otros-tópicos.html","id":"más-funciones-predefinidas","chapter":"7 Otros tópicos","heading":"7.2 Más funciones predefinidas","text":"En este proceso de aprendizaje sobre programación hemos encarado la tarea de escribir muchas funciones que, por lo general, ya forman parte de la sintaxis básica de cualquier lenguaje de programación. Sí… hemos trabajado de más, ¡pero fue para poder aprender! Ahora vamos mencionar algunos ejemplos de funciones que fuimos capaces de programar por nuestros propios medios, pero que ya estaban disponibles en R. De hecho, en la sección 4.3.1 vimos que R tiene funciones predefinidas para que podamos cumplir muchas tareas con facilidad.Recordemos algunos ejercicios:En la sección 4.3.1 vimos la definición de una función para el cálculo de factoriales, que su vez usamos en el ejercicio 1 de la Práctica 3 para crear una función que calcule números combinatorios. R ya trae funciones que cumplen ese rol:\n\n# Cálculo de factoriales\nfactorial(5)\n[1] 120\n\n# Cálculo de números combinatorios\nchoose(10, 2)\n[1] 45En la sección 4.3.1 vimos la definición de una función para el cálculo de factoriales, que su vez usamos en el ejercicio 1 de la Práctica 3 para crear una función que calcule números combinatorios. R ya trae funciones que cumplen ese rol:En el ejercicio 1 de la Práctica 4 definimos la siguiente función para sumar los elementos de un vector:\n\nsuma <- function(v) {\n    rtdo <- 0\n    (1:length(v)) {\n        rtdo <- rtdo + v[]\n    }\n    return(rtdo)\n}\n\nmi_vector <- c(60, -5, 0, 12, 1)\nsuma(mi_vector)\n[1] 68\nSin embargo, podríamos usar directamente la función sum() de R:\n\nsum(mi_vector)\n[1] 68En el ejercicio 1 de la Práctica 4 definimos la siguiente función para sumar los elementos de un vector:Sin embargo, podríamos usar directamente la función sum() de R:En el ejercicio 3 de la Práctica 4 creamos las funciones ordenar_asc() y ordenar_des() para ordenar los elementos de un vector. Esto se puede hacer así:\n\nsort(mi_vector)\n[1] -5  0  1 12 60\n\nsort(mi_vector, decreasing = TRUE)\n[1] 60 12  1  0 -5En el ejercicio 3 de la Práctica 4 creamos las funciones ordenar_asc() y ordenar_des() para ordenar los elementos de un vector. Esto se puede hacer así:En el ejercicio 4 de la Práctica 4, escribimos funciones para encontrar el mínimo o el máximo en un vector, al igual que su posición. R nos facilita estas funciones para lograr lo mismo:\n\n# Valor mínimo\nmin(mi_vector)\n[1] -5\n\n# Posición del mínimo en el vector\n.min(mi_vector)\n[1] 2\n\n# Valor máximo\nmax(mi_vector)\n[1] 60\n\n# Posición del máximo en el vector\n.max(mi_vector)\n[1] 1\n\n# Al igual que nuestra función, si el valor se repite nos da la posición de su\n# primera ocurrencia\nw <- c(0, 5, 2, 3, 5, 4)\nmax(w)\n[1] 5\n\n.max(w)\n[1] 2\n\n# Pero podemos obtener todas las posiciones así:\n(w == max(w))\n[1] 2 5En el ejercicio 4 de la Práctica 4, escribimos funciones para encontrar el mínimo o el máximo en un vector, al igual que su posición. R nos facilita estas funciones para lograr lo mismo:También podemos aplicar esto la búsqueda de mínimos y máximos en una matriz:\n\n<- matrix(sample(100, 20), nrow = 5)\n\n     [,1] [,2] [,3] [,4]\n[1,]   14   87   95   10\n[2,]   88   75   49   11\n[3,]   37   53   39   86\n[4,]   52   71   48   42\n[5,]    9   85   21   25\n\n# Valor máximo\nmax()\n[1] 95\n\n# Posición (arr.ind = TRUE para que nos indique fila y columna)\n(== max(), arr.ind = TRUE)\n     row col\n[1,]   1   3\n\n# Máximo en cada fila de (la función apply aplica la función provista, max, \n# cada fila de )\napply(, 1, max)\n[1] 95 88 86 71 85\n\n# Si en lugar de 1 ponemos 2, tenemos el máximo en cada columna\napply(, 2, max)\n[1] 88 87 95 86\n\n# Posición del máximo en cada fila\nmax.col() # Una opción\n[1] 3 1 4 2 2\n\napply(, 1, .max) # Otra opción\n[1] 3 1 4 2 2\n\n# Posición del máximo en cada columna\napply(, 2, .max)\n[1] 2 1 1 3También podemos aplicar esto la búsqueda de mínimos y máximos en una matriz:En otras ocasiones, puede ser que R incluya en su instalación base la función que necesitamos, pero que la misma ya haya sido programada por otra persona y esté disponible en un paquete que podemos descargar e instalar. Por ejemplo, en el ejercicio 8 de la Práctica 3 escribimos una función llamada max_com_div() para hallar el máximo común divisor entre dos naturales. R tiene una función que compute esto, pero podemos instalar el paquete FRACTION que sí la incluye:\n\n# install.packages(\"FRACTION\")\nlibrary(\"FRACTION\")\ngcd(100, 24)\n[1] 4En otras ocasiones, puede ser que R incluya en su instalación base la función que necesitamos, pero que la misma ya haya sido programada por otra persona y esté disponible en un paquete que podemos descargar e instalar. Por ejemplo, en el ejercicio 8 de la Práctica 3 escribimos una función llamada max_com_div() para hallar el máximo común divisor entre dos naturales. R tiene una función que compute esto, pero podemos instalar el paquete FRACTION que sí la incluye:","code":"\n# Cálculo de factoriales\nfactorial(5)[1] 120\n# Cálculo de números combinatorios\nchoose(10, 2)[1] 45\nsuma <- function(v) {\n    rtdo <- 0\n    for (i in 1:length(v)) {\n        rtdo <- rtdo + v[i]\n    }\n    return(rtdo)\n}\n\nmi_vector <- c(60, -5, 0, 12, 1)\nsuma(mi_vector)[1] 68\nsum(mi_vector)[1] 68\nsort(mi_vector)[1] -5  0  1 12 60\nsort(mi_vector, decreasing = TRUE)[1] 60 12  1  0 -5\n# Valor mínimo\nmin(mi_vector)[1] -5\n# Posición del mínimo en el vector\nwhich.min(mi_vector)[1] 2\n# Valor máximo\nmax(mi_vector)[1] 60\n# Posición del máximo en el vector\nwhich.max(mi_vector)[1] 1\n# Al igual que nuestra función, si el valor se repite nos da la posición de su\n# primera ocurrencia\nw <- c(0, 5, 2, 3, 5, 4)\nmax(w)[1] 5\nwhich.max(w)[1] 2\n# Pero podemos obtener todas las posiciones así:\nwhich(w == max(w))[1] 2 5\nA <- matrix(sample(100, 20), nrow = 5)\nA     [,1] [,2] [,3] [,4]\n[1,]   14   87   95   10\n[2,]   88   75   49   11\n[3,]   37   53   39   86\n[4,]   52   71   48   42\n[5,]    9   85   21   25\n# Valor máximo\nmax(A)[1] 95\n# Posición (arr.ind = TRUE para que nos indique fila y columna)\nwhich(A == max(A), arr.ind = TRUE)     row col\n[1,]   1   3\n# Máximo en cada fila de A (la función apply aplica la función provista, max, \n# a cada fila de A)\napply(A, 1, max)[1] 95 88 86 71 85\n# Si en lugar de 1 ponemos 2, tenemos el máximo en cada columna\napply(A, 2, max)[1] 88 87 95 86\n# Posición del máximo en cada fila\nmax.col(A) # Una opción[1] 3 1 4 2 2\napply(A, 1, which.max) # Otra opción[1] 3 1 4 2 2\n# Posición del máximo en cada columna\napply(A, 2, which.max)[1] 2 1 1 3\n# install.packages(\"FRACTION\")\nlibrary(\"FRACTION\")\ngcd(100, 24)[1] 4"},{"path":"otros-tópicos.html","id":"operaciones-vectorizadas","chapter":"7 Otros tópicos","heading":"7.3 Operaciones vectorizadas","text":"Otro aspecto importante es que la mayoría de las funciones de R están vectorizadas. Esto quiere decir que están diseñadas para operar al mismo tiempo con todos los elementos de los vectores y matrices y es necesario recorrer cada posición, una por una, como aprendimos para incorporar nuestros primeros conocimientos sobre programación. Las funciones operan en todos los elementos sin tener que usar estructuras iterativas, haciendo que el código sea más conciso, fácil de leer y con menos chances de cometer errores.Recordemos algunas situaciones:Práctica 4, ejercicio 2: definimos una función para sumar dos vectores:\n\nsumar_vectores <- function(u, v) {\n    nu <- length(u)\n    nv <- length(v)\n    (nu == nv) {\n        suma <- numeric(nu)\n        (1:nu) { \n            suma[] <- u[] + v[]\n        }\n        return(suma)\n    } else {\n        cat(\"Las dimensiones de los vectores coinciden\\n\")\n        return(NULL)\n    }\n}\n\nu <- c(5, 8, 2)\nv <- c(2, 3, -1)\nsumar_vectores(u, v)\n[1]  7 11  1\nPero directamente, podemos hacer u + v, puesto que R realizará la suma elemento elemento entre los dos vectores:\n\nu + v\n[1]  7 11  1Práctica 4, ejercicio 2: definimos una función para sumar dos vectores:Pero directamente, podemos hacer u + v, puesto que R realizará la suma elemento elemento entre los dos vectores:Práctica 4, ejercicio 5: creamos una función para calcular el producto escalar entre dos vectores. Se puede hacer de manera directa así:\n\nsum(u * v)\n[1] 32\nu * v hace la multiplicación elemento elemento entre los vectores u y v y luego sumamos con sum().Práctica 4, ejercicio 5: creamos una función para calcular el producto escalar entre dos vectores. Se puede hacer de manera directa así:u * v hace la multiplicación elemento elemento entre los vectores u y v y luego sumamos con sum().Práctica 4, ejercicio 7: programamos una función para hacer la suma entre dos matrices:\n\nsumar_matrices <- function(, B) {\n    (nrow() == nrow(B) && ncol() == ncol(B)) {\n        suma <- matrix(NA, nrow(), ncol())\n        (1:nrow()) {\n            (j 1:ncol()) {\n                suma[, j] <- [, j] + B[, j]\n            }\n        }\n        return(suma)\n    } else {\n        cat(\"Las dimensiones de las matrices coinciden\\n\")\n        return(NULL)\n    }\n}\n\n# Ejemplo de su uso\n<- matrix(c(5, 8, 2, 2, 3, 1), nrow = 3)\nb <- matrix(c(0, -1, 3, 1, 2, 4), nrow = 3)\n\n     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\n\nb\n     [,1] [,2]\n[1,]    0    1\n[2,]   -1    2\n[3,]    3    4\n\nsumar_matrices(, b)\n     [,1] [,2]\n[1,]    5    3\n[2,]    7    5\n[3,]    5    5\nGracias las operaciones vectorizadas de R, esto se puede resumir en:\n\n+ b\n     [,1] [,2]\n[1,]    5    3\n[2,]    7    5\n[3,]    5    5Práctica 4, ejercicio 7: programamos una función para hacer la suma entre dos matrices:Gracias las operaciones vectorizadas de R, esto se puede resumir en:continuación presentamos un listado de las operaciones vectorizadas más comunes:","code":"\nsumar_vectores <- function(u, v) {\n    nu <- length(u)\n    nv <- length(v)\n    if (nu == nv) {\n        suma <- numeric(nu)\n        for (i in 1:nu) { \n            suma[i] <- u[i] + v[i]\n        }\n        return(suma)\n    } else {\n        cat(\"Las dimensiones de los vectores no coinciden\\n\")\n        return(NULL)\n    }\n}\n\nu <- c(5, 8, 2)\nv <- c(2, 3, -1)\nsumar_vectores(u, v)[1]  7 11  1\nu + v[1]  7 11  1\nsum(u * v)[1] 32\nsumar_matrices <- function(A, B) {\n    if (nrow(A) == nrow(B) && ncol(A) == ncol(B)) {\n        suma <- matrix(NA, nrow(A), ncol(A))\n        for (i in 1:nrow(A)) {\n            for (j in 1:ncol(A)) {\n                suma[i, j] <- A[i, j] + B[i, j]\n            }\n        }\n        return(suma)\n    } else {\n        cat(\"Las dimensiones de las matrices no coinciden\\n\")\n        return(NULL)\n    }\n}\n\n# Ejemplo de su uso\na <- matrix(c(5, 8, 2, 2, 3, 1), nrow = 3)\nb <- matrix(c(0, -1, 3, 1, 2, 4), nrow = 3)\na     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\nb     [,1] [,2]\n[1,]    0    1\n[2,]   -1    2\n[3,]    3    4\nsumar_matrices(a, b)     [,1] [,2]\n[1,]    5    3\n[2,]    7    5\n[3,]    5    5\na + b     [,1] [,2]\n[1,]    5    3\n[2,]    7    5\n[3,]    5    5\n# Matrices de ejemplo\na <- matrix(c(5, 3, 1, 1, 8, 2), nrow = 3)\nb <- matrix(c(0, -1, 3, 1, 2, 4), nrow = 3)\na     [,1] [,2]\n[1,]    5    1\n[2,]    3    8\n[3,]    1    2\nb     [,1] [,2]\n[1,]    0    1\n[2,]   -1    2\n[3,]    3    4\n# Operaciones elemento a elemento\na + b     [,1] [,2]\n[1,]    5    2\n[2,]    2   10\n[3,]    4    6\na - b     [,1] [,2]\n[1,]    5    0\n[2,]    4    6\n[3,]   -2   -2\na * b     [,1] [,2]\n[1,]    0    1\n[2,]   -3   16\n[3,]    3    8\na / b           [,1] [,2]\n[1,]        Inf  1.0\n[2,] -3.0000000  4.0\n[3,]  0.3333333  0.5\na^2     [,1] [,2]\n[1,]   25    1\n[2,]    9   64\n[3,]    1    4\nsqrt(a)         [,1]     [,2]\n[1,] 2.236068 1.000000\n[2,] 1.732051 2.828427\n[3,] 1.000000 1.414214\n# Operaciones lógicas elemento a elemento\na == 3      [,1]  [,2]\n[1,] FALSE FALSE\n[2,]  TRUE FALSE\n[3,] FALSE FALSE\nb > 0      [,1] [,2]\n[1,] FALSE TRUE\n[2,] FALSE TRUE\n[3,]  TRUE TRUE\na > b      [,1]  [,2]\n[1,]  TRUE FALSE\n[2,]  TRUE  TRUE\n[3,] FALSE FALSE\na < 0 | b > 0      [,1] [,2]\n[1,] FALSE TRUE\n[2,] FALSE TRUE\n[3,]  TRUE TRUE\n# Mínimo y máximo\nmin(a)[1] 1\nwhich(a == min(a)) # posición del mínimo (todas las ocurrencias)[1] 3 4\napply(a, 1, min) # valor mínimo por fila[1] 1 3 1\napply(a, 1, which.min) # posición del mínimo por fila (primer ocurrencia)[1] 2 1 1\napply(a, 1, function(x) which(x == min(x))) # pos del mín por fila (todas las ocurrencias)[1] 2 1 1\n# Sumas y promedios para un vector\nv <- c(2, 3, 9, 1, 0)\nsum(v)[1] 15\nmean(v)[1] 3\n# Sumas y promedios para una matriz, en general o para cada fila/columna\na     [,1] [,2]\n[1,]    5    1\n[2,]    3    8\n[3,]    1    2\nsum(a)[1] 20\nmean(a)[1] 3.333333\nrowSums(a)[1]  6 11  3\ncolSums(a)[1]  9 11\nrowMeans(a)[1] 3.0 5.5 1.5\ncolMeans(a)[1] 3.000000 3.666667\n# Álgebra matricial\n# Transpuesta\nt(a)     [,1] [,2] [,3]\n[1,]    5    3    1\n[2,]    1    8    2\n# Producto matricial\nd <- matrix(1:4, nrow = 2)\na %*% d     [,1] [,2]\n[1,]    7   19\n[2,]   19   41\n[3,]    5   11\n# Inversa\nsolve(d)     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n# Diagonal\ndiag(d)[1] 1 4"},{"path":"otros-tópicos.html","id":"indexación-de-vectores-matrices-y-data.frames","chapter":"7 Otros tópicos","heading":"7.4 Indexación de vectores, matrices y data.frames","text":"Como ya sabemos, indexar es hacer referencia uno o más elementos particulares dentro de una estructura de datos. Vimos que para indexar un vector, hace falta sólo un índice:Y que para indexar matrices, son necesarios dos índices:Pero también podemos hacer indexar múltiples elementos de un vector o una matriz la vez:Vector:Matriz:data.frames:Inventamos un pequeño conjunto de datos de ejemplo con la estructura de los data.frames de R:Un data.frame puede ser indexado de la misma forma empleada con matrices, por ejemplo:Para hacer referencia una variable dentro del data.frame, empleamos la estructura dataset$variable. Por ejemplo:Lo anterior resulta en un vector, con el que se pueden hacer operaciones como buscar el valor mínimo:Ejemplo: cuadrado mágicoPodemos combinar lo mencionado en esta sección para escribir una nueva versión de la función cuadrado_magico(), que desarrollamos en el ejercicio 10 de la práctica 4:","code":"\nx <- c(10.4, 5.6, 3.1, 6.4, 21.7)\nx[3][1] 3.1\na <- matrix(c(4,-2, 1, 20, -7, 12, -8, 13, 17), nrow = 3)\na     [,1] [,2] [,3]\n[1,]    4   20   -8\n[2,]   -2   -7   13\n[3,]    1   12   17\na[2, 3][1] 13\n# Mostrar los primeros tres elementos del vector x\nx[1:3][1] 10.4  5.6  3.1\n# Mostrar los elementos en las posiciones 2 y 4\nx[c(2, 4)][1] 5.6 6.4\n#Mostrar todos los elementos menos el cuarto\nx[-4][1] 10.4  5.6  3.1 21.7\n# Mostrar el último elemento\nx[length(x)][1] 21.7\n# Indexar con valores lógicos. Obtenemos sólo las posiciones indicadas con TRUE:\nx[c(F, F, T, T, F)][1] 3.1 6.4\n# Sabiendo que la siguiente operación devuelve TRUE o FALSE para cada posición de x:\nx > 10[1]  TRUE FALSE FALSE FALSE  TRUE\n# ...la podemos usar para quedarnos con aquellos elementos de x mayores a 10:\nx[x > 10][1] 10.4 21.7\n# Toda la fila 3\na[3, ][1]  1 12 17\n# Toda la columna 2\na[, 2][1] 20 -7 12\n# Submatriz con las columnas 1 y 2\na[, 1:2]     [,1] [,2]\n[1,]    4   20\n[2,]   -2   -7\n[3,]    1   12\n# Submatriz con las columnas 1 y 3\na[, c(1, 3)]     [,1] [,2]\n[1,]    4   -8\n[2,]   -2   13\n[3,]    1   17\n# Asignar el mismo valor en toda la fila 3\na[3, ] <- 10\na     [,1] [,2] [,3]\n[1,]    4   20   -8\n[2,]   -2   -7   13\n[3,]   10   10   10\nmis_datos <- data.frame(\n    altura = c(181, 165, 149, 178),\n    peso = c(85, 65, 52, 72),\n    edad = c(29, 27, 21, 32)\n)\nmis_datos  altura peso edad\n1    181   85   29\n2    165   65   27\n3    149   52   21\n4    178   72   32\nmis_datos[3:4, c(1, 3)]  altura edad\n3    149   21\n4    178   32\nmis_datos[3:4, c(\"altura\", \"edad\")]  altura edad\n3    149   21\n4    178   32\nmis_datos$altura[1] 181 165 149 178\nmin(mis_datos$altura)[1] 149\ncuadrado_magico <- function(cuadrado) {\n    # Calcular el primer total fila para tener de control\n  control <- sum(cuadrado[1, ])\n  \n  # Todos los controles\n  sumas_filas <- rowSums(cuadrado)\n  sumas_col <- colSums(cuadrado)\n  suma_diag1 <- sum(diag(cuadrado))\n  suma_diag2 <- sum(diag(cuadrado[nrow(cuadrado):1, ]))\n  sumas <- c(sumas_filas, sumas_col, suma_diag1, suma_diag2)\n  \n  # Si alguna de las sumas no es igual al control, devolver FALSE\n  if (any(sumas != control)) return(FALSE)\n  return(TRUE)\n}\n\ncuadrado <- matrix(c(16,  3,  2, 13,\n                      5, 10, 11,  8,\n                      9,  6,  7, 12,\n                      4, 15, 14,  1), nrow = 4, byrow = TRUE)\ncuadrado_magico(cuadrado)[1] TRUE\ncuadrado <- matrix(c( 0,  3,  2, 13,\n                      5, 10, 11,  8,\n                      9,  6,  7, 12,\n                      4, 15, 14,  1), nrow = 4, byrow = TRUE)\ncuadrado_magico(cuadrado)[1] FALSE"},{"path":"otros-tópicos.html","id":"generación-de-secuencias","chapter":"7 Otros tópicos","heading":"7.5 Generación de secuencias","text":"continuación mostramos cómo generar algunos vectores numéricos en R:","code":"\n# Generar vectores con secuencias numéricas\n\n# Enteros de 1 a 5\n1:5[1] 1 2 3 4 5\n# Números de 1 a 10 cada 2\nseq(1, 10, 2)[1] 1 3 5 7 9\n# Números de 0 a -1 cada -0.1\nseq(0, -1, -0.1) [1]  0.0 -0.1 -0.2 -0.3 -0.4 -0.5 -0.6 -0.7 -0.8 -0.9 -1.0\n# Siete números equiespaciados entre 0 y 1\nseq(0, 1, length.out = 7)[1] 0.0000000 0.1666667 0.3333333 0.5000000 0.6666667 0.8333333 1.0000000\n# Repetir el 1 tres veces\nrep(1, 3)[1] 1 1 1\n# Repetir (1, 2, 3) tres veces\nrep(1:3, 3)[1] 1 2 3 1 2 3 1 2 3\n# Repetir cada número tres veces\nrep(1:3, each = 3)[1] 1 1 1 2 2 2 3 3 3\n# Generar una matriz diagonal\ndiag(c(3, 7, 1, 5))     [,1] [,2] [,3] [,4]\n[1,]    3    0    0    0\n[2,]    0    7    0    0\n[3,]    0    0    1    0\n[4,]    0    0    0    5\n# Generar una matriz identidad\ndiag(rep(1, 5))     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1"},{"path":"otros-tópicos.html","id":"resolución-alternativa-de-un-ejercicio","chapter":"7 Otros tópicos","heading":"7.6 Resolución alternativa de un ejercicio","text":"Combinando todo lo mencionado hasta acá, podemos plantear una solución alternativa al ejercicio 7 de la Práctica 5.Podemos guardar todos estos resultados en un archivo:Así se ve el archivo creado:","code":"\n#----------------------------------------------------------------------------\n# PROGRAMA: Análisis de los discos de Charly García \n#----------------------------------------------------------------------------\n\n# Leer archivo\ndatos <- read.csv(\"charly.csv\")\n# Vector con los nombres de los discos\ndiscos <- c(\"Yendo de la cama al living\", \"Parte de la religión\", \n            \"Filosofía barata y zapatos de goma\", \"Say no more\", \n            \"Influencia\", \"Random\")\n\n# Crear un factor significa asignarle un nombre a cada categoría. Todos los \"1\"\n# serán reemplazados por \"Yendo de la cama al living\", los \"2\" por \"Parte de la\n# religión\", etc. Correrlo y ver cómo quedó en el data.frame.\ndatos$disco <- factor(datos$disco, levels = 1:6, labels = discos)\n\n\n# a) y b) Cantidad de canciones en cada disco ----------------------------------\n# table() indica la frecuencia absoluta de cada valor en un vector\nconteos <- table(datos$disco)\nconteos\n        Yendo de la cama al living               Parte de la religión \n                                 8                                 10 \nFilosofía barata y zapatos de goma                        Say no more \n                                11                                 14 \n                        Influencia                             Random \n                                13                                 10 \nconteos <- matrix(conteos, ncol = 1,\n                  dimnames = list(Disco = names(conteos), \"Nro de canciones\"))\nconteos                                    \nDisco                                Nro de canciones\n  Yendo de la cama al living                        8\n  Parte de la religión                             10\n  Filosofía barata y zapatos de goma               11\n  Say no more                                      14\n  Influencia                                       13\n  Random                                           10\n# Menor y mayor cantidad de canciones\nmin(conteos)[1] 8\nmax(conteos)[1] 14\n# De qué discos se trata\ndiscos[which.min(conteos)][1] \"Yendo de la cama al living\"\ndiscos[which.max(conteos)][1] \"Say no more\"\n# c) Buscar el mayor valor en energía ------------------------------------------\nmax(datos$energico)[1] 0.949\n# Cuál es la fila donde se encuentra el máximo\nwhich.max(datos$energico)[1] 48\n# Nombre de la canción con máxima energía\ndatos$tema[which.max(datos$energico)][1] \"El Amor Espera\"\n# Nombre del disco que contiene a la canción con máxima energía\ndatos$disco[which.max(datos$energico)][1] Influencia\n6 Levels: Yendo de la cama al living ... Random\n# d) Porcentaje de canciones con valor mayor a 0.5 en positivo -----------------\nporc <- 100 * mean(datos$positivo > 0.5)\nporc[1] 51.51515\n# Número de canciones con valor de positivo > 0.5\nsum((datos$positivo > 0.5))[1] 34\n# e) Tabla de distribución de frecuencias para los valores de acústico ---------\n# Con la función cut() agregamos una nueva variable al data.frame que identifica\n# a qué intervalo pertenece cada valor de acústico (hacer clic en \"datos\" en\n# Environment y observar la nueva columna)\ndatos$acustico2 <- cut(datos$acustico, breaks = seq(0, 1, 0.2))\ntabla <- table(datos$acustico2)\ntabla\n  (0,0.2] (0.2,0.4] (0.4,0.6] (0.6,0.8]   (0.8,1] \n       32        16         7         3         8 \n# prop.table() calcula proporciones, es decir, frecuencias relativas\nprop.table(tabla)\n   (0,0.2]  (0.2,0.4]  (0.4,0.6]  (0.6,0.8]    (0.8,1] \n0.48484848 0.24242424 0.10606061 0.04545455 0.12121212 \n# Entonces...\ncuadro <- cbind(tabla, round(100 * prop.table(tabla), 2))\ncolnames(cuadro) <- c(\"Frec. Abs\", \"Frec. Rel. %\")\ncuadro          Frec. Abs Frec. Rel. %\n(0,0.2]          32        48.48\n(0.2,0.4]        16        24.24\n(0.4,0.6]         7        10.61\n(0.6,0.8]         3         4.55\n(0.8,1]           8        12.12\n# f) Calcular promedios de cada variable según disco ---------------------------\n# aggregate() permite calcular el promedio de cada variable para cada grupo\n# datos[, 3:13] es la forma de indicar a qué columnas le sacamos el promedio\n# by = list(datos$disco) indica que queremos el promedio para cada disco\n# FUN = mean indica que a cada variable hay que aplicarle la función mean\npromedios <- aggregate(datos[, 3:12], by = list(Disco = datos$disco), FUN = mean)\npromedios                               Disco  bailable  energico    volumen    hablado\n1         Yendo de la cama al living 0.6837500 0.4603750 -11.991500 0.07821250\n2               Parte de la religión 0.6328000 0.7103000  -8.595500 0.03709000\n3 Filosofía barata y zapatos de goma 0.5923636 0.3843636 -17.392273 0.03637273\n4                        Say no more 0.3847857 0.4690714 -14.946929 0.04922143\n5                         Influencia 0.5774615 0.5899231  -9.732231 0.06428462\n6                             Random 0.6548000 0.7390000  -6.257800 0.03108000\n   acustico instrumental      vivo  positivo    tempo duracion\n1 0.2933375  0.021097349 0.1717625 0.5172500 105.7604 259585.0\n2 0.2783200  0.059160403 0.1407200 0.5642000 113.8903 234867.9\n3 0.1078570  0.009021264 0.1138364 0.4998818 110.0092 229543.1\n4 0.4143786  0.293317647 0.2162286 0.3436429 109.0935 238400.1\n5 0.3960287  0.077699555 0.2357000 0.5994615 109.7010 199760.9\n6 0.2022443  0.000144704 0.2617200 0.5968000 113.3571 204040.0\n# Redondear todas las columnas excepto la primera y la última\npromedios[, 2:10] <- round(promedios[, 2:10], 3)\npromedios                               Disco bailable energico volumen hablado acustico\n1         Yendo de la cama al living    0.684    0.460 -11.992   0.078    0.293\n2               Parte de la religión    0.633    0.710  -8.595   0.037    0.278\n3 Filosofía barata y zapatos de goma    0.592    0.384 -17.392   0.036    0.108\n4                        Say no more    0.385    0.469 -14.947   0.049    0.414\n5                         Influencia    0.577    0.590  -9.732   0.064    0.396\n6                             Random    0.655    0.739  -6.258   0.031    0.202\n  instrumental  vivo positivo   tempo duracion\n1        0.021 0.172    0.517 105.760 259585.0\n2        0.059 0.141    0.564 113.890 234867.9\n3        0.009 0.114    0.500 110.009 229543.1\n4        0.293 0.216    0.344 109.094 238400.1\n5        0.078 0.236    0.599 109.701 199760.9\n6        0.000 0.262    0.597 113.357 204040.0\n# g) Disco con menor promedio en bailable ----------------------------------\nmin(promedios$bailable)[1] 0.385\nwhich.min(promedios$bailable)[1] 4\npromedios$Disco[which.min(promedios$bailable)][1] Say no more\n6 Levels: Yendo de la cama al living ... Random\n# Disco con mayor promedio en instrumental\nmax(promedios$instrumental)[1] 0.293\nwhich.max(promedios$instrumental)[1] 4\npromedios$Disco[which.max(promedios$instrumental)][1] Say no more\n6 Levels: Yendo de la cama al living ... Random\n# h) Diferencia entre la duración promedio de las canciones \n# del primer disco y las del último, expresada en minutos.----------------------\ndiferencia <- (promedios$duracion[1] - promedios$duracion[6]) / 60000\ndiferencia[1] 0.92575\nsink(\"salida.txt\")\n\ncat(\"----- Cantidad de canciones en cada disco -----\\n\")\nconteos\ncat(\"\\nEl disco con menor cantidad de canciones es:\", discos[which.min(conteos)], \"\\n\")\ncat(\"El disco con mayor cantidad de canciones es:\", discos[which.max(conteos)], \"\\n\")\n\ncat(\"\\n----- Energía -----\\n\")\ncat(\"La canción con mayor valor de energía (\", max(datos$energico), \") es \", \n        datos$tema[which.max(datos$energico)], \" y pertenece\\n al disco \", \n        discos[datos$disco[which.max(datos$energico)]], \".\\n\", sep = \"\")\n\ncat(\"\\n----- Positivo -----\\n\")\ncat(\"El porcentaje de canciones con valor mayor a 0.5 en Positivo es \", porc, \n    \"%.\\n\", sep = \"\")\n\ncat(\"\\n----- Acústico -----\\n\")\ncuadro\n\ncat(\"\\n----- Promedio de cada variable según disco -----\\n\")\npromedios\n\ncat(\"\\n----- Bailable e Instrumental -----\\n\")\ncat(\"El disco con menor promedio en bailable (\", min(promedios$bailable),\n        \") es \", discos[which.min(promedios$bailable)], \".\\n\", sep = \"\")\ncat(\"El disco con mayor promedio en instrumental (\", min(promedios$instrumental),\n        \") es \", discos[which.max(promedios$instrumental)], \".\\n\", sep = \"\")\n\ncat(\"\\n----- Duración -----\\n\")\ncat(\"La diferencia entre la duración promedio de las canciones del primer disco \n        y las del último es de \", diferencia, \"minutos.\\n\")\n\nsink()----- Cantidad de canciones en cada disco -----\n                                    \nDisco                                Nro de canciones\n  Yendo de la cama al living                        8\n  Parte de la religión                             10\n  Filosofía barata y zapatos de goma               11\n  Say no more                                      14\n  Influencia                                       13\n  Random                                           10\n\nEl disco con menor cantidad de canciones es: Yendo de la cama al living \nEl disco con mayor cantidad de canciones es: Say no more \n\n----- Energía -----\nLa canción con mayor valor de energía (0.949) es El Amor Espera y pertenece al disco Influencia.\n\n----- Positivo -----\nEl porcentaje de canciones con valor mayor a 0.5 en Positivo es 51.51515%.\n\n----- Acústico -----\n          Frec. Abs Frec. Rel. %\n(0,0.2]          32        48.48\n(0.2,0.4]        16        24.24\n(0.4,0.6]         7        10.61\n(0.6,0.8]         3         4.55\n(0.8,1]           8        12.12\n\n----- Promedio de cada variable según disco -----\n                               Disco bailable energico volumen hablado acustico instrumental  vivo positivo   tempo duracion\n1         Yendo de la cama al living    0.684    0.460 -11.992   0.078    0.293        0.021 0.172    0.517 105.760 259585.0\n2               Parte de la religión    0.633    0.710  -8.595   0.037    0.278        0.059 0.141    0.564 113.890 234867.9\n3 Filosofía barata y zapatos de goma    0.592    0.384 -17.392   0.036    0.108        0.009 0.114    0.500 110.009 229543.1\n4                        Say no more    0.385    0.469 -14.947   0.049    0.414        0.293 0.216    0.344 109.094 238400.1\n5                         Influencia    0.577    0.590  -9.732   0.064    0.396        0.078 0.236    0.599 109.701 199760.9\n6                             Random    0.655    0.739  -6.258   0.031    0.202        0.000 0.262    0.597 113.357 204040.0\n\n----- Bailable e Instrumental -----\nEl disco con menor promedio en bailable (0.385) es Say no more.\nEl disco con mayor promedio en instrumental (0) es Say no more.\n\n----- Duración -----\nLa diferencia entre la duración promedio de las canciones del primer disco y las del último es de  0.92575 minutos."},{"path":"bibliografía.html","id":"bibliografía","chapter":"Bibliografía","heading":"Bibliografía","text":"Bibliografía de la asignaturaCasale, Juan Carlos (2012). Introducción la Programación. Buenos Aires: Editorial Fox Andina.Cerrada Somolinos, José y Collado Machuca, Manuel (2015). Fundamentos De Programación. Madrid: Editorial Universitaria Ramón Areces.Martínez López, Pablo (2013). Las bases conceptuales de la Programación: una nueva forma de aprender programar. La Plata: Editorial de la Universidad Nacional de Quilmes.Quetglás, Gregorio; Toledo Lobo, Francisco; Cerverón Lleó, Vicente (1995). Fundamentos de informática y programación. Valencia: Editorial V.J.Wicham, Hadley (2019). Advanced R. Florida: Editorial Chapman Hall/CRC.Textos consultados para la reseña histórica de la programación:Ada Lovelace - Wikipedia. Consultado el 21/04/21.Difference engine - Wikipedia. Consultado el 21/04/21.Generaciones de las computadoras. Consultado el 21/04/21.Generaciones de ordenadores. Consultado el 21/04/21.Historia de la programación - Wikipedia. Consultado el 21/04/21.Konrad Zuse - people.idsia.ch. Consultado el 21/04/21.Los huesos de Napier, la multiplicación árabe y tú. Consultado el 21/04/21.Significado de computación. Consultado el 21/04/21.Otros artículos consultadosAprender programación - Curso de Java. Consultado el 25/04/21.Fundamentos de programación. Consultado el 25/04/21.Hardware y software: definiciones y conceptos. Consultado el 25/04/21.Introduction programming. Consultado el 25/04/21.Programación estructurada. Consultado el 25/04/21.7 Common Types Errors Programming Avoid . Consultado el 25/04/21.abstraction programming?. Consultado el 25/04/21.","code":""}]
