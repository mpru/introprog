[{"path":"index.html","id":"bienvenida","chapter":"Bienvenida","heading":"Bienvenida","text":"¡Les damos la bienvenida la asignatura Introducción la Programación en la Facultad de Ciencias Económicas y Estadística, Universidad Nacional de Rosario! La presente guía resume los conceptos más importantes que vamos desarrollar. La misma irá siendo revisada, completada y actualizada lo largo del cuatrimestre y está exenta de presentar errores o expresar ideas que puedan ser mejoradas. Avisanos si encontrás algo que deba ser cambiado. ¡Esperamos que juntos podamos pasarla bien al dar nuestros primeros pasos en la programación!Este material fue escrito por el Mgs. Lic. Marcos Prunello (profesor titular) y revisado por los integrantes de la cátedra, Tec. César Mignoni y Lic. Maite San Martín.","code":""},{"path":"introducción-a-la-programación.html","id":"introducción-a-la-programación","chapter":"1 Introducción a la Programación","heading":"1 Introducción a la Programación","text":"","code":""},{"path":"introducción-a-la-programación.html","id":"qué-es-la-programación","chapter":"1 Introducción a la Programación","heading":"1.1 Qué es la programación","text":"Las computadoras son una parte esencial de nuestra vida cotidiana. Casi todos los aparatos que usamos tienen algún tipo de computadora capaz de ejecutar ciertas tareas: lavarropas con distintos modos de lavado, consolas de juegos para momentos de entretenimiento, calculadoras súper potentes, computadoras personales que se usan para un montón de propósitos, teléfonos celulares con un sinfín de aplicaciones y miles de cosas más.Todos estos dispositivos con computadoras de distinto tipo tienen algo en común: alguien “les dice” cómo funcionar, es decir, les indica cuáles son los pasos que deben seguir para cumplir una tarea. De eso se trata la programación: es la actividad mediante la cual las personas le entregan una computadora un conjunto de instrucciones para que, al ejecutarlas, ésta pueda resolver un problema. Quienes realizan esta actividad reciben el nombre de programadores. Sin las personas que las programen, las computadoras dejan de ser útiles, por más complejos que sean estos aparatos. Los conjuntos de instrucciones que reciben las computadoras reciben el nombre de programas.La programación es un proceso creativo: en muchas ocasiones la tarea en cuestión puede cumplirse siguiendo distintos caminos y el programador es el que debe imaginar cuáles son y elegir uno. Algunos de estos caminos pueden ser mejores que otros, pero en cualquier caso la computadora se limitará seguir las instrucciones ideadas por el programador.Desafortunadamente, las computadoras entienden español ni otro idioma humano. Hay que pasarles las instrucciones en un lenguaje que sean capaces de entender. Para eso debemos aprender algún lenguaje de programación, que es más que un lenguaje artificial compuesto por una serie de expresiones que la computadora puede interpretar. Las computadoras interpretan nuestras instrucciones de forma muy literal, por lo tanto la hora de programar hay que ser muy específicos. Es necesario respetar las reglas del lenguaje de programación y ser claros en las indicaciones provistas.Ahora bien, ¿por qué debemos estudiar programación en la Licenciatura en Estadística? La actividad de los profesionales estadísticos está atravesada en su totalidad por la necesidad de manejar con soltura herramientas informáticas que nos asisten en las distintas etapas de nuestra labor, desde la recolección y depuración de conjuntos de datos, pasando por la aplicación de distintas metodologías de análisis, hasta la comunicación efectiva de los resultados. Por eso, en la asignatura Introducción la Programación estudiaremos los conceptos básicos de esta disciplina, fomentando la ejercitación del pensamiento abstracto y lógico necesario para poder entendernos hábilmente con la computadora y lograr que la misma realice las tareas que necesitamos.Para poner en práctica los conceptos sobre Programación que aprenderemos, vamos emplear un lenguaje que ha sido desarrollado específicamente para realizar tareas estadísticas, llamado R. Sin embargo, debemos resaltar que éste es un curso sobre R, es decir, nos dedicaremos aprender las herramientas que este lenguaje brinda para el análisis de datos. De hecho, frente variados problemas vamos dedicarnos crear soluciones que ya existen y están disponibles en R, pero lo haremos con el fin de utilizar dicho lenguaje para aprender y ejercitar nociones básicas de programación.","code":""},{"path":"introducción-a-la-programación.html","id":"una-breve-reseña-histórica-sobre-la-programación","chapter":"1 Introducción a la Programación","heading":"1.2 Una breve reseña histórica sobre la programación","text":"La historia de la programación está vinculada directamente con la de la computación. Esta palabra proviene del latín computatio, que deriva del verbo computare, cuyo significado es “enumerar cantidades”. Computación, en este sentido, designa la acción y efecto de computar, realizar una cuenta, un cálculo matemático. De allí que antiguamente computación fuese un término usado para referirse los cálculos realizados por una persona con un instrumento expresamente utilizado para tal fin (como el ábaco, por ejemplo) o sin él. En este sentido, la computación ha estado presente desde tiempos ancestrales, sin embargo debemos remontarnos al siglo XVII para encontrar los primeros dispositivos diseñados para automatizar cómputos matemáticos.En 1617 el matemático escocés John Napier (el mismo que definió los logaritmos) inventó un sistema conocido como los huesos de Napier o huesos neperianos que facilitaba la tarea de multiplicar, dividir y tomar raíces cuadradas, usando unas barras de hueso o marfil que tenían dígitos grabados. Esta fue la base para otras ideas más avanzadas, entre ellas la que dio origen la primera calculadora mecánica, inventada por el alemán Wilhelm Schickard en 1623, capaz de realizar cómputos aritméticos sencillos funcionando base de ruedas y engranajes. Se componía de dos mecanismos diferenciados, un ábaco de Napier de forma cilíndrica en la parte superior y un mecanismo en la inferior para realizar sumas parciales de los resultados obtenidos con el aparato de la parte superior. Fue llamado reloj calculador. partir de aquí se fueron desarrollando otros modelos, todos ellos teniendo en común el hecho de ser puramente mecánicos, sin motores ni otras fuentes de energía. El operador ingresaba números ubicando ruedas de metal en posiciones particulares y al girarlas otras partes de la máquina se movían y mostraban el resultado. Algunos ejemplos son las calculadoras del inglés William Oughtred en 1624, de Blaise Pascal en 1645 (llamada pascalina), la de Samuel Morland en 1666 y las de Leibniz, en 1673 y 1694.\nFigura 1.1: De izquierda derecha: los huesos de Napier (Museo Arqueológico Nacional de España), el reloj calculador de Schickard (Museo de la Ciencia de la Universidad Pública de Navarra) y una pascalina del año 1952\nEl siglo XVIII trajo consigo algunos otros diseños, pero un gran salto se dio comienzos del siglo XIX de mano de un tejedor y comerciante francés, Joseph Jacquard. En 1801 creó un telar que tenía un sistema de tarjetas perforadas para controlar las puntadas del tejido, de forma que fuera posible programar una gran diversidad de tramas y figuras. Sin saberlo, Jacquard sentó una idea fundamental para la creación de las computadoras.\nFigura 1.2: Un telar de Jacquard y sus tarjetas perforadas en el Museo de la ciencia y la industria en Mánchester.\nEn 1822 el matemático británico Charles Babbage publicó un diseño para la construcción de una máquina diferencial, que podía calcular valores de funciones polinómicas mediante el método de las diferencias. Este complejo sistema de ruedas y engranajes era el primero que podía trabajar automáticamente utilizando resultados de operaciones previas. Si bien el diseño era viable, por motivos técnicos y económicos lo pudo concretar (sólo construyó un modelo de menor escala). Sin embargo, Babbage se dio por vencido y en 1837 presentó el diseño de una máquina analítica, un aparato capaz de ejecutar cualquier tipo de cálculo matemático y que, por lo tanto, se podría utilizar con cualquier propósito. Tal como el telar de Jacquard, la operación de esta máquina sería controlada por un patrón de perforaciones hechas sobre una tarjetas que la misma podría leer. Al cambiar el patrón de las perforaciones, se podría cambiar el comportamiento de la máquina para que resuelva diferentes tipos de cálculos. Para la salida de resultados, la máquina sería capaz de perforar tarjetas. Además, funcionaría con un motor vapor y su tamaño hubiese sido de 30 metros de largo por 10 de ancho. Si bien Babbage tampoco llegó concretar en vida este diseño que dejó plasmado en más de 300 dibujos y 2200 páginas por motivos políticos, se lo considera como la primera conceptualización de lo que hoy conocemos como computadora, por lo cual Babbage es conocido como el padre de la computación.En 1843 Lady Ada Lovelace, una matemática y escritora británica, publicó una serie de notas sobre la máquina analítica de Babbage, en las que resaltaba sus potenciales aplicaciones prácticas, incluyendo la descripción detallada de tarjetas perforadas para que sea capaz de calcular los números de Bernoulli. Al haber señalado los pasos para que la máquina pueda cumplir con estas y otras tareas, Ada es considerada actualmente como la primera programadora del mundo, pesar de que en la época fue tomada en serio por la comunidad científica, principalmente por su condición de mujer.\nFigura 1.3: Charles Babbage, Ada Lovelace y el algoritmo que publicó Ada para calcular los números de Bernoulli con la máquina analística de Charles.\nLa utilidad de las tarjetas perforadas quedó confirmada en 1890, cuando Herman Hollerith las utilizó para automatizar la tabulación de datos en el censo de Estados Unidos. Las perforaciones en determinados lugares representaban información como el sexo o la edad de las personas, logrando que se pudieran lograr clasificaciones y conteos de forma muy veloz. Así, se tardaron sólo 3 años en procesar la información del censo, cinco años menos que en el anterior de 1880. Con el fin de comercializar esta tecnología, Hollerith fundó una compañía que terminaría siendo la famosa International Business Machine (IBM), empresa líder en informática hasta el día de hoy.Sin embargo, la visión de Babbage de una computadora programable se hizo realidad hasta los años 1940, cuando el advenimiento de la electrónica hizo posible superar los dispositivos mecánicos existentes. John Atanasoff y Clifford Barry (Iowa State College, Estados Unidos) terminaron en 1942 en Iowa State College (Estados Unidos) una computadora electrónica capaz de resolver sistemas de ecuaciones lineales simultáneas, llamada ABC (por “Atanasoff Berry Computer”). La misma contaba con 300 tubos de vacíos, unas bombillas de vidrio con ciertos componentes que podían recibir y modificar una señal eléctrica mediante el control del movimiento de los electrones produciendo una respuesta, que habían sido presentados por primera vez en 1906 por el estadounidense Lee De Forest. La ABC dio comienzo la conocida como la primera generación de computadoras basadas en el empleo de tubos de vacío.La primera computadora electrónica de propósito general fue la ENIAC, Electronic Numerical Integrator Computer, completada por Presper Eckert y John Mauchly en la Universidad de Pensilvania. Podía realizar cinco mil operaciones aritmética por segundo y tenía más de 18000 tubos de vacío, ocupando una sala de 9x15 metros en un sótano de la universidad donde se montó un sistema de aire acondicionado especial.Ni la ABC ni la ENIAC eran reprogramables: la ABC servía el propósito específico de resolver sistemas de ecuaciones y la ENIAC era controlada conectando ciertos cables en un panel, lo que hacía muy complejo su programación. El siguiente gran avance se produjo en 1945, cuando el matemático húngaro-estadounidense John von Neumann (Universidad de Princeton) propuso que los programas, es decir, las instrucciones para que la máquina opere, y también los datos necesarios, podrían ser representados y guardados en una memoria electrónica interna. Así nació el concepto de programa almacenado (o stored-program), en contraposición con el uso de tableros de conexiones y mecanismos similares de los modelos vigentes. Los creadores de la ENIAC, bajo la consultoría de von Neumann, implementaron esto en el diseño de su sucesora, la EDVAC, terminada en 1949.\nTambién ya había experimentado con esta idea en el continente veijo el alemán Konrad Zuse, quien entre 1937 y 1941 desarrolló la Z3, por lo cual es considerada por algunos como la primera máquina completamente automática y programable. En lugar de usar tubos de vacíos, empleaba un conjunto de 2600 relés, unos dispositivos electromagnéticos inventados en 1835 y empleados, por ejemplo, en telegrafía.\n\nEl modelo original de la Z3 fue destruido en Berlín por un bombardeo durante la segunda guerra mundial.\nFigura 1.4: De izquierda derecha: las computadoras ABC, ENIAC y Z3\nEste nuevo paradigma cambió la historia de la computación, como también lo hizo la invención del transistor en 1947 en los Laboratorios Bell. Un transistor es un dispositivo electrónico semiconductor que entrega una señal de salida en respuesta una señal de entrada, mucho más pequeño que los tubos de vacío y que consumen menos energía eléctrica. Así, una computadora podía tener cientos de miles de transistores, obstante ocupando mucho espacio.Desde entonces, la computación ha evolucionado muy rápidamente, con la introducción de nuevos sistemas y conceptos, que llegan los complejos y poderosos diseños electrónicos que caracterizan la vida actual. En un intento de caracterizar y resumir esta impactante evolución, algunos historiadores dividen al desarrollo de las computadoras modernas en “generaciones” (esta clasificación es única y existen diversas versiones de la misma):Primera generación (aprox. 1940-1958): se trata de las computadoras electrónicas que usaban tubos de vacío para su circuito interno. Los equipos eran enormes y ocupan habitaciones enteras. Consumían mucha electricidad y generaban demasiado calor. Podía llevar días o semanas modificar las conexiones para hacer que la computadora resuelva un problema diferente. Usaban tarjetas perforadas y cinta de papel para la lectura de datos e impresiones para mostrar las salidas.Segunda generación (aprox. 1958-1964): se caracteriza por el uso de transistores (inventados en 1947) en lugar de tubos de vacío, permitiendo que las computadoras tengan un consumo eléctrico más eficiente, sean más baratas, más pequeñas y más rápidas.Tercera generación (aprox. 1964-1971): se inició en 1959 con el desarrollo de un circuito integrado (“chip”) que se trata de una pequeña placa de silicio sobre el cual se imprime un gran número de transistores conectados. La primera computadora de este estilo fue de IBM en 1960. Al ser más pequeñas y baratas, su uso llegó una mayor audiencia. Se pudo interactuar con la máquina mediante teclados, monitores y un sistema operativo, que posibilitaba ejecutar múltiples acciones la vez bajo el monitoreo de un programa central.Cuarta generación (aprox. 1971-presente): los avances tecnológicos permitieron construir la unidad entera de procesamiento de una computadora sobre un único chip de silicio (microprocesador), incluyendo la memoria y los controles de entrada y salida de datos. Todo lo que en una computadora de la primera generación ocupaba una habitación entera, fue capaz de entrar en la palma de una mano. El primer microprocesador fue el Intel 4004 de 1971, mientras que la primera computadora de uso doméstico fue desarrollada por IBM en 1981. Surgieron también en esta generación el ratón (mouse) y las interfaces gráficas de usuario (como Windows, en 1985).\nFigura 1.5: De derecha izquierda: un tubo de vacío, un transistor y un chip.\n","code":""},{"path":"introducción-a-la-programación.html","id":"software-y-hardware","chapter":"1 Introducción a la Programación","heading":"1.3 Software y hardware","text":"Como podemos ver, en la historia de la computación hubo dos aspectos que fueron evolucionando: las máquinas y los programas que las dirigen. Hacemos referencia estos elementos como hardware y software respectivamente, y es la conjunción de ambos la que le da vida la computación y hace posible la programación.\nFigura 1.6: Representación de la diferencia entre hardware y software.\nEl hardware es el conjunto de piezas físicas y tangibles de la computadora. Existen diversas formas de clasificar los elementos que componene al hardware, según distintos criterios:Table: (#tab:hardware) Clasificación del hardware.Por otro lado tenemos al software, que es el conjunto de todos los programas (es decir, todas las instrucciones que recibe la computadora) que permiten que el hardware funcione y que se pueda concretar la ejecución de las tareas. tiene una existencia física, sino que es intangible. El software se puede clasificar de la siguiente forma:Table: (#tab:software) Clasificación del software.","code":""},{"path":"introducción-a-la-programación.html","id":"problemas-algoritmos-y-lenguajes-de-programación","chapter":"1 Introducción a la Programación","heading":"1.4 Problemas, algoritmos y lenguajes de programación","text":"Mencionamos anteriormente que la programación consistía en instruir una computadora para que resuelva un problema y que la comunicación de esas instrucciones debe ser realizada de forma clara. Es por eso que, ante un problema que debe ser resuelto computacionalmente, el primer paso es pensar detalladamente cuál puede ser una forma de resolverlo, es decir, crear un algoritmo. Un algoritmo es una estrategia consistente de un conjunto ordenado de pasos que nos lleva la solución de un problema o alcance de un objetivo. Luego, hay que traducir el algoritmo elegido al idioma de la computadora.Entonces, podemos decir que la resolución computacional de un problema consiste de dos etapas básicas:Diseño algorítmico: desarrollar un algoritmo, o elección de uno existente, que resuelva el problema.Codificación: expresar un algoritmo en un lenguaje de programación para que la computadora lo pueda interpretar y ejecutar.Al aprender sobre programación, comenzamos enfrentándonos problemas simples para los cuales la primera etapa parece sencilla, mientras que la codificación se torna dificultosa ya que hay que aprender las reglas del lenguaje de programación. Sin embargo, mientras que con práctica rápidamente podemos ganar facilidad para la escritura de código, el diseño algorítmico se torna cada vez más desafiante al encarar problemas más complejos. Es por eso que haremos hincapié en el planteo y desarrollo de algoritmos como una etapa fundamental en la programación.","code":""},{"path":"introducción-a-la-programación.html","id":"el-diseño-algorítmico","chapter":"1 Introducción a la Programación","heading":"1.4.1 El diseño algorítmico","text":"Cotidianamente, hacemos uso de algoritmos para llevar adelante casi todas las actividades que realizamos: preparar el desayuno, sacar pasear la mascota, poner en la tele un servicio de streaming para ver una película, etc. Cada una de estas tareas requiere llevar adelante algunas acciones de forma ordenada, aunque hagamos un listado de las mismas y procedamos casi sin pensar.Sin embargo, cuando estamos pensando la solución para un problema que va resolver una computadora, debemos ser claros y concretos, para asegurarnos de que al seguir los pasos del algoritmo se llegue la solución y para que quien tenga que codificarlos, nosotros mismos u otras personas, lo pueda entender sin problemas. Por eso, el primer paso es idear un algoritmo para su solución y expresarlo por escrito, por ejemplo, en español, pero adaptando el lenguaje humano formas lógicas que se acerquen las tareas que puede realizar una computadora. En programación, el lenguaje artificial e informal que usan los desarrolladores en la confección de algoritmos recibe el nombre de pseudocódigo. Es la herramienta que utilizamos para describir los algoritmos mezclando el lenguaje común con instrucciones de programación. es en sí mismo un lenguaje de programación, es decir, la computadora es capaz de entenderlo, sino que el objetivo del mismo es que el programador se centre en la solución lógica y luego lo utilice como guía al escribir el programa.El pseudocódigo, como cualquier otro lenguaje, está compuesto por:Un léxico: conjunto de palabras o frases válidas para escribir las instrucciones.Una sintaxis: reglas que establecen cómo se pueden combinar las distintas partes.Una semántica: significado que se les da las palabras o frases.El pseudocódigo sigue una estructura secuencial: define una acción o instrucción que sigue otra en secuencia. Esta estructura puede representarse de la siguiente forma:Se comienza con un título que describa el problema que el algoritmo resuelve, seguido por la palabra COMENZAR. Luego se detallan las acciones o instrucciones seguir y se concluye con la palabra FIN. Por ejemplo, si nuestro problema es poner en marcha un auto, el algoritmo para resolverlo puede ser expresado mediante el siguiente pseudocódigo:Es importante destacar la presencia de sangrías (sangrado) en el ejemplo anterior, que facilitan la lectura.Los algoritmos suelen ser representados también mediante diagramas de flujo, como el que se muestra en la siguiente figura1.\nFigura 1.7: Ejemplo del algoritmo “Arrancar el auto” representado gráficamente con un diagrama de flujo.\n","code":"ALGORITMO: \"Ejemplo\"\nCOMENZAR\n    Acción 1\n    Acción 2\n    ...\n    Acción N\nFINALGORITMO: \"Arrancar el auto\"\nCOMENZAR\n    INSERTAR la llave de contacto\n    UBICAR el cambio en punto muerto\n    GIRAR la llave hasta la posición de arranque\n    SI el motor arranca \n        ENTONCES\n            DEJAR la llave en posición \"encendido\"\n        SI NO\n            LLAMAR al mecánico\n    FINSI\nFIN"},{"path":"introducción-a-la-programación.html","id":"codificación","chapter":"1 Introducción a la Programación","heading":"1.4.2 Codificación","text":"El algoritmo anterior está presentado en pseudocódigo utilizando el lenguaje español, una opción razonable para compartir esta estrategia entre personas que se comuniquen con este idioma. Claramente, si queremos presentarle nuestro algoritmo alguien que sólo habla francés, el español ya sería una buena elección, y mucho menos si queremos presentarle el algoritmo una computadora. Para que una computadora pueda entender nuestro algoritmo, debemos traducirlo en un lenguaje de programación, que, como dijimos antes, es un idioma artificial diseñado para expresar cómputos que puedan ser llevados cabo por equipos electrónicos, es decir es un medio de comunicación entre el humano y la máquina.Si bien hay distintos lenguajes de programación, una computadora en definitiva es un aparato que sólo sabe hablar en binario, es decir, sólo interpreta señales eléctricas con dos estados posibles, los cuales son representados por los dígitos binarios 0 y 1. Toda instrucción que recibe la computadora se construye mediante una adecuada y larga combinación de ceros y unos2. Este sistema de código con ceros y unos que la computadora interpreta como instrucciones o conjuntos de datos se llama lenguaje de máquina (o código de máquina).Programar en lenguaje de máquina es muy complejo y lento, y es fácil cometer errores pero es difícil arreglarlos. Por eso principios de la década de 1950 se inventaron los lenguaje ensambladores, que usan palabras para representar simbólicamente las operaciones que debe realizar la computadora. Cada una de estas palabras reemplaza un código de máquina binario, siendo un poco más fácil programar. Imaginemos que deseamos crear un programa que permita sumar dos números elegidos por una persona. La computadora puede hacer esto si se lo comunicamos mediante un mensaje compuesto por una larga cadena de ceros y unos (lenguaje de máquina) que simple vista podríamos entender. Sin embargo, escrito en lenguaje de máquina, el programa se vería así (por ejemplo):\nFigura 1.8: Programa en lenguaje ensamblador para leer dos números, sumarlos y mostrar el resultado. Al final de cada línea hay una descripción de la operación realizada.\nEl programa que se encarga de traducir esto al código de máquina se llama ensamblador. pesar de que haya ceros y unos como en el lenguaje de máquina, probablemente el código anterior tampoco sea fácil de entender. Aparecen instrucciones que tal vez podemos interpretar, como add por sumar o sub por substraer, pero está lleno de cálculos hexadecimales, referencias posiciones en la memoria de la computadora y movimientos de valores que lo hacen muy amigable. Por eso, pesar de que la existencia de los lenguajes ensambladores simplificó mucho la comunicación con la computadora, se hizo necesario desarrollar lenguajes que sean aún más sencillos de usar.Por ejemplo, con el lenguaje que vamos aprender, R, el problema de pedirle dos números una persona y sumarlos se resumen en las siguientes líneas de código:En las dos primeras líneas con la sentencia scan() (que quiere decir “escanear”, “leer”) se le pide la persona que indique dos números y en la tercera línea se muestra el resultado de la suma, con la sentencia print() (“imprimir”, “mostrar”). Mucho más corto y entendible.Esta simplificación es posible porque nos permitimos ignorar ciertos aspectos del proceso que realiza la computadora. Todas esas acciones que se ven ejemplificadas en la imagen con el código ensamblador se llevan cabo de todas formas, pero lo vemos. Nosotros sólo tenemos que aprender esas últimas tres líneas de código, de forma que nos podemos concentrar en el problema resolver (ingresar dos números, sumarlos y mostrar el resultado) y en las complejas operaciones internas que tiene que hacer el microprocesador.En programación, la idea de simplificar un proceso complejo ignorando algunas de sus partes para comprender mejor lo que hay que realizar y así resolver un problema se conoce como abstracción3. Esto quiere decir que los lenguajes de programación pueden tener distintos niveles de abstracción:Lenguajes de bajo nivel de abstracción: permiten controlar directamente el hardware de la computadora, son específicos para cada tipo de máquina, y son más rígidos y complicados de entender para nosotros. El lenguaje ensamblador entra en esta categoría.Lenguajes de alto nivel de abstracción: diseñados para que sea fácil para los humanos expresar los algoritmos sin necesidad de entender en detalle cómo hace exactamente el hardware para ejecutarlos. El lenguaje que utilizaremos en este taller, R, es de alto nivel. Son independientes del tipo de máquina.Lenguajes de nivel medio de abstracción: son lenguajes con características mixtas entre ambos grupos anteriores.\nFigura 1.9: Distintos lenguajes de programación y sus logos.\nSi bien podemos programar usando un lenguaje de alto nivel para que nos resulte más sencillo, alguien o algo debe traducirlo lenguaje de máquina para que la computadora, que sólo entiende de ceros y unos, pueda realizar las tareas. Esto también es necesario incluso si programáramos en lenguaje ensamblador. Para estos procesos de traducción se crearon los compiladores e intérpretes.Un compilador es un programa que toma el código escrito en un lenguaje de alto nivel y lo traduce código de máquina, guardándolo en un archivo que la computadora ejecutará posteriormente (archivo ejecutable). Para ilustrar el rol del compilador, imaginemos que alguien que sólo habla español le quiere mandar una carta escrita en español alguien que vive en Alemania y sólo habla alemán. Cuando esta persona la reciba, la va entender. Se necesita de un intermediario que tome la carta en español, la traduzca y la escriba en alemán y luego se la mande al destinatario, quien ahora sí la podrá entender. Ese es el rol de un compilador en la computadora. Ahora bien, el resultado de la traducción, que es la carta escrita en alemán, sólo sive para gente que hable alemán. Si se quiere enviar el mismo mensaje personas que hablen otros idiomas, necesitaremos hacer la traducción que corresponda. De la misma forma, el código generado por un compilador es específico para cada máquina, depende de su arquitectura.Además de los compiladores, para realizar este pasaje también existen los intérpretes. Un intérprete es un programa que traduce el código escrito en lenguaje de alto nivel código de máquina, pero lo va haciendo medida que se necesita, es decir, su resultado reside en la memoria temporal de la computadora y se genera ningún archivo ejecutable. Siguiendo con el ejemplo anterior, es similar viajar Alemania con un intérprete que nos vaya traduciendo en vivo y en directo cada vez que le queramos decir algo alguien de ese país. En su implementación por defecto, el lenguaje R es interpretado, compilado.Concluyendo, gracias al concepto de la abstracción podemos escribir programas en un lenguaje que nos resulte fácil entender, y gracias al trabajo de los compiladores e intérpretes la computadora podrá llevar adelante las tareas necesarias.Cada una de las acciones que componen al algoritmo son codificadas con una o varias instrucciones o sentencias, expresadas en el lenguaje de programación elegido, y el conjunto de todas ellas constituye un programa. El programa se guarda en un archivo con un nombre generalmente dividido en dos partes por un punto, por ejemplo: mi_primer_programa.R. La primera parte es la raíz del nombre con la cual podemos describir el contenido del archivo. La segunda parte es indicativa del uso del archivo, por ejemplo, .R indica que contiene un programa escrito en el lenguaje R. El proceso general de ingresar o modificar el contenido de un archivo se denomina edición.","code":"n1 <- scan()\nn2 <- scan()\nprint(n1 + n2)"},{"path":"introducción-a-la-programación.html","id":"errores-de-programación","chapter":"1 Introducción a la Programación","heading":"1.5 Errores de programación","text":"Apenas iniciemos nuestro camino en el mundo de la programación nos daremos cuenta que tendremos siempre ciertos compañeros de viaje: los errores. Muchas veces nos pasará que queremos ejecutar nuestro código y el mismo anda o produce el resultado esperado. importa cuán cuidadosos seamos, ni cuánta experiencia tengamos, los errores están siempre presentes. Con el tiempo y práctica, vamos poder identificarlos y corregirlos con mayor facilidad, pero probablemente nunca dejemos de cometerlos.los errores en programación se los suele llamar bugs (insecto o bicho en inglés) y el proceso de la corrección de los mismos se conoce como debugging (depuración)4. Se dice que esta terminología proviene de 1947, cuando una computadora en la Universidad de Harvard (la Mark II) dejó de funcionar y finalmente se descubrió que la cause del problema era la presencia de una polilla en un relé electromagnético de la máquina. Sin embargo, otros historiadores sostienen que el término ya se usaba desde antes.\nFigura 1.10: La polilla (bug) encontrada por la científica de la computación Grace Hooper en la Mark II fue pegada con cinta en un reporte sobre el malfuncionamiento de la máquina.\ncontinuación se presenta una de las posibles clasificaciones de los errores que se pueden cometer en programación:Errores de sintaxis. Tal como el lenguaje humano, los lenguajes de programación tienen su propio vocabulario y su propia sintaxis, que es el conjunto de reglas gramaticales que establecen cómo se pueden combinar las distintas partes. Estas reglas sintácticas determinan que ciertas sentencias están correctamente construidas, mientras que otras . Cuando ejecutamos un programa, el compilador o el intérprete chequea si el mismo es sintácticamente correcto. Si hemos violado alguna regla, por ejemplo, nos faltó una coma o nos sobra un paréntesis, mostrará un mensaje de error y debemos editar nuestro programa para corregirlo. En estos casos, hay que interpretar el mensaje de error, revisar el código y corregir el error.Errores de sintaxis. Tal como el lenguaje humano, los lenguajes de programación tienen su propio vocabulario y su propia sintaxis, que es el conjunto de reglas gramaticales que establecen cómo se pueden combinar las distintas partes. Estas reglas sintácticas determinan que ciertas sentencias están correctamente construidas, mientras que otras . Cuando ejecutamos un programa, el compilador o el intérprete chequea si el mismo es sintácticamente correcto. Si hemos violado alguna regla, por ejemplo, nos faltó una coma o nos sobra un paréntesis, mostrará un mensaje de error y debemos editar nuestro programa para corregirlo. En estos casos, hay que interpretar el mensaje de error, revisar el código y corregir el error.Errores lógicos. Se presentan cuando el programa puede ser compilado sin errores pero arroja resultados incorrectos o ningún resultado. El software muestra mensajes de error, debido que, por supuesto, sabe cuál es el resultado deseado, sino que sólo se limita hacer lo que hemos programado. En estos casos hay que revisar el programa para encontrar algún error en su lógica. Este tipo de errores suelen ser los más problemáticos. Algunas ideas para enfrentarlos incluyen volver pensar paso por paso lo que se debería hacer para solucionar el problema y compararlo con lo que se ha programado, agregar pasos para mostrar resultados intermedios o emplear herramientas especializadas de debugging (llamadas debugger) para explorar el código paso paso hasta identificar el error.Errores lógicos. Se presentan cuando el programa puede ser compilado sin errores pero arroja resultados incorrectos o ningún resultado. El software muestra mensajes de error, debido que, por supuesto, sabe cuál es el resultado deseado, sino que sólo se limita hacer lo que hemos programado. En estos casos hay que revisar el programa para encontrar algún error en su lógica. Este tipo de errores suelen ser los más problemáticos. Algunas ideas para enfrentarlos incluyen volver pensar paso por paso lo que se debería hacer para solucionar el problema y compararlo con lo que se ha programado, agregar pasos para mostrar resultados intermedios o emplear herramientas especializadas de debugging (llamadas debugger) para explorar el código paso paso hasta identificar el error.Errores en la ejecución (runtime errors). Se presentan cuando el programa está bien escrito, sin errores lógicos ni sintácticos, pero igualmente se comporta de alguna forma incorrecta. Se dan pesar de que el programa ande bien en el entorno de desarrollo del programador, pero cuando algún usuario lo utiliza en algún contexto particular. Puede ser que se intente abrir un archivo que existe, que el proceso supere la memoria disponible, que tomen lugar operaciones aritméticas definidas como la división por cero, etc.Errores en la ejecución (runtime errors). Se presentan cuando el programa está bien escrito, sin errores lógicos ni sintácticos, pero igualmente se comporta de alguna forma incorrecta. Se dan pesar de que el programa ande bien en el entorno de desarrollo del programador, pero cuando algún usuario lo utiliza en algún contexto particular. Puede ser que se intente abrir un archivo que existe, que el proceso supere la memoria disponible, que tomen lugar operaciones aritméticas definidas como la división por cero, etc.Los errores en la programación son tan comunes, que un científico de la computación muy reconocido, Edsger Dijkstra, dijo una vez: “si la depuración es el proceso de eliminar errores, entonces la programación es el proceso de generarlos”. Ante la presencia de uno, hay más que respirar profundo y con paciencia revisar hasta encontrarlo y solucionarlo.\nFigura 1.11: Encontrando un bug en un programa.\n","code":""},{"path":"introducción-a-la-programación.html","id":"procesador-ambiente-y-acciones","chapter":"1 Introducción a la Programación","heading":"1.6 Procesador, ambiente y acciones","text":"Hemos definido un algoritmo como una lista de instrucciones para resolver un problema. En este contexto, se entiende por procesador todo agente capaz de comprender los pasos de un algoritmo y ejecutar el trabajo indicado por el mismo. Para cumplir con el objetivo, el procesador emplea ciertos recursos que tiene disposición. Todos los elementos disponibles para ser utilizados por el procesador constituyen su entorno o ambiente. Cada una de las instrucciones que componen el algoritmo modifican el entorno de alguna manera y se denominan acciones.Ejemplificaremos estos conceptos con los siguientes ejemplos:Ejemplo 1Problema: preparar una tortilla de 6 huevos.Entorno: una mesa, una hornalla, una sartén, un plato, un tenedor, aceite, una fuente con huevos, un tarro de basura.Procesador: una persona adulta.Acciones comprensibles por el procesador: agarrar un huevo, romper un huevo en un plato, batir huevos, poner aceite, poner en la sartén, poner al fuego, retirar del fuego, tirar las cáscaras, encender el fuego.¿Cuál es un algoritmo adecuado para solucionar este problema? Podría ser:Ejemplo 2Problema: calcular el factorial del número 5.Entorno: se dispone de una calculadora común.Procesador: una persona adulta.Acciones comprensibles por el procesador: pulsar teclas de la calculadora.¿Cuál es un algoritmo adecuado para solucionar este problema? Podría ser:Las acciones del algoritmo pueden clasificarse en función de su complejidad:Acción primitiva: acción sencilla directamente realizable por el procesador sin necesidad de contar con mayor información.Acción compuesta: acción integrada por una sucesión de acciones primitivas.La descripción de un algoritmo en términos de acciones compuestas puede facilitar su comprensión, pero al desarrollar el programa será necesario descomponerlas en acciones primitivas que son las que realmente ejecuta el procesador. Por ejemplo, la acción compuesta en el ejemplo de la tortilla de “romper seis huevos en un plato” puede descomponerse en acciones más simples:En el contexto de la resolución de un problema computacional, el procesador será la computadora; las acciones estarán dadas por las sentencias disponibles en el lenguaje de programación utilizado o las que podamos crear en base al mismo; y el ambiente estará constituido por un conjunto de variables, estructuras de datos, funciones y otros elementos que serán de utilidad en la programación.","code":"ALGORITMO: \"Preparar una tortilla de 6 huevos\"\nCOMENZAR\n    ROMPER seis huevos en un plato\n    TIRAR las cáscaras en el tacho\n    BATIR los huevos\n    CALENTAR aceite en la sartén\n    PONER el contenido del plato en la sartén\n    ESPERAR diez minutos\n    RETIRAR la tortilla del fuego\n    APAGAR el fuego\nFINALGORITMO: \"Calcular 5!\"\nCOMENZAR\n    PULSAR [ON]\n    PULSAR [1]\n    PULSAR [X]\n    PULSAR [2]\n    PULSAR [X]\n    PULSAR [3]\n    PULSAR [X]\n    PULSAR [4]\n    PULSAR [X]\n    PULSAR [5]\n    PULSAR [=]\n    MOSTRAR la pantalla\nFINREPETIR 6 VECES\n    TOMAR un huevo\n    GOLPEAR el huevo para generar una fractura en la cáscara\n    EJERCER presión sobre la cáscara\n    DERRAMAR la clara y la yema sobre el plato"},{"path":"introducción-a-la-programación.html","id":"r-y-rstudio","chapter":"1 Introducción a la Programación","heading":"1.7 R y RStudio","text":"Como dijimos anteriormente, pondremos en práctica los conceptos sobre programación utilizando R, un lenguaje orientado la realización de procesos estadísticos y gráficos. diferencia de muchos otros, este es un software libre y gratuito: se distribuye bajo la licencia GNU GPLv2 que establece la libertad de usarlo con cualquier propósito, de ver cómo fue hecho, cómo funciona y modificarlo, de distribuir copias y crear contribuciones y agregados para que estén disponibles para otros 5.Si bien R será nuestro medio de comunicación con la computadora, vamos usar otro programa que brinda algunas herramientas para facilitar nuestro trabajo de programación, es decir, vamos usar un entorno de desarrollo integrado (o IDE, por integrated development environment). Un IDE es un programa que hace que la codificación sea más sencilla porque permite manejar varios archivos de código, visualizar el ambiente de trabajo, utilizar resaltado con colores para distintas partes del código, emplear autocompletado para escribir más rápido, explorar páginas de ayuda, implementar estrategias de depuración e incluso intercalar la ejecución de sentencias con la visualización de los resultados mientras avanzamos en el análisis o solución del problema. El IDE más popularmente empleado para programar con R es RStudio y será el programa que estaremos usando todo el tiempo.Para instalar estos programas, se debe visitar las páginas oficiales de R y de RStudio, descargar los instaladores y ejecutarlos. En este enlace se presenta un video con la instalación completa.","code":""},{"path":"introducción-a-la-programación.html","id":"organización-de-rstudio","chapter":"1 Introducción a la Programación","heading":"1.7.1 Organización de RStudio","text":"Cuando se abre RStudio se pueden visualizar cuatro paneles:\nFigura 1.12: Captura de pantalla de RStudio\nla izquierda:\nArriba está el editor de archivos. Es el lugar donde escribiremos y editaremos nuestros programas, para luego guardarlos (una especie de Bloc de Notas* o de un Word muy simple). La primera vez que se abre RStudio después de su instalación puede ser que este panel esté presente, pero aparece si vamos File > New File > R Script, con el atajo Ctrl + Shift + N o haciendo clic en el primer ícono de la barra de herramientas. Podemos abrir varios archivos la vez.\nAbajo está la consola. Es la ventana que se comunica con R. través de ella se envían las instrucciones o sentencias R para que las evalúe (también decimos, que las ejecute o corra) y se visualizan los resultados.\nla izquierda:Arriba está el editor de archivos. Es el lugar donde escribiremos y editaremos nuestros programas, para luego guardarlos (una especie de Bloc de Notas* o de un Word muy simple). La primera vez que se abre RStudio después de su instalación puede ser que este panel esté presente, pero aparece si vamos File > New File > R Script, con el atajo Ctrl + Shift + N o haciendo clic en el primer ícono de la barra de herramientas. Podemos abrir varios archivos la vez.Abajo está la consola. Es la ventana que se comunica con R. través de ella se envían las instrucciones o sentencias R para que las evalúe (también decimos, que las ejecute o corra) y se visualizan los resultados.Arriba la derecha hay un panel con algunas pestañas:\nEnvironment (ambiente): muestra todos los elementos que componen al ambiente o entorno.\nHistory (historial): lista todas las instrucciones que R ha corrido anteriormente.\nOtras más que nos interesan por ahora\nArriba la derecha hay un panel con algunas pestañas:Environment (ambiente): muestra todos los elementos que componen al ambiente o entorno.History (historial): lista todas las instrucciones que R ha corrido anteriormente.Otras más que nos interesan por ahoraAbajo la derecha hay otro panel con más pestañas:\nFiles: explorador de archivos de la computadora\nPlots: ventana donde aparecen los gráficos si es que nuestro código produce alguno\nPackages: listado de los “paquetes” que tenemos instalados (ver más adelante)\nHelp: manual de ayuda sobre todas las funciones de R\nViewer: espacio para ver salidas de los programas con algún componente dinámico o interactivo.\nAbajo la derecha hay otro panel con más pestañas:Files: explorador de archivos de la computadoraPlots: ventana donde aparecen los gráficos si es que nuestro código produce algunoPackages: listado de los “paquetes” que tenemos instalados (ver más adelante)Help: manual de ayuda sobre todas las funciones de RViewer: espacio para ver salidas de los programas con algún componente dinámico o interactivo.","code":""},{"path":"introducción-a-la-programación.html","id":"uso-de-rstudio","chapter":"1 Introducción a la Programación","heading":"1.7.2 Uso de RStudio","text":"Podemos usar la consola de R que encontramos en el panel de la izquierda para introducir allí nuestras sentencias y al hacer Enter serán evaluadas, produciendo algún resultado. Por ejemplo, podemos hacer algunos cálculos matemáticos como dividir, multiplicar, sumar, restar, calcular potencias, logaritmos, raíces y mucho más:Si bien podemos escribir nuestras sentencias en la consola y dar Enter para que se ejecuten, en general queremos que queden escritas y guardadas en el archivo de código, por eso vamos escribir nuestros programas en el panel de arriba la izquierda. Una vez que escribimos una sentencia en el script, podemos correrla (es decir, enviarla la consola para que se ejecute) haciendo clic en el ícono Run o con el atajo Ctrl + Enter. De esta forma, se corre la línea en la cual está el cursor o las líneas que hayamos seleccionado.En todo lenguaje de programación existe un caracter especial que, al ser colocado al comienzo de una línea de código, le indica al software que dicha línea debe ser evaluada. Esto se utiliza para incluir comentarios, es decir, líneas que expresan en español explicaciones o aclaraciones para nosotros mismos u otros que puedan utilizar nuestro código. También se utiliza para añadir encabezados con descripciones sobre el script, o indicar distintas secciones o partes en el programa. En R, este caracter especial es el símbolo numera (#). Si corremos líneas que empiezan con #, R hará nada con ellas, las salteará. Por ejemplo","code":"\n1 + 2[1] 3\n5 * 3[1] 15\nexp(2)[1] 7.389056\nsqrt(100)[1] 10\n1 / 0[1] Inf\n(2 + 3i) * (3 + 6i)[1] -12+21i\n1i ^ 2[1] -1+0i\n5^1[1] 5\n# 5^2\n5^3[1] 125"},{"path":"introducción-a-la-programación.html","id":"diseño-del-sistema-r","chapter":"1 Introducción a la Programación","heading":"1.7.3 Diseño del sistema R","text":"R Se divide en dos partes:La base (R Base), que se instala cuando descargamos el programa desde CRAN (“Comprehensive R Archive Network”). Contiene, entre otras cosas, una serie de herramientas básicas y fundamentales de R.La base (R Base), que se instala cuando descargamos el programa desde CRAN (“Comprehensive R Archive Network”). Contiene, entre otras cosas, una serie de herramientas básicas y fundamentales de R.Paquetes adicionales. Un paquete es un conjunto de archivos que se descarga de forma opcional desde CRAN u otros repositorios y que sirven para hacer alguna tarea especial. Por ejemplo, para poder hacer gráficos lindos, se puede usar un paquete que se llama ggplot2.Paquetes adicionales. Un paquete es un conjunto de archivos que se descarga de forma opcional desde CRAN u otros repositorios y que sirven para hacer alguna tarea especial. Por ejemplo, para poder hacer gráficos lindos, se puede usar un paquete que se llama ggplot2.Como dijimos antes, en la pestaña Packages del panel de abajo la derecha tiene el listado de todos los paquetes que ya están instalados (muchos vienen con R Base). Allí también hay un botón para instalar nuevos, aunque otra opción es correr la sentencia install.packages(\"nombredelpaquete\"), por ejemplo, install.packages(\"ggplot2\"). Un paquete se instala una sola vez, pero cada vez que lo queramos usar debemos cargarlo para que las herramientas que trae queden nuestra disposición. Eso se hace con la sentencia library(\"nombredelpaquete\"), por ejemplo, library(\"ggplot2\").","code":""},{"path":"introducción-a-la-programación.html","id":"guía-de-estilo","chapter":"1 Introducción a la Programación","heading":"1.8 Guía de estilo","text":"Es sumamente importante mantener la prolijidad en la escritura tanto del pseudocódigo como de los programas, para facilitar la lectura de los mismos, especialmente cuando estamos trabajando con problemas largos. Siempre hay que tener en cuenta de que cuando escribimos un programa, tenemos dos públicos potenciales: integrantes de nuestro equipo de trabajo que tienen leer el código y hacer sus propios aportes y nosotros mismos en el futuro, cuando retomemos código hecho en el pasado y necesitemos interpretar qué es lo que hicimos hacer.Es por eso que se establecen conjuntos de reglas para controlar y unificar la forma de escribir programas, que se conocen como guía de estilo. Estas reglas cubren aspectos como, por ejemplo, la forma de escribir comentarios en el código, la utilización de espacios o renglones en blanco, el formato de los nombres para los elementos que creamos nosotros mismos (como las funciones) y para los archivos que generamos, etc. Una guía de estilo indica la única forma de escribir código, ni siquiera la forma correcta de hacerlo, sino que establece una convención para que todos trabajen de la misma forma, basándose en costumbres que sí se ha visto que pueden tener más ventajas que otras.Por ejemplo, para programar en R, existe una guía de estilo llamada tidyverse style guide, que es la que utilizan la gente de Google y de RStudio. En este curso vamos adherir sus recomendaciones. Si bien es una lectura muy interesante, particularmente si tenés intenciones de profundizar tus conocimientos sobre programación en R, es necesario que lean dicha guía completa. Por ahora es suficiente con que imiten con atención el estilo que usamos en los ejemplos provistos en esta guía.Recordemos siempre que seguir un buen estilo para programar es como hacer uso de una correcta puntuación cuando escribimos, podemos entendernos sin ella, peroesmuchomasdificilleerloqueescribimossinolarespetamosno?","code":""},{"path":"objetos-y-operadores.html","id":"objetos-y-operadores","chapter":"2 Objetos y operadores","heading":"2 Objetos y operadores","text":"Hemos mencionado que para resolver un problema computacional se necesita de un procesador, capaz de entender y ejecutar ciertas acciones partir de ciertos elementos disponibles en el ambiente o entorno. Cuando trabajamos con Karel, dijimos que ella era la procesadora, que era capaz de realizar cuatro acciones básicas (aunque pudimos crear acciones nuevas para ella) y que su ambiente eran sus mundos con paredes y cosos. Si bien le damos gracias Karel por ayudarnos incorporar algunos conceptos, ahora nos despedimos de ella y vamos presentar otras nociones para que podamos avanzar en nuestro aprendizaje sobre programación en términos más generales.","code":""},{"path":"objetos-y-operadores.html","id":"objetos","chapter":"2 Objetos y operadores","heading":"2.1 Objetos","text":"Los objetos son las distintas piezas de información, o más sencillamente, datos, que componen al entorno y que el procesador debe manipular para resolver una tarea. Las distintas acciones del algoritmo van creando o modificando los objetos del entorno. medida que avancemos, veremos que hay distintas clases de objetos, algunos con estructuras más simples y otros más complejos. Es más, cada lenguaje de programación propone su propio catálogo de clases de objetos y cada programador puede crear otras nuevas. Sin embargo, en general todos los lenguajes tienen en común el hecho de que sus objetos pueden almacenar los siguientes tres tipos de datos básicos, conocidos como tipos de datos primitivos:Datos de tipo numérico: representan valores escalares de forma numérica y permiten realizar operaciones aritméticas comunes. Ejemplo: 230, 2.Datos de tipo caracter: representan texto y es posible hacer operaciones matemáticas con ellos. Representamos estos valores entre comillas. Ejemplo: “hola”, “chau123”Datos de tipo lógico: pueden tomar dos valores (VERDADERO o FALSO), ya que representan el resultado de alguna comparación entre otros objetos. En R, estos valores son TRUE y FALSE, escritos sin comillas.De manera general, al nombre de un objeto se le dice identificador, el cual es una secuencia de caracteres alfanuméricos que sirve para identificarlo lo largo del algoritmo. Nombrar los objetos hace posible referirse los mismos. La elección de los identificadores es una tarea del programador, pero cada lenguaje tiene sus propias reglas. Por ejemplo, en R los nombres de los objetos:Deben empezar con una letra o un punto (pueden empezar con un número).Sólo pueden contener letras, números, guiones bajos y puntos (se puede forzar R para que acepte nombres con otros caracteres, pero es aconsejable).se pueden usar las siguientes palabras como nombres, ya que son palabras claves reservadas para R: break, else, FALSE, , function, , Inf, NA, NaN, next, repeat, return, TRUE, .Es aconsejable elegir un nombre que sea representativo de la información que va guardar el objeto, ya que esto facilita la lectura y la comprensión tanto del algoritmo como del programa. Por ejemplo, si se necesita un objeto para guardar el valor numérico del precio de algún producto, el identificador p sería una mala elección, mientras que precio sería mejor. Si se necesitan varios identificadores para distinguir los precios de diversos productos, podríamos usar algo como precio_manzana, precio_banana, etc. Otra opción podría ser preciomanzana o precioManzana, pero en este curso seguiremos la convención de usar guiones bajos para facilitar la lectura de los nombres elegidos. sería posible usar como identificador precio manazana, puesto que un nombre puede tener espacios.Ciertos objetos almacenan temporalmente un valor durante la ejecución de un proceso y su contenido puede cambiar mientras corre el programa. Este tipo de objetos reciben el nombre de variables. Por ejemplo, en un programa creado para un comercio puede existir un objeto llamado stock (identificador) de tipo numérico que representa la cantidad de artículos disponibles y cuyo valor se modifica cada vez que se registra una nueva venta. Podemos pensar una variable como una caja etiquetada con un nombre (su identificador) y que guarda un valor (numérico, lógico o de caracter).\nFigura 2.1: La variable contiene al valor 5.\nSi un objeto tiene siempre necesariamente un valor fijo, se dice que es una constante. El valor es siempre el mismo para cualquier ejecución del programa, es decir, puede cambiar de una ejecución otra. Son ejemplos de constantes el número de meses del año, las constantes matemáticas tales como el número \\(\\pi\\), los factores de conversión de unidades de medida, etc. Las constantes pueden usarse literalmente, es decir, usando explícitamente el valor, o también través de un objeto que asocie un identificador al valor constante (por ejemplo, asociar el nombre pi la constante 3.14159265).","code":""},{"path":"objetos-y-operadores.html","id":"declaración-de-variables-y-constantes","chapter":"2 Objetos y operadores","heading":"2.1.1 Declaración de variables y constantes","text":"Al expresar nuestros algoritmos en pseudocódigo tomaremos la costumbre de declarar al inicio del mismo las variables y constantes necesarias para resolver el problema, explicitando su identificador y determinando el tipo de valor que guarda. Muchos lenguajes de programación utilizan esta declaración para reservar en la memoria de la computadora un espacio para almacenar la información correspondiente de manera adecuada.Veamos un ejemplo:Una vez que una variable o constante ha sido definida con un tipo particular, es incorrecto intentar asignarle un valor de otro tipo, por ejemplo, asignarle la variable radio del ejemplo anterior un valor de tipo caracter. Esto generaría ambigüedad, además de que en ciertos lenguajes de programación produciría un error.R es un lenguaje dinámico que requiere la declaración previa de las variables que serán utilizadas, sino que estas pueden definirse dinámicamente lo largo del programa. Por eso, incluiremos declaración de variables y constantes sólo en los algoritmos y cuando estos sean traducidos R. Al necesitar una declaración previa, en R es posible asignar, por ejemplo, un valor de tipo caracter un identificador que anteriormente contenía un valor de tipo numérico, pero trataremos de evitar esto.","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n        ...restantes acciones del algoritmo...\nFIN"},{"path":"objetos-y-operadores.html","id":"acción-de-asignación","chapter":"2 Objetos y operadores","heading":"2.1.2 Acción de asignación","text":"Para hacer que una variable guarde un determinado valor se recurre una acción de asignación. Mediante asignaciones podemos dar valores iniciales las variables, modificar el valor que tenían hasta el momento o guardar en ellas resultados intermedios o finales del algoritmo.En pseudocódigo expresaremos la asignación como se muestra en estos ejemplos:Si intervienen variables o constantes en la expresión la derecha de una acción de asignación, se usará el valor que tengan las mismas en ese momento. Por ejemplo, la siguiente secuencia de acciones en un algoritmo:resultará en que las variables var1, var2 y var3 tengan almacenados los valores 7, 2 y 7 respectivamente. Un caso particular se da cuando una variable se le asigna el valor de una operación de la que forma parte la misma variable. Por ejemplo:","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n    pi <- 3.14159265358979\n    radio <- 3\n    ...restantes acciones del algoritmo...\nFINvar1 <- 2\nvar2 <- var1\nvar1 <- 7\nvar3 <- var1stock <- 43\nventas <- 29\ncompras <- 12\nstock <- stock - ventas + compras"},{"path":"objetos-y-operadores.html","id":"creación-y-manejo-de-objetos-en-r","chapter":"2 Objetos y operadores","heading":"2.1.3 Creación y manejo de objetos en R","text":"En R también se usa el operador “flechita” para asignar valores variables. Como lo vamos usar muchísimas veces, es conveniente recordar su shortcut: Alt + - (teclas Alt y guión medio). Como ya mencionamos antes, R es un lenguaje dinámico, lo cual significa que tenemos que declarar las variables antes de asignarles un valor. Por ejemplo, si necesitamos registrar el peso y lugar de nacimiento de una persona, solamente tenemos que hacer:En este caso, lugar_nacimiento es un objeto de tipo carácter, ya que la información que contiene es \"Bombal\", y peso_nacimiento es un objeto numérico. Vale aclarar que en R el punto decimal se representa con el punto . y con la coma , como solemos escribir habitualmente, por lo que el número indicado se lee “tres coma cuatrocientos veintitrés” y “tres mil cuatrocientos veintitrés”. Asimismo, se usan separadores de miles al escribir los números.Por otro lado, R provee algunas funciones para poder averiguar en cualquier momento qué tipo de dato está almacenado en alguna variable. Todavía hemos definido formalmente las funciones, pero por ahora nos alcanza con saber que son otro tipo de objetos que cuando las usamos se encargan de cumplir con alguna tarea específica. Las funciones también tienen un nombre (identificador) y están seguidas por un par de paréntesis, dentro de los cuales se escriben opciones para que ellas operen. La función class() es la que nos dice qué tipo de dato hay en una variable:También hay algunas funciones que devuelven TRUE o FALSE modo de respuesta cuando le preguntamos R si una variable tiene un dato de tipo numérico, caracter o lógico:Todos los objetos que vamos definiendo en nuestro algoritmo y, posteriormente, en nuestro programa, forman parte del ambiente. En Rstudio podemos ver listados todos los objetos presentes en el ambiente en la pestaña Environment del panel superior derecho. También podemos ver en la consola un listado de todos los nombres de los objetos que existen en el ambiente con la función ls(), por ejemplo:Es probable que mientras estamos escribiendo el código, necesitemos probar si algunas partes funcionan y para eso corremos algunas líneas de código, creando objetos en el ambiente. Entre intento e intento, probablemnte necesitemos borrar alguno o todos esos objetos que se crearon, para poder comenzar con un ambiente libre. Si deseamos borrar todos los objetos del ambiente podemos correr la sentencia rm(list = ls()) o hacer clic en el ícono de la escoba en el panel Environment. Si queremos eliminar sólo un objeto debemos ejecutar la función rm(), indicando entre paréntesis el identificador del objeto que deseamos borrar, por ejemplo:Todos los objetos generados viven temporalmente en la memoria de la computadora mientras dure la sesión de R en la que estamos trabajando. Si cerramos R, toda esa información desaparecerá. Muchas veces eso es algo deseable: una vez finalizado el programa, guardamos algún resultado que nos interese (por ejemplo, un conjunto de datos en un archivo de Excel) y todos los objetos del ambiente que fuimos necesitando en el camino son descartados. Sin embargo, en otras oportunidades nos interesa guardar de forma permanente en la computadora una copia de todo lo que se encuentra en el ambiente en un archivo dentro de alguna carpeta. Los archivos que contienen los objetos creados en R tienen extensión .RData. Estos archivos se generan con el ícono de guardar en la pestaña Environment o usando la función save.image(), que necesita que escribamos entre los paréntesis la carpeta donde guardaremos el archivo y el nombre elegido para el mismo, por ejemplo:Si por el contrario necesitamos importar al ambiente objetos que estén guardados en algún lugar de nuestra compu en un archivo .RData, podemos usar el ícono de abrir en la pestaña Environment o la función load(), por ejemplo:","code":"lugar_nacimiento <- \"Bombal\"\npeso_nacimiento <- 3.423\nvar1 <- 2\nvar2 <- \"Hola Mundo\"\nvar3 <- TRUE\nclass(var1)[1] \"numeric\"\nclass(var2)[1] \"character\"\nclass(var3)[1] \"logical\"\nis.numeric(var1)[1] TRUE\nis.numeric(var2)[1] FALSE\nis.character(var3)[1] FALSE\nis.logical(var3)[1] TRUE\nls()[1] \"var1\" \"var2\" \"var3\"\nrm(var1)\nsave.image(\"C:/Users/Ana/Documentos/Facultad/objetos.RData\")\nload(\"C:/Users/Ana/Documentos/Facultad/objetos.RData\")"},{"path":"objetos-y-operadores.html","id":"operadores","chapter":"2 Objetos y operadores","heading":"2.2 Operadores","text":"El desarrollo de un algoritmo involucra la necesidad de efectuar operaciones de distinto tipo entre los valores guardados en los objetos: suma, resta, concatenación de caracteres, comparaciones, etc. Los elementos que describen el tipo de operación realizar entre dos objetos se denominan operadores.","code":""},{"path":"objetos-y-operadores.html","id":"operadores-aritméticos","chapter":"2 Objetos y operadores","heading":"2.2.1 Operadores aritméticos","text":"Los operadores aritméticos permiten realizar operaciones matemáticas con datos de tipo numérico. continuación presentamos su simbología más comúnmente empleada la hora de expresarlos en pseudocódigo, junto con sus equivalentes en el lenguaje R:Tabla 2.1:  Operadores aritméticos.Los operadores aritméticos actúan con un orden de prioridad establecido, también conocido como orden de evaluación u orden de precedencia, tal como estamos acostumbrados en matemática. Las expresiones entre paréntesis se evalúan primero. Si hay paréntesis anidados se evalúan desde adentro hacia afuera. Dentro de una misma expresión, en R los operadores se evalúan en este orden:Potenciación (^)División entera y módulo (%/%, %%, y cualquier otro operador especial del tipo %...%)Multiplicación y división (*, /)Suma y resta (+, -)Si la expresión presenta operadores con igual nivel de prioridad, se evalúan de izquierda derecha. Veamos algunos ejemplos:Tabla 2.2:  Ejemplos de operaciones aritméticas según el orden de precedencia de R.","code":""},{"path":"objetos-y-operadores.html","id":"operadores-relacionales-o-de-comparación","chapter":"2 Objetos y operadores","heading":"2.2.2 Operadores relacionales o de comparación","text":"Los operadores relacionales sirven para comparar dos valores de cualquier tipo y dan como resultado un valor lógico: VERDADERO (T o TRUE en R) o FALSO (F o FALSE en R).Tabla 2.3:  Operadores relacionales o de comparación.Otros ejemplos:Es interesante notar que primero se evalúan las operaciones cada lado de los operadores relacionales y luego se hace la comparación. Es decir, los operadores aritméticos preceden los relacionales en el orden de prioridad. Por eso, en los ejemplos anteriores eran necesarios los paréntesis y podríamos poner directamente:Si bien en pseudocódigo podemos usar tanto = o == para probar la igualdad entre dos elementos, en R debemos usar = para este fin, puesto que = es un operador de comparación sino de asignación, parecido al <-.","code":"\na <- 3\nb <- 4\nc <- 2\nd <- 10\ne <- 15\n(a * b) == (c + d)[1] TRUE\n(a * b) != (e - b)[1] TRUE\na * b == c + d[1] TRUE\na * b != e - b[1] TRUE"},{"path":"objetos-y-operadores.html","id":"operadores-lógicos","chapter":"2 Objetos y operadores","heading":"2.2.3 Operadores lógicos","text":"Mientras que los operadores relacionales comparan cualquier tipo de valores, los operadores lógicos sólo toman operandos de tipo lógico y producen también un resultado lógico. Los operadores lógicos que utilizaremos son:Tabla 2.4:  Operadores lógicos.La operación de conjunción (Y) devuelve un valor VERDADERO sólo si son verdaderas ambas expresiones que vincula. Ejemplo: (3 > 2) Y (3 > 5) resulta en VERDADERO Y FALSO y esto es FALSO.La operación de disyunción (O) devuelve un valor VERDADERO si al menos una de las dos expresiones que vincula es verdadera. Ejemplo: (3 > 2) O (3 > 5) resulta en VERDADERO O FALSO y esto es VERDADERO.La operación de negación () niega un valor lógico, es decir, devuelve el opuesto. Ejemplo: (3 > 2) resulta en VERDADERO y esto es FALSO.Tanto para la conjunción como para la disyunción, R provee dos operadores, repitiendo o el símbolo correspondiente: && vs &; || vs |. Hay una diferencia entre ellos que por ahora viene al caso, pero vamos señalar que por ahora estaremos usando las versiones presentadas anteriormente: && y ||.La tablas de verdad o tabla de valores de verdad se utiliza para mostrar los resultados de estas operaciones lógicas:Tabla 2.5:  Operadores relacionales o de comparación.Con estos operadores es posible construir evaluaciones lógicas más elaboradas como los siguientes ejemplos:Evaluar si el valor de ancho está entre 5 y 7: (ancho > 5) Y (ancho < 7).\n\nancho <- 6.4\n(ancho > 5) && (ancho < 7)\n[1] TRUEEvaluar si el valor de ancho está entre 5 y 7: (ancho > 5) Y (ancho < 7).Establecer si una persona estudia Estadística o Economía: (carrera == \"Estadística\") O (carrera == \"Economía\").\n\ncarrera <- \"Administración\"\n(carrera == \"Estadística\") || (carrera == \"Economía\")\n[1] FALSEEstablecer si una persona estudia Estadística o Economía: (carrera == \"Estadística\") O (carrera == \"Economía\").Determinar si una persona estudia Estadística: (carrera == \"Estadística\").\n\ncarrera <- \"Administración\"\n!(carrera == \"Estadística\")\n[1] TRUEDeterminar si una persona estudia Estadística: (carrera == \"Estadística\").Verificar que el valor guardado en x sea igual 2 ni 3:\nOpción correcta 1: (x != 2) Y (x != 3)\n\n# Da verdadero porque x es ni 2 ni 3\nx <- 10\n(x != 2) && (x != 3)\n[1] TRUE\n\n# Da falso porque x es igual 3\nx <- 3\n(x != 2) && (x != 3)\n[1] FALSE\nOpción correcta 2: ((x == 2) O (x == 3))\n\n# Da verdadero porque x es ni 2 ni 3\nx <- 10\n!(x == 2 || x == 3)\n[1] TRUE\n\n# Da falso porque x es igual 3\nx <- 3\n!(x == 2 || x == 3)\n[1] FALSE\nOpción incorrecta: (x != 2) O (x != 3)\n\n# Da verdadero, porque al ser x igual 3, es distinto de 2,\n# haciendo que la primera parte sea verdadera \nx <- 3\n(x != 2) || (x != 3)\n[1] TRUEVerificar que el valor guardado en x sea igual 2 ni 3:Opción correcta 1: (x != 2) Y (x != 3)Opción correcta 2: ((x == 2) O (x == 3))Opción incorrecta: (x != 2) O (x != 3)Este último ejemplo se relaciona con las Leyes de Morgan: siendo b y c valores lógicos, se tiene:(b O c) es equivalente b Y c.(b Y c) es equivalente b O c.Es importante notar que todos los paréntesis usados en el código de R del ejemplo 4 son innecesarios, puesto que los operadores relacionales preceden los lógicos en el orden de prioridad. Sin embargo, veces preferimos usar paréntesis para que la lectura sea más sencilla. En el siguiente ejemplo, ambas expresiones son equivalentes:Para pensar: predecir el resultado de las siguientes operaciones y luego verificar:","code":"\nancho <- 6.4\n(ancho > 5) && (ancho < 7)[1] TRUE\ncarrera <- \"Administración\"\n(carrera == \"Estadística\") || (carrera == \"Economía\")[1] FALSE\ncarrera <- \"Administración\"\n!(carrera == \"Estadística\")[1] TRUE\n# Da verdadero porque x no es ni 2 ni 3\nx <- 10\n(x != 2) && (x != 3)[1] TRUE\n# Da falso porque x es igual a 3\nx <- 3\n(x != 2) && (x != 3)[1] FALSE\n# Da verdadero porque x no es ni 2 ni 3\nx <- 10\n!(x == 2 || x == 3)[1] TRUE\n# Da falso porque x es igual a 3\nx <- 3\n!(x == 2 || x == 3)[1] FALSE\n# Da verdadero, porque al ser x igual a 3, es distinto de 2,\n# haciendo que la primera parte sea verdadera \nx <- 3\n(x != 2) || (x != 3)[1] TRUE\nancho <- 6.4\n(ancho > 5) && (ancho < 7)[1] TRUE\nancho > 5 && ancho < 7[1] TRUE\nx <- 2\ny <- -2\nx > 0 && y < 0\nx > 0 || y < 0\n!(x > 0 && y < 0)"},{"path":"objetos-y-operadores.html","id":"evaluación-en-cortocircuito","chapter":"2 Objetos y operadores","heading":"2.2.3.1 Evaluación en cortocircuito","text":"Para evaluar la operación de conjunción x && y, en R se comienza por evaluar la expresión del primer operando x y si su resultado es FALSE ya se evalúa la expresión y del segundo operando. Esto es porque si x es FALSE, el resultado de x && y ya depende de y, será siempre FALSE. Por este motivo se dice que el operador && se evalúa en cortocircuito. La evaluación en cortocircuito evita realizar operaciones innecesarias6Por ejemplo:La operación de disyunción también se evalúa en cortocircuito, es decir, si se encuentra que uno de los operandos es TRUE, hace falta evaluar los restantes, puesto que el resultado general será TRUE:","code":"\nx <- 1\ny <- 2\n\n# La primera parte da TRUE, se continúa con la segunda, pero da error porque no\n# existe un objeto llamado z\n(y > x) && (x > z)Error in eval(expr, envir, enclos): object 'z' not found\n# La primera parte da FALSE, entonces toda la operación será FALSE, no se\n# continúa con la segunda parte, con lo cual no se intenta usar el objeto\n# inexistente z y no hay error\n(y < x) && (x > z)[1] FALSE\n# Es TRUE porque la primera parte es TRUE, sin evaluar la segunda, que daría\n# error\n(y > x) || (x > z)[1] TRUE\n# Como la primera parte es FALSE, debe evaluar la segunda, no encuentra a z y da\n# error\n(x > y) || (x > z)Error in eval(expr, envir, enclos): object 'z' not found"},{"path":"objetos-y-operadores.html","id":"orden-de-precedencia-completo-en-r","chapter":"2 Objetos y operadores","heading":"2.2.3.2 Orden de precedencia completo en R","text":"Resumiendo la información anterior, continuación se presenta el orden completo de precedencia de los operadores en R que utilizaremos (hay algunos más que pueden ver en ?Syntax):Tabla 2.6:  Orden de precedencia de los operadores en R.Dentro de una misma expresión, operadores con igual prioridad se evalúan de izquierda derecha.","code":""},{"path":"objetos-y-operadores.html","id":"entrada-y-salida-de-información","chapter":"2 Objetos y operadores","heading":"2.3 Entrada y salida de información","text":"En la resolución de problemas puede ser necesario que alguna fuente externa (como un usuario del programa) provea información. En estos casos se debe registrar dicha información como un valor que debe ser asignado una variable. Cuando escribamos nuestros algoritmos en pseudocódigo, para esto utilizaremos la acción LEER. Cuando deseamos mostrar un resultado en un mensaje empleamos la acción ESCRIBIR. Las palabras o frases literales que se desean mostrar en el mensaje deben estar encerradas entre comillas porque son cadenas de texto, mientras que si se desea mostrar el valor de una variable se debe escribir su identificador sin comillas.Por ahora, en R ejecutaremos la acción LEER mediante la asignación directa de un valor una variable través del operador <-. La acción ESCRIBIR puede ser ejecutada través de la función cat() si se quiere mostrar una frase compuesta. En los casos en los que sólo interesa mostrar un valor (sin escribir una frase) será necesario usar cat(), ya que sencillamente al correr el nombre de un objeto, su valor es mostrado en la consola. En otros casos usaremos la función print(). Ya iremos viendo la utilidad de cada una de estas opciones.Vamos completar el ejemplo del algoritmo para el cálculo del área de un círculo, integrando todo lo mencionado anteriormente:Pseudocódigo:En R:Nota: pi ya es una constante incorporada en R Base, en realidad es necesario crear esta constante y asignarle valor.","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n    pi <- 3.14159265358979\n    LEER radio\n    area <- pi * radio^2\n    ESCRIBIR \"El área del círculo es \" area\nFIN\n# PROGRAMA: \"Calcular área de un círculo\" ---------------------------\n\npi <-  3.14159265358979\nradio <- 5\narea <- pi * radio^2\ncat(\"El área del círculo es\", area)El área del círculo es 78.53982"},{"path":"estructuras-de-control.html","id":"estructuras-de-control","chapter":"3 Estructuras de control","heading":"3 Estructuras de control","text":"","code":""},{"path":"descomposición-algorítmica.html","id":"descomposición-algorítmica","chapter":"4 Descomposición algorítmica","heading":"4 Descomposición algorítmica","text":"","code":""},{"path":"estructuras-de-datos.html","id":"estructuras-de-datos","chapter":"5 Estructuras de datos","heading":"5 Estructuras de datos","text":"","code":""},{"path":"uso-de-archivos-de-datos.html","id":"uso-de-archivos-de-datos","chapter":"6 Uso de archivos de datos","heading":"6 Uso de archivos de datos","text":"","code":""},{"path":"otros-tópicos.html","id":"otros-tópicos","chapter":"7 Otros tópicos","heading":"7 Otros tópicos","text":"","code":""},{"path":"bibliografía.html","id":"bibliografía","chapter":"Bibliografía","heading":"Bibliografía","text":"Bibliografía de la asignaturaCasale, Juan Carlos (2012). Introducción la Programación. Buenos Aires: Editorial Fox Andina.Cerrada Somolinos, José y Collado Machuca, Manuel (2015). Fundamentos De Programación. Madrid: Editorial Universitaria Ramón Areces.Martínez López, Pablo (2013). Las bases conceptuales de la Programación: una nueva forma de aprender programar. La Plata: Editorial de la Universidad Nacional de Quilmes.Quetglás, Gregorio; Toledo Lobo, Francisco; Cerverón Lleó, Vicente (1995). Fundamentos de informática y programación. Valencia: Editorial V.J.Wicham, Hadley (2019). Advanced R. Florida: Editorial Chapman Hall/CRC.Textos consultados para la reseña histórica de la programación:Ada Lovelace - Wikipedia. Consultado el 21/04/21.Difference engine - Wikipedia. Consultado el 21/04/21.Generaciones de las computadoras. Consultado el 21/04/21.Generaciones de ordenadores. Consultado el 21/04/21.Historia de la programación - Wikipedia. Consultado el 21/04/21.Konrad Zuse - people.idsia.ch. Consultado el 21/04/21.Los huesos de Napier, la multiplicación árabe y tú. Consultado el 21/04/21.Significado de computación. Consultado el 21/04/21.Otros artículos consultadosAprender programación - Curso de Java. Consultado el 25/04/21.Fundamentos de programación. Consultado el 25/04/21.Hardware y software: definiciones y conceptos. Consultado el 25/04/21.Introduction programming. Consultado el 25/04/21.Programación estructurada. Consultado el 25/04/21.7 Common Types Errors Programming Avoid . Consultado el 25/04/21.abstraction programming?. Consultado el 25/04/21.","code":""}]
