[{"path":"index.html","id":"bienvenida","chapter":"Bienvenida","heading":"Bienvenida","text":"¡Les damos la bienvenida la asignatura Introducción la Programación en la Facultad de Ciencias Económicas y Estadística, Universidad Nacional de Rosario! La presente guía resume los conceptos más importantes que vamos desarrollar. La misma irá siendo revisada, completada y actualizada lo largo del cuatrimestre y está exenta de presentar errores o expresar ideas que puedan ser mejoradas. Avisanos si encontrás algo que deba ser cambiado. ¡Esperamos que juntos podamos pasarla bien al dar nuestros primeros pasos en la programación!Este material fue escrito por el Mgs. Lic. Marcos Prunello (Profesor Titular por Concurso). Se agradecen las observaciones realizadas por los integrantes de la cátedra, AUS. César Mignoni y Lic. Maite San Martín.","code":""},{"path":"introducción-a-la-programación.html","id":"introducción-a-la-programación","chapter":"1 Introducción a la Programación","heading":"1 Introducción a la Programación","text":"","code":""},{"path":"introducción-a-la-programación.html","id":"qué-es-la-programación","chapter":"1 Introducción a la Programación","heading":"1.1 Qué es la programación","text":"Las computadoras son una parte esencial de nuestra vida cotidiana. Casi todos los aparatos que usamos tienen algún tipo de computadora capaz de ejecutar ciertas tareas: lavarropas con distintos modos de lavado, consolas de juegos para momentos de entretenimiento, calculadoras súper potentes, computadoras personales que se usan para un montón de propósitos, teléfonos celulares con un sinfín de aplicaciones y miles de cosas más.Todos estos dispositivos con computadoras de distinto tipo tienen algo en común: alguien “les dice” cómo funcionar, es decir, les indica cuáles son los pasos que deben seguir para cumplir una tarea. De eso se trata la programación: es la actividad mediante la cual las personas le entregan una computadora un conjunto de instrucciones para que, al ejecutarlas, ésta pueda resolver un problema. Quienes realizan esta actividad reciben el nombre de programadores. Sin las personas que las programen, las computadoras dejan de ser útiles, por más complejos que sean estos aparatos. Los conjuntos de instrucciones que reciben las computadoras reciben el nombre de programas.La programación es un proceso creativo: en muchas ocasiones la tarea en cuestión puede cumplirse siguiendo distintos caminos y el programador es el que debe imaginar cuáles son y elegir uno. Algunos de estos caminos pueden ser mejores que otros, pero en cualquier caso la computadora se limitará seguir las instrucciones ideadas por el programador.Desafortunadamente, las computadoras entienden español ni otro idioma humano. Hay que pasarles las instrucciones en un lenguaje que sean capaces de entender. Para eso debemos aprender algún lenguaje de programación, que es más que un lenguaje artificial compuesto por una serie de expresiones que la computadora puede interpretar. Las computadoras interpretan nuestras instrucciones de forma muy literal, por lo tanto la hora de programar hay que ser muy específicos. Es necesario respetar las reglas del lenguaje de programación y ser claros en las indicaciones provistas.Ahora bien, ¿por qué debemos estudiar programación en la Licenciatura en Estadística? La actividad de los profesionales estadísticos está atravesada en su totalidad por la necesidad de manejar con soltura herramientas informáticas que nos asisten en las distintas etapas de nuestra labor, desde la recolección y depuración de conjuntos de datos, pasando por la aplicación de distintas metodologías de análisis, hasta la comunicación efectiva de los resultados. Por eso, en la asignatura Introducción la Programación estudiaremos los conceptos básicos de esta disciplina, fomentando la ejercitación del pensamiento abstracto y lógico necesario para poder entendernos hábilmente con la computadora y lograr que la misma realice las tareas que necesitamos.Para poner en práctica los conceptos sobre Programación que aprenderemos, vamos emplear un lenguaje que ha sido desarrollado específicamente para realizar tareas estadísticas, llamado R. Sin embargo, debemos resaltar que éste es un curso sobre R, es decir, nos dedicaremos aprender las herramientas que este lenguaje brinda para el análisis de datos. De hecho, frente variados problemas vamos dedicarnos crear soluciones que ya existen y están disponibles en R, pero lo haremos con el fin de utilizar dicho lenguaje para aprender y ejercitar nociones básicas de programación.","code":""},{"path":"introducción-a-la-programación.html","id":"una-breve-reseña-histórica-sobre-la-programación","chapter":"1 Introducción a la Programación","heading":"1.2 Una breve reseña histórica sobre la programación","text":"La historia de la programación está vinculada directamente con la de la computación. Esta palabra proviene del latín computatio, que deriva del verbo computare, cuyo significado es “enumerar cantidades”. Computación, en este sentido, designa la acción y efecto de computar, realizar una cuenta, un cálculo matemático. De allí que antiguamente computación fuese un término usado para referirse los cálculos realizados por una persona con un instrumento expresamente utilizado para tal fin (como el ábaco, por ejemplo) o sin él. En este sentido, la computación ha estado presente desde tiempos ancestrales, sin embargo debemos remontarnos al siglo XVII para encontrar los primeros dispositivos diseñados para automatizar cómputos matemáticos.En 1617 el matemático escocés John Napier (el mismo que definió los logaritmos) inventó un sistema conocido como los huesos de Napier o huesos neperianos que facilitaba la tarea de multiplicar, dividir y tomar raíces cuadradas, usando unas barras de hueso o marfil que tenían dígitos grabados. Esta fue la base para otras ideas más avanzadas, entre ellas la que dio origen la primera calculadora mecánica, inventada por el alemán Wilhelm Schickard en 1623, capaz de realizar cómputos aritméticos sencillos funcionando base de ruedas y engranajes. Se componía de dos mecanismos diferenciados, un ábaco de Napier de forma cilíndrica en la parte superior y un mecanismo en la inferior para realizar sumas parciales de los resultados obtenidos con el aparato de la parte superior. Fue llamado reloj calculador. partir de aquí se fueron desarrollando otros modelos, todos ellos teniendo en común el hecho de ser puramente mecánicos, sin motores ni otras fuentes de energía. El operador ingresaba números ubicando ruedas de metal en posiciones particulares y al girarlas otras partes de la máquina se movían y mostraban el resultado. Algunos ejemplos son las calculadoras del inglés William Oughtred en 1624, de Blaise Pascal en 1645 (llamada pascalina), la de Samuel Morland en 1666 y las de Leibniz, en 1673 y 1694.\nFigura 1.1: De izquierda derecha: los huesos de Napier (Museo Arqueológico Nacional de España), el reloj calculador de Schickard (Museo de la Ciencia de la Universidad Pública de Navarra) y una pascalina del año 1952\nEl siglo XVIII trajo consigo algunos otros diseños, pero un gran salto se dio comienzos del siglo XIX de mano de un tejedor y comerciante francés, Joseph Jacquard. En 1801 creó un telar que tenía un sistema de tarjetas perforadas para controlar las puntadas del tejido, de forma que fuera posible programar una gran diversidad de tramas y figuras. Sin saberlo, Jacquard sentó una idea fundamental para la creación de las computadoras.\nFigura 1.2: Un telar de Jacquard y sus tarjetas perforadas en el Museo de la ciencia y la industria en Mánchester.\nEn 1822 el matemático británico Charles Babbage publicó un diseño para la construcción de una máquina diferencial, que podía calcular valores de funciones polinómicas mediante el método de las diferencias. Este complejo sistema de ruedas y engranajes era el primero que podía trabajar automáticamente utilizando resultados de operaciones previas. Si bien el diseño era viable, por motivos técnicos y económicos lo pudo concretar (sólo construyó un modelo de menor escala). Sin embargo, Babbage se dio por vencido y en 1837 presentó el diseño de una máquina analítica, un aparato capaz de ejecutar cualquier tipo de cálculo matemático y que, por lo tanto, se podría utilizar con cualquier propósito. Tal como el telar de Jacquard, la operación de esta máquina sería controlada por un patrón de perforaciones hechas sobre una tarjetas que la misma podría leer. Al cambiar el patrón de las perforaciones, se podría cambiar el comportamiento de la máquina para que resuelva diferentes tipos de cálculos. Para la salida de resultados, la máquina sería capaz de perforar tarjetas. Además, funcionaría con un motor vapor y su tamaño hubiese sido de 30 metros de largo por 10 de ancho. Si bien Babbage tampoco llegó concretar en vida este diseño que dejó plasmado en más de 300 dibujos y 2200 páginas por motivos políticos, se lo considera como la primera conceptualización de lo que hoy conocemos como computadora, por lo cual Babbage es conocido como el padre de la computación.En 1843 Lady Ada Lovelace, una matemática y escritora británica, publicó una serie de notas sobre la máquina analítica de Babbage, en las que resaltaba sus potenciales aplicaciones prácticas, incluyendo la descripción detallada de tarjetas perforadas para que sea capaz de calcular los números de Bernoulli. Al haber señalado los pasos para que la máquina pueda cumplir con estas y otras tareas, Ada es considerada actualmente como la primera programadora del mundo, pesar de que en la época fue tomada en serio por la comunidad científica, principalmente por su condición de mujer.\nFigura 1.3: Charles Babbage, Ada Lovelace y el algoritmo que publicó Ada para calcular los números de Bernoulli con la máquina analítica de Charles.\nLa utilidad de las tarjetas perforadas quedó confirmada en 1890, cuando Herman Hollerith las utilizó para automatizar la tabulación de datos en el censo de Estados Unidos. Las perforaciones en determinados lugares representaban información como el sexo o la edad de las personas, logrando que se pudieran lograr clasificaciones y conteos de forma muy veloz. Así, se tardaron sólo 3 años en procesar la información del censo, cinco años menos que en el anterior de 1880. Con el fin de comercializar esta tecnología, Hollerith fundó una compañía que terminaría siendo la famosa International Business Machine (IBM), empresa líder en informática hasta el día de hoy.Sin embargo, la visión de Babbage de una computadora programable se hizo realidad hasta los años 1940, cuando el advenimiento de la electrónica hizo posible superar los dispositivos mecánicos existentes. John Atanasoff y Clifford Berry (Iowa State College, Estados Unidos) terminaron en 1942 en Iowa State College (Estados Unidos) una computadora electrónica capaz de resolver sistemas de ecuaciones lineales simultáneas, llamada ABC (por “Atanasoff Berry Computer”). La misma contaba con 300 tubos de vacío, unas bombillas de vidrio con ciertos componentes que podían recibir y modificar una señal eléctrica mediante el control del movimiento de los electrones produciendo una respuesta, que habían sido presentados por primera vez en 1906 por el estadounidense Lee De Forest. La ABC dio comienzo la conocida como la primera generación de computadoras basadas en el empleo de tubos de vacío.La primera computadora electrónica de propósito general fue la ENIAC, Electronic Numerical Integrator Computer, completada por Presper Eckert y John Mauchly en la Universidad de Pensilvania. Podía realizar cinco mil operaciones aritmética por segundo y tenía más de 18000 tubos de vacío, ocupando una sala de 9x15 metros en un sótano de la universidad donde se montó un sistema de aire acondicionado especial.Ni la ABC ni la ENIAC eran reprogramables: la ABC servía el propósito específico de resolver sistemas de ecuaciones y la ENIAC era controlada conectando ciertos cables en un panel, lo que hacía muy compleja su programación. El siguiente gran avance se produjo en 1945, cuando el matemático húngaro-estadounidense John von Neumann (Universidad de Princeton) propuso que los programas, es decir, las instrucciones para que la máquina opere, y también los datos necesarios, podrían ser representados y guardados en una memoria electrónica interna. Así nació el concepto de programa almacenado (o stored-program), en contraposición con el uso de tableros de conexiones y mecanismos similares de los modelos vigentes. Los creadores de la ENIAC, bajo la consultoría de von Neumann, implementaron esto en el diseño de su sucesora, la EDVAC, terminada en 1949.\nTambién ya había experimentado con esta idea el alemán Konrad Zuse, quien entre 1937 y 1941 desarrolló la Z3, por lo cual es considerada por algunos como la primera máquina completamente automática y programable. En lugar de usar tubos de vacíos, empleaba un conjunto de 2600 relés, unos dispositivos electromagnéticos inventados en 1835 y empleados, por ejemplo, en telegrafía.\n\nEl modelo original de la Z3 fue destruido en Berlín por un bombardeo durante la segunda guerra mundial.\nFigura 1.4: De izquierda derecha: las computadoras ABC, ENIAC y Z3\nEste nuevo paradigma cambió la historia de la computación, como también lo hizo la invención del transistor en 1947 en los Laboratorios Bell. Un transistor es un dispositivo electrónico semiconductor que entrega una señal de salida en respuesta una señal de entrada, mucho más pequeño que los tubos de vacío y que consumen menos energía eléctrica. Así, una computadora podía tener cientos de miles de transistores, obstante ocupando mucho espacio.Desde entonces, la computación ha evolucionado muy rápidamente, con la introducción de nuevos sistemas y conceptos, que llegan los complejos y poderosos diseños electrónicos que caracterizan la vida actual. En un intento de caracterizar y resumir esta impactante evolución, algunos historiadores dividen al desarrollo de las computadoras modernas en “generaciones” (esta clasificación es única y existen diversas versiones de la misma):Primera generación (aprox. 1940-1958): se trata de las computadoras electrónicas que usaban tubos de vacío para su circuito interno. Los equipos eran enormes y ocupan habitaciones enteras. Consumían mucha electricidad y generaban demasiado calor. Podía llevar días o semanas modificar las conexiones para hacer que la computadora resuelva un problema diferente. Usaban tarjetas perforadas y cinta de papel para la lectura de datos e impresiones para mostrar las salidas.Segunda generación (aprox. 1958-1964): se caracteriza por el uso de transistores (inventados en 1947) en lugar de tubos de vacío, permitiendo que las computadoras tengan un consumo eléctrico más eficiente, sean más baratas, más pequeñas y más rápidas.Tercera generación (aprox. 1964-1971): se inició en 1959 con el desarrollo de un circuito integrado (“chip”) que se trata de una pequeña placa de silicio sobre el cual se imprime un gran número de transistores conectados. La primera computadora de este estilo fue de IBM en 1960. Al ser más pequeñas y baratas, su uso llegó una mayor audiencia. Se pudo interactuar con la máquina mediante teclados, monitores y un sistema operativo, que posibilitaba ejecutar múltiples acciones la vez bajo el monitoreo de un programa central.Cuarta generación (aprox. 1971-presente): los avances tecnológicos permitieron construir la unidad entera de procesamiento de una computadora sobre un único chip de silicio (microprocesador), incluyendo la memoria y los controles de entrada y salida de datos. Todo lo que en una computadora de la primera generación ocupaba una habitación entera, fue capaz de entrar en la palma de una mano. El primer microprocesador fue el Intel 4004 de 1971, mientras que la primera computadora de uso doméstico fue desarrollada por IBM en 1981. Surgieron también en esta generación el ratón (mouse) y las interfaces gráficas de usuario (como Windows, en 1985).\nFigura 1.5: De derecha izquierda: un tubo de vacío, un transistor y un chip.\n","code":""},{"path":"introducción-a-la-programación.html","id":"software-y-hardware","chapter":"1 Introducción a la Programación","heading":"1.3 Software y hardware","text":"Como podemos ver, en la historia de la computación hubo dos aspectos que fueron evolucionando: las máquinas y los programas que las dirigen. Hacemos referencia estos elementos como hardware y software respectivamente, y es la conjunción de ambos la que le da vida la computación y hace posible la programación.\nFigura 1.6: Representación de la diferencia entre hardware y software.\nEl hardware es el conjunto de piezas físicas y tangibles de la computadora. Existen diversas formas de clasificar los elementos que componene al hardware, según distintos criterios:\nTabla 1.1:  Clasificación del hardware\n\\(~\\)Por otro lado tenemos al software, que es el conjunto de todos los programas (es decir, todas las instrucciones que recibe la computadora) que permiten que el hardware funcione y que se pueda concretar la ejecución de las tareas. tiene una existencia física, sino que es intangible. El software se puede clasificar de la siguiente forma:\nTabla 1.2:  Clasificación del software\n","code":""},{"path":"introducción-a-la-programación.html","id":"problemas-algoritmos-y-lenguajes-de-programación","chapter":"1 Introducción a la Programación","heading":"1.4 Problemas, algoritmos y lenguajes de programación","text":"Mencionamos anteriormente que la programación consistía en instruir una computadora para que resuelva un problema y que la comunicación de esas instrucciones debe ser realizada de forma clara. Es por eso que, ante un problema que debe ser resuelto computacionalmente, el primer paso es pensar detalladamente cuál puede ser una forma de resolverlo, es decir, crear un algoritmo. Un algoritmo es una estrategia consistente de un conjunto ordenado de pasos que nos lleva la solución de un problema o alcance de un objetivo. Luego, hay que traducir el algoritmo elegido al idioma de la computadora.Entonces, podemos decir que la resolución computacional de un problema consiste de dos etapas básicas:Diseño algorítmico: desarrollar un algoritmo, o elegir uno existente, que resuelva el problema.Codificación: expresar un algoritmo en un lenguaje de programación para que la computadora lo pueda interpretar y ejecutar.Al aprender sobre programación, comenzamos enfrentándonos problemas simples para los cuales la primera etapa parece sencilla, mientras que la codificación se torna dificultosa ya que hay que aprender las reglas del lenguaje de programación. Sin embargo, mientras que con práctica rápidamente podemos ganar facilidad para la escritura de código, el diseño algorítmico se torna cada vez más desafiante al encarar problemas más complejos. Es por eso que haremos hincapié en el planteo y desarrollo de algoritmos como una etapa fundamental en la programación.","code":""},{"path":"introducción-a-la-programación.html","id":"el-diseño-algorítmico","chapter":"1 Introducción a la Programación","heading":"1.4.1 El diseño algorítmico","text":"Cotidianamente, hacemos uso de algoritmos para llevar adelante casi todas las actividades que realizamos: preparar el desayuno, sacar pasear la mascota, poner en la tele un servicio de streaming para ver una película, etc. Cada una de estas tareas requiere llevar adelante algunas acciones de forma ordenada, aunque hagamos un listado de las mismas y procedamos casi sin pensar.Sin embargo, cuando estamos pensando la solución para un problema que va resolver una computadora, debemos ser claros y concretos, para asegurarnos de que al seguir los pasos del algoritmo se llegue la solución y para que quien tenga que codificarlo, nosotros mismos u otras personas, lo pueda entender sin problemas. Por eso, el primer paso es idear un algoritmo para su solución y expresarlo por escrito, por ejemplo, en español, pero adaptando el lenguaje humano formas lógicas que se acerquen las tareas que puede realizar una computadora. En programación, el lenguaje artificial e informal que usan los desarrolladores en la confección de algoritmos recibe el nombre de pseudocódigo. Es la herramienta que utilizamos para describir los algoritmos mezclando el lenguaje común con instrucciones de programación. es en sí mismo un lenguaje de programación, es decir, la computadora es capaz de entenderlo, sino que el objetivo del mismo es que el programador se centre en la solución lógica y luego lo utilice como guía al escribir el programa.El pseudocódigo, como cualquier otro lenguaje, está compuesto por:Un léxico: conjunto de palabras o frases válidas para escribir las instrucciones.Una sintaxis: reglas que establecen cómo se pueden combinar las distintas partes.Una semántica: significado que se les da las palabras o frases.El pseudocódigo sigue una estructura secuencial: define una acción o instrucción que sigue otra en secuencia. Esta estructura puede representarse de la siguiente forma:Se comienza con un título que describa el problema que el algoritmo resuelve, seguido por la palabra COMENZAR. Luego se detallan las acciones o instrucciones seguir y se concluye con la palabra FIN. Por ejemplo, si nuestro problema es poner en marcha un auto, el algoritmo para resolverlo puede ser expresado mediante el siguiente pseudocódigo:Es importante destacar la presencia de sangrías (sangrado) en el ejemplo anterior, que facilitan la lectura.Los algoritmos suelen ser representados también mediante diagramas de flujo, como el que se muestra en la siguiente figura1.\nFigura 1.7: Ejemplo del algoritmo “Arrancar el auto” representado gráficamente con un diagrama de flujo.\n","code":"ALGORITMO: \"Ejemplo\"\nCOMENZAR\n    Acción 1\n    Acción 2\n    ...\n    Acción N\nFINALGORITMO: \"Arrancar el auto\"\nCOMENZAR\n    INSERTAR la llave de contacto\n    UBICAR el cambio en punto muerto\n    GIRAR la llave hasta la posición de arranque\n    SI el motor arranca \n        ENTONCES\n            DEJAR la llave en posición \"encendido\"\n        SI NO\n            LLAMAR al mecánico\n    FINSI\nFIN"},{"path":"introducción-a-la-programación.html","id":"codificación","chapter":"1 Introducción a la Programación","heading":"1.4.2 Codificación","text":"El algoritmo anterior está presentado en pseudocódigo utilizando el lenguaje español, una opción razonable para compartir esta estrategia entre personas que se comuniquen con este idioma. Claramente, si queremos presentarle nuestro algoritmo alguien que sólo habla francés, el español ya sería una buena elección, y mucho menos si queremos presentarle el algoritmo una computadora. Para que una computadora pueda entender nuestro algoritmo, debemos traducirlo en un lenguaje de programación, que, como dijimos antes, es un idioma artificial diseñado para expresar cómputos que puedan ser llevados cabo por equipos electrónicos, es decir es un medio de comunicación entre el humano y la máquina.Si bien hay distintos lenguajes de programación, una computadora en definitiva es un aparato que sólo sabe hablar en binario, es decir, sólo interpreta señales eléctricas con dos estados posibles, los cuales son representados por los dígitos binarios 0 y 1. Toda instrucción que recibe la computadora se construye mediante una adecuada y larga combinación de ceros y unos2. Este sistema de código con ceros y unos que la computadora interpreta como instrucciones o conjuntos de datos se llama lenguaje de máquina (o código de máquina).Programar en lenguaje de máquina es muy complejo y lento, y es fácil cometer errores pero es difícil arreglarlos. Por eso principios de la década de 1950 se inventaron los lenguaje ensambladores, que usan palabras para representar simbólicamente las operaciones que debe realizar la computadora. Cada una de estas palabras reemplaza un código de máquina binario, siendo un poco más fácil programar. Imaginemos que deseamos crear un programa que permita sumar dos números elegidos por una persona. La computadora puede hacer esto si se lo comunicamos mediante un mensaje compuesto por una larga cadena de ceros y unos (lenguaje de máquina) que simple vista podríamos entender. Sin embargo, escrito en lenguaje ensamblador, el programa se vería así (por ejemplo):\nFigura 1.8: Programa en lenguaje ensamblador para leer dos números, sumarlos y mostrar el resultado. Al final de cada línea hay una descripción de la operación realizada.\nEl programa que se encarga de traducir esto al código de máquina se llama ensamblador. pesar de que haya ceros y unos como en el lenguaje de máquina, probablemente el código anterior tampoco sea fácil de entender. Aparecen instrucciones que tal vez podemos interpretar, como add por sumar o sub por substraer, pero está lleno de cálculos hexadecimales, referencias posiciones en la memoria de la computadora y movimientos de valores que lo hacen muy amigable. Por eso, pesar de que la existencia de los lenguajes ensambladores simplificó mucho la comunicación con la computadora, se hizo necesario desarrollar lenguajes que sean aún más sencillos de usar.Por ejemplo, con el lenguaje que vamos aprender, R, el problema de pedirle dos números una persona y sumarlos se resumen en las siguientes líneas de código:En las dos primeras líneas con la instrucción scan() (que quiere decir “escanear”, “leer”) se le pide la persona que indique dos números y en la tercera línea se muestra el resultado de la suma, con la instrucción print() (“imprimir”, “mostrar”). Mucho más corto y entendible.Esta simplificación es posible porque nos permitimos ignorar ciertos aspectos del proceso que realiza la computadora. Todas esas acciones que se ven ejemplificadas en la imagen con el código ensamblador se llevan cabo de todas formas, pero lo vemos. Nosotros sólo tenemos que aprender esas últimas tres líneas de código, de forma que nos podemos concentrar en el problema resolver (ingresar dos números, sumarlos y mostrar el resultado) y en las complejas operaciones internas que tiene que hacer el microprocesador.En programación, la idea de simplificar un proceso complejo ignorando algunas de sus partes para comprender mejor lo que hay que realizar y así resolver un problema se conoce como abstracción3. Esto quiere decir que los lenguajes de programación pueden tener distintos niveles de abstracción:Lenguajes de bajo nivel de abstracción: permiten controlar directamente el hardware de la computadora, son específicos para cada tipo de máquina, y son más rígidos y complicados de entender para nosotros. El lenguaje ensamblador entra en esta categoría.Lenguajes de alto nivel de abstracción: diseñados para que sea fácil para los humanos expresar los algoritmos sin necesidad de entender en detalle cómo hace exactamente el hardware para ejecutarlos. El lenguaje que utilizaremos en este taller, R, es de alto nivel. Son independientes del tipo de máquina.Lenguajes de nivel medio de abstracción: son lenguajes con características mixtas entre ambos grupos anteriores.\nFigura 1.9: Distintos lenguajes de programación y sus logos.\nSi bien podemos programar usando un lenguaje de alto nivel para que nos resulte más sencillo, alguien o algo debe traducirlo lenguaje de máquina para que la computadora, que sólo entiende de ceros y unos, pueda realizar las tareas. Esto también es necesario incluso si programáramos en lenguaje ensamblador. Para estos procesos de traducción se crearon los compiladores e intérpretes.Un compilador es un programa que toma el código escrito en un lenguaje de alto nivel y lo traduce código de máquina, guardándolo en un archivo que la computadora ejecutará posteriormente (archivo ejecutable). Para ilustrar el rol del compilador, imaginemos que alguien que sólo habla español le quiere mandar una carta escrita en español alguien que vive en Alemania y sólo habla alemán. Cuando esta persona la reciba, la va entender. Se necesita de un intermediario que tome la carta en español, la traduzca y la escriba en alemán y luego se la mande al destinatario, quien ahora sí la podrá entender. Ese es el rol de un compilador en la computadora. Ahora bien, el resultado de la traducción, que es la carta escrita en alemán, sólo sirve para gente que hable alemán. Si se quiere enviar el mismo mensaje personas que hablen otros idiomas, necesitaremos hacer la traducción que corresponda. De la misma forma, el código generado por un compilador es específico para cada máquina, depende de su arquitectura.Además de los compiladores, para realizar este pasaje también existen los intérpretes. Un intérprete es un programa que traduce el código escrito en lenguaje de alto nivel código de máquina, pero lo va haciendo medida que se necesita, es decir, su resultado reside en la memoria temporal de la computadora y se genera ningún archivo ejecutable. Siguiendo con el ejemplo anterior, es similar viajar Alemania con un intérprete que nos vaya traduciendo en vivo y en directo cada vez que le queramos decir algo alguien de ese país. En su implementación por defecto, el lenguaje R es interpretado, compilado.Concluyendo, gracias al concepto de la abstracción podemos escribir programas en un lenguaje que nos resulte fácil entender, y gracias al trabajo de los compiladores e intérpretes la computadora podrá llevar adelante las tareas necesarias.Cada una de las acciones que componen al algoritmo son codificadas con una o varias instrucciones, expresadas en el lenguaje de programación elegido, y el conjunto de todas ellas constituye un programa. El programa se guarda en un archivo con un nombre generalmente dividido en dos partes por un punto, por ejemplo: mi_primer_programa.R. La primera parte es la raíz del nombre con la cual podemos describir el contenido del archivo. La segunda parte es indicativa del uso del archivo, por ejemplo, .R indica que contiene un programa escrito en el lenguaje R. El proceso general de ingresar o modificar el contenido de un archivo se denomina edición.","code":"n1 <- scan()\nn2 <- scan()\nprint(n1 + n2)"},{"path":"introducción-a-la-programación.html","id":"errores-de-programación","chapter":"1 Introducción a la Programación","heading":"1.5 Errores de programación","text":"Apenas iniciemos nuestro camino en el mundo de la programación nos daremos cuenta que tendremos siempre ciertos compañeros de viaje: los errores. Muchas veces nos pasará que queremos ejecutar nuestro código y el mismo anda o produce el resultado esperado. importa cuán cuidadosos seamos, ni cuánta experiencia tengamos, los errores están siempre presentes. Con el tiempo y práctica, vamos poder identificarlos y corregirlos con mayor facilidad, pero probablemente nunca dejemos de cometerlos.los errores en programación se los suele llamar bugs (insecto o bicho en inglés) y el proceso de la corrección de los mismos se conoce como debugging (depuración)4. Se dice que esta terminología proviene de 1947, cuando una computadora en la Universidad de Harvard (la Mark II) dejó de funcionar y finalmente se descubrió que la causa del problema era la presencia de una polilla en un relé electromagnético de la máquina. Sin embargo, otros historiadores sostienen que el término ya se usaba desde antes.\nFigura 1.10: La polilla (bug) encontrada por la científica de la computación Grace Hooper en la Mark II fue pegada con cinta en un reporte sobre el malfuncionamiento de la máquina.\ncontinuación se presenta una de las posibles clasificaciones de los errores que se pueden cometer en programación:Errores de sintaxis. Tal como el lenguaje humano, los lenguajes de programación tienen su propio vocabulario y su propia sintaxis, que es el conjunto de reglas gramaticales que establecen cómo se pueden combinar las distintas partes. Estas reglas sintácticas determinan que ciertas instrucciones están correctamente construidas, mientras que otras . Cuando ejecutamos un programa, el compilador o el intérprete chequea si el mismo es sintácticamente correcto. Si hemos violado alguna regla, por ejemplo, nos faltó una coma o nos sobra un paréntesis, mostrará un mensaje de error y debemos editar nuestro programa para corregirlo. En estos casos, hay que interpretar el mensaje de error, revisar el código y corregir el error.Errores de sintaxis. Tal como el lenguaje humano, los lenguajes de programación tienen su propio vocabulario y su propia sintaxis, que es el conjunto de reglas gramaticales que establecen cómo se pueden combinar las distintas partes. Estas reglas sintácticas determinan que ciertas instrucciones están correctamente construidas, mientras que otras . Cuando ejecutamos un programa, el compilador o el intérprete chequea si el mismo es sintácticamente correcto. Si hemos violado alguna regla, por ejemplo, nos faltó una coma o nos sobra un paréntesis, mostrará un mensaje de error y debemos editar nuestro programa para corregirlo. En estos casos, hay que interpretar el mensaje de error, revisar el código y corregir el error.Errores lógicos. Se presentan cuando el programa puede ser compilado sin errores pero arroja resultados incorrectos o ningún resultado. El software muestra mensajes de error, debido que, por supuesto, sabe cuál es el resultado deseado, sino que sólo se limita hacer lo que hemos programado. En estos casos hay que revisar el programa para encontrar algún error en su lógica. Este tipo de errores suelen ser los más problemáticos. Algunas ideas para enfrentarlos incluyen volver pensar paso por paso lo que se debería hacer para solucionar el problema y compararlo con lo que se ha programado, agregar pasos para mostrar resultados intermedios o emplear herramientas especializadas de debugging (llamadas debugger) para explorar el código paso paso hasta identificar el error.Errores lógicos. Se presentan cuando el programa puede ser compilado sin errores pero arroja resultados incorrectos o ningún resultado. El software muestra mensajes de error, debido que, por supuesto, sabe cuál es el resultado deseado, sino que sólo se limita hacer lo que hemos programado. En estos casos hay que revisar el programa para encontrar algún error en su lógica. Este tipo de errores suelen ser los más problemáticos. Algunas ideas para enfrentarlos incluyen volver pensar paso por paso lo que se debería hacer para solucionar el problema y compararlo con lo que se ha programado, agregar pasos para mostrar resultados intermedios o emplear herramientas especializadas de debugging (llamadas debugger) para explorar el código paso paso hasta identificar el error.Errores en la ejecución (runtime errors). Se presentan cuando el programa está bien escrito, sin errores lógicos ni sintácticos, pero igualmente se comporta de alguna forma incorrecta. Se dan pesar de que el programa ande bien en el entorno de desarrollo del programador, pero cuando algún usuario lo utiliza en algún contexto particular. Puede ser que se intente abrir un archivo que existe, que el proceso supere la memoria disponible, que tomen lugar operaciones aritméticas definidas como la división por cero, etc.Errores en la ejecución (runtime errors). Se presentan cuando el programa está bien escrito, sin errores lógicos ni sintácticos, pero igualmente se comporta de alguna forma incorrecta. Se dan pesar de que el programa ande bien en el entorno de desarrollo del programador, pero cuando algún usuario lo utiliza en algún contexto particular. Puede ser que se intente abrir un archivo que existe, que el proceso supere la memoria disponible, que tomen lugar operaciones aritméticas definidas como la división por cero, etc.Los errores en la programación son tan comunes, que un científico de la computación muy reconocido, Edsger Dijkstra, dijo una vez: “si la depuración es el proceso de eliminar errores, entonces la programación es el proceso de generarlos”. Ante la presencia de uno, hay más que respirar profundo y con paciencia revisar hasta encontrarlo y solucionarlo.\nFigura 1.11: Encontrando un bug en un programa.\n","code":""},{"path":"introducción-a-la-programación.html","id":"procesador-ambiente-y-acciones","chapter":"1 Introducción a la Programación","heading":"1.6 Procesador, ambiente y acciones","text":"Hemos definido un algoritmo como una lista de instrucciones para resolver un problema. En este contexto, se entiende por procesador todo agente capaz de comprender los pasos de un algoritmo y ejecutar el trabajo indicado por el mismo. Para cumplir con el objetivo, el procesador emplea ciertos recursos que tiene disposición. Todos los elementos disponibles para ser utilizados por el procesador constituyen su entorno o ambiente. Cada una de las instrucciones que componen el algoritmo modifican el entorno de alguna manera y se denominan acciones.Ejemplificaremos estos conceptos con los siguientes ejemplos:Ejemplo 1Problema: preparar una tortilla de 6 huevos.Entorno: una mesa, una hornalla, una sartén, un plato, un tenedor, aceite, una fuente con huevos, un tarro de basura.Procesador: una persona adulta.Acciones comprensibles por el procesador: agarrar un huevo, romper un huevo en un plato, batir huevos, poner aceite, poner en la sartén, poner al fuego, retirar del fuego, tirar las cáscaras, encender el fuego.¿Cuál es un algoritmo adecuado para solucionar este problema? Podría ser:Ejemplo 2Problema: calcular el factorial del número 5.Entorno: se dispone de una calculadora común.Procesador: una persona adulta.Acciones comprensibles por el procesador: pulsar teclas de la calculadora.¿Cuál es un algoritmo adecuado para solucionar este problema? Podría ser:Las acciones del algoritmo pueden clasificarse en función de su complejidad:Acción primitiva: acción sencilla directamente realizable por el procesador sin necesidad de contar con mayor información.Acción compuesta: acción integrada por una sucesión de acciones primitivas.La descripción de un algoritmo en términos de acciones compuestas puede facilitar su comprensión, pero al desarrollar el programa será necesario descomponerlas en acciones primitivas que son las que realmente ejecuta el procesador. Por ejemplo, la acción compuesta en el ejemplo de la tortilla de “romper seis huevos en un plato” puede descomponerse en acciones más simples:En el contexto de la resolución de un problema computacional, el procesador será la computadora; las acciones estarán dadas por las instrucciones disponibles en el lenguaje de programación utilizado o las que podamos crear en base al mismo; y el ambiente estará constituido por un conjunto de variables, estructuras de datos, funciones y otros elementos que serán de utilidad en la programación.","code":"ALGORITMO: \"Preparar una tortilla de 6 huevos\"\nCOMENZAR\n    ROMPER seis huevos en un plato\n    TIRAR las cáscaras en el tacho\n    BATIR los huevos\n    CALENTAR aceite en la sartén\n    PONER el contenido del plato en la sartén\n    ESPERAR diez minutos\n    RETIRAR la tortilla del fuego\n    APAGAR el fuego\nFINALGORITMO: \"Calcular 5!\"\nCOMENZAR\n    PULSAR [ON]\n    PULSAR [1]\n    PULSAR [X]\n    PULSAR [2]\n    PULSAR [X]\n    PULSAR [3]\n    PULSAR [X]\n    PULSAR [4]\n    PULSAR [X]\n    PULSAR [5]\n    PULSAR [=]\n    MOSTRAR la pantalla\nFINREPETIR 6 VECES\n    TOMAR un huevo\n    GOLPEAR el huevo para generar una fractura en la cáscara\n    EJERCER presión sobre la cáscara\n    DERRAMAR la clara y la yema sobre el plato"},{"path":"introducción-a-la-programación.html","id":"r-y-rstudio","chapter":"1 Introducción a la Programación","heading":"1.7 R y RStudio","text":"Como dijimos anteriormente, pondremos en práctica los conceptos sobre programación utilizando R, un lenguaje orientado la realización de procesos estadísticos y gráficos. diferencia de muchos otros, este es un software libre y gratuito: se distribuye bajo la licencia GNU GPLv2 que establece la libertad de usarlo con cualquier propósito, de ver cómo fue hecho, cómo funciona y modificarlo, de distribuir copias y crear contribuciones y agregados para que estén disponibles para otros 5.Si bien R será nuestro medio de comunicación con la computadora, vamos usar otro programa que brinda algunas herramientas para facilitar nuestro trabajo de programación, es decir, vamos usar un entorno de desarrollo integrado (o IDE, por integrated development environment). Un IDE es un programa que hace que la codificación sea más sencilla porque permite manejar varios archivos de código, visualizar el ambiente de trabajo, utilizar resaltado con colores para distintas partes del código, emplear autocompletado para escribir más rápido, explorar páginas de ayuda, implementar estrategias de depuración e incluso intercalar la ejecución de instrucciones con la visualización de los resultados mientras avanzamos en el análisis o solución del problema. El IDE más popularmente empleado para programar con R es RStudio y será el programa que estaremos usando todo el tiempo.Para instalar estos programas, se debe visitar las páginas oficiales de R y de RStudio, descargar los instaladores y ejecutarlos. En este enlace se presenta un video con la instalación completa.","code":""},{"path":"introducción-a-la-programación.html","id":"organización-de-rstudio","chapter":"1 Introducción a la Programación","heading":"1.7.1 Organización de RStudio","text":"Cuando se abre RStudio se pueden visualizar cuatro paneles:\nFigura 1.12: Captura de pantalla de RStudio\nla izquierda:\nArriba está el editor de archivos. Es el lugar donde escribiremos y editaremos nuestros programas, para luego guardarlos (una especie de Bloc de Notas o de un Word muy simple). La primera vez que se abre RStudio después de su instalación puede ser que este panel esté presente, pero aparece si vamos File > New File > R Script, con el atajo Ctrl + Shift + N o haciendo clic en el primer ícono de la barra de herramientas. Podemos abrir varios archivos la vez.\nAbajo está la consola. Es la ventana que se comunica con R. través de ella se envían las instrucciones R para que las evalúe (también decimos, que las ejecute o corra) y se visualizan los resultados.\nla izquierda:Arriba está el editor de archivos. Es el lugar donde escribiremos y editaremos nuestros programas, para luego guardarlos (una especie de Bloc de Notas o de un Word muy simple). La primera vez que se abre RStudio después de su instalación puede ser que este panel esté presente, pero aparece si vamos File > New File > R Script, con el atajo Ctrl + Shift + N o haciendo clic en el primer ícono de la barra de herramientas. Podemos abrir varios archivos la vez.Abajo está la consola. Es la ventana que se comunica con R. través de ella se envían las instrucciones R para que las evalúe (también decimos, que las ejecute o corra) y se visualizan los resultados.Arriba la derecha hay un panel con algunas pestañas:\nEnvironment (ambiente): muestra todos los elementos que componen al ambiente o entorno.\nHistory (historial): lista todas las instrucciones que R ha corrido anteriormente.\nOtras más que nos interesan por ahora\nArriba la derecha hay un panel con algunas pestañas:Environment (ambiente): muestra todos los elementos que componen al ambiente o entorno.History (historial): lista todas las instrucciones que R ha corrido anteriormente.Otras más que nos interesan por ahoraAbajo la derecha hay otro panel con más pestañas:\nFiles: explorador de archivos de la computadora\nPlots: ventana donde aparecen los gráficos si es que nuestro código produce alguno\nPackages: listado de los “paquetes” que tenemos instalados (ver más adelante)\nHelp: manual de ayuda sobre todas las funciones de R\nViewer: espacio para ver salidas de los programas con algún componente dinámico o interactivo.\nAbajo la derecha hay otro panel con más pestañas:Files: explorador de archivos de la computadoraPlots: ventana donde aparecen los gráficos si es que nuestro código produce algunoPackages: listado de los “paquetes” que tenemos instalados (ver más adelante)Help: manual de ayuda sobre todas las funciones de RViewer: espacio para ver salidas de los programas con algún componente dinámico o interactivo.","code":""},{"path":"introducción-a-la-programación.html","id":"uso-de-la-consola","chapter":"1 Introducción a la Programación","heading":"1.7.2 Uso de la consola","text":"Podemos usar la consola de R que encontramos en el panel de la izquierda para introducir allí nuestras instrucciones y al hacer Enter serán evaluadas, produciendo algún resultado. Por ejemplo, podemos hacer algunos cálculos matemáticos como dividir, multiplicar, sumar, restar, calcular potencias, logaritmos, raíces y mucho más:Si bien podemos escribir nuestras instrucciones en la consola y dar Enter para que se ejecuten, en general queremos que queden escritas y guardadas en el archivo de código, por eso vamos escribir nuestros programas en el panel de arriba la izquierda. Una vez que escribimos una instrucción en el script, podemos correrla (es decir, enviarla la consola para que se ejecute) haciendo clic en el ícono Run o con el atajo Ctrl + Enter. De esta forma, se corre la línea en la cual está el cursor o las líneas que hayamos seleccionado.En todo lenguaje de programación existe un caracter especial que, al ser colocado al comienzo de una línea de código, le indica al software que dicha línea debe ser evaluada. Esto se utiliza para incluir comentarios, es decir, líneas que expresan en español explicaciones o aclaraciones para nosotros mismos u otros que puedan utilizar nuestro código. También se utiliza para añadir encabezados con descripciones sobre el script, o indicar distintas secciones o partes en el programa. En R, este caracter especial es el símbolo numera (#). Si corremos líneas que empiezan con #, R hará nada con ellas, las salteará. Por ejemplo","code":"\n1 + 2[1] 3\n5 * 3[1] 15\nexp(2)[1] 7.389056\nsqrt(100)[1] 10\n1 / 0[1] Inf\n(2 + 3i) * (3 + 6i)[1] -12+21i\n1i ^ 2[1] -1+0i\n5^1[1] 5\n# 5^2\n5^3[1] 125"},{"path":"introducción-a-la-programación.html","id":"diseño-del-sistema-r","chapter":"1 Introducción a la Programación","heading":"1.7.3 Diseño del sistema R","text":"R Se divide en dos partes:La base (R Base), que se instala cuando descargamos el programa desde CRAN (“Comprehensive R Archive Network”). Contiene, entre otras cosas, una serie de herramientas básicas y fundamentales de R.La base (R Base), que se instala cuando descargamos el programa desde CRAN (“Comprehensive R Archive Network”). Contiene, entre otras cosas, una serie de herramientas básicas y fundamentales de R.Paquetes adicionales. Un paquete es un conjunto de archivos que se descarga de forma opcional desde CRAN u otros repositorios y que sirven para hacer alguna tarea especial. Por ejemplo, para poder hacer gráficos lindos, se puede usar un paquete que se llama ggplot2.Paquetes adicionales. Un paquete es un conjunto de archivos que se descarga de forma opcional desde CRAN u otros repositorios y que sirven para hacer alguna tarea especial. Por ejemplo, para poder hacer gráficos lindos, se puede usar un paquete que se llama ggplot2.Como dijimos antes, en la pestaña Packages del panel de abajo la derecha tiene el listado de todos los paquetes que ya están instalados (muchos vienen con R Base). Allí también hay un botón para instalar nuevos, aunque otra opción es correr la instrucción install.packages(\"nombredelpaquete\"), por ejemplo, install.packages(\"ggplot2\"). También es posible instalar paquetes publicados en otros repositorios6.Un paquete se instala una sola vez, pero cada vez que lo queramos usar debemos cargarlo para que las herramientas que trae queden nuestra disposición. Eso se hace con la instrucción library(\"nombredelpaquete\"), por ejemplo, library(\"ggplot2\").","code":""},{"path":"introducción-a-la-programación.html","id":"guía-de-estilo","chapter":"1 Introducción a la Programación","heading":"1.8 Guía de estilo","text":"Es sumamente importante mantener la prolijidad en la escritura tanto del pseudocódigo como de los programas, para facilitar la lectura de los mismos, especialmente cuando estamos trabajando con problemas largos. Siempre hay que tener en cuenta de que cuando escribimos un programa, tenemos dos públicos potenciales: integrantes de nuestro equipo de trabajo que tienen leer el código y hacer sus propios aportes y nosotros mismos en el futuro, cuando retomemos código hecho en el pasado y necesitemos interpretar qué es lo que hicimos hacer.Es por eso que se establecen conjuntos de reglas para controlar y unificar la forma de escribir programas, que se conocen como guía de estilo. Estas reglas cubren aspectos como, por ejemplo, la forma de escribir comentarios en el código, la utilización de espacios o renglones en blanco, el formato de los nombres para los elementos que creamos nosotros mismos (como las funciones) y para los archivos que generamos, etc. Una guía de estilo indica la única forma de escribir código, ni siquiera la forma correcta de hacerlo, sino que establece una convención para que todos trabajen de la misma forma, basándose en costumbres que sí se ha visto que pueden tener más ventajas que otras.Por ejemplo, para programar en R, existe una guía de estilo llamada tidyverse style guide, que es la que utilizan la gente de Google y de RStudio. En este curso vamos adherir sus recomendaciones. Si bien es una lectura muy interesante, particularmente si tenés intenciones de profundizar tus conocimientos sobre programación en R, es necesario que lean dicha guía completa. Por ahora es suficiente con que imiten con atención el estilo que usamos en los ejemplos provistos en esta guía.Recordemos siempre que seguir un buen estilo para programar es como hacer uso de una correcta puntuación cuando escribimos, podemos entendernos sin ella, peroesmuchomasdificilleerloqueescribimossinolarespetamosno?","code":""},{"path":"objetos-y-operadores.html","id":"objetos-y-operadores","chapter":"2 Objetos y operadores","heading":"2 Objetos y operadores","text":"Hemos mencionado que para resolver un problema computacional se necesita de un procesador, capaz de entender y ejecutar ciertas acciones partir de ciertos elementos disponibles en el ambiente o entorno. En este capítulo vamos aprender acerca de dichos elementos, los que llamamos objetos.","code":""},{"path":"objetos-y-operadores.html","id":"objetos","chapter":"2 Objetos y operadores","heading":"2.1 Objetos","text":"Los objetos son las distintas piezas de información, o más sencillamente, datos, que componen al entorno y que el procesador debe manipular para resolver una tarea. Las distintas acciones del algoritmo van creando o modificando los objetos del entorno. medida que avancemos, veremos que hay distintas clases de objetos, algunos con estructuras más simples y otros más complejos. Es más, cada lenguaje de programación propone su propio catálogo de clases de objetos y cada programador puede crear otras nuevas. Sin embargo, en general todos los lenguajes tienen en común el hecho de que sus objetos pueden almacenar los siguientes tres tipos de datos básicos, conocidos como tipos de datos primitivos:Datos de tipo numérico: representan valores escalares de forma numérica y permiten realizar operaciones aritméticas comunes. Ejemplo: 230, 2.Datos de tipo carácter: representan texto y es posible hacer operaciones matemáticas con ellos. Representamos estos valores entre comillas. Ejemplo: “hola”, “chau123”Datos de tipo lógico: pueden tomar dos valores (VERDADERO o FALSO), ya que representan el resultado de alguna comparación entre otros objetos. En R, estos valores son TRUE y FALSE, escritos sin comillas.De manera general, al nombre de un objeto se le dice identificador, el cual es una secuencia de caracteres alfanuméricos que sirve para identificarlo lo largo del algoritmo. Nombrar los objetos hace posible referirse los mismos. La elección de los identificadores es una tarea del programador, pero cada lenguaje tiene sus propias reglas. Por ejemplo, en R los nombres de los objetos:Deben empezar con una letra o un punto (pueden empezar con un número).Sólo pueden contener letras, números, guiones bajos y puntos (se puede forzar R para que acepte nombres con otros caracteres, pero es aconsejable).se pueden usar las siguientes palabras como nombres, ya que son palabras claves reservadas para R: break, else, FALSE, , function, , Inf, NA, NaN, next, repeat, return, TRUE, .Es aconsejable elegir un nombre que sea representativo de la información que va guardar el objeto, ya que esto facilita la lectura y la comprensión tanto del algoritmo como del programa. Por ejemplo, si se necesita un objeto para guardar el valor numérico del precio de algún producto, el identificador p sería una mala elección, mientras que precio sería mejor. Si se necesitan varios identificadores para distinguir los precios de diversos productos, podríamos usar algo como precio_manzana, precio_banana, etc. Otra opción podría ser preciomanzana o precioManzana, pero en este curso seguiremos la convención de usar guiones bajos para facilitar la lectura de los nombres elegidos. sería posible usar como identificador precio manazana, puesto que un nombre puede tener espacios.Ciertos objetos almacenan temporalmente un valor durante la ejecución de un proceso y su contenido puede cambiar mientras corre el programa. Este tipo de objetos reciben el nombre de variables. Por ejemplo, en un programa creado para un comercio puede existir un objeto llamado stock (identificador) de tipo numérico que representa la cantidad de artículos disponibles y cuyo valor se modifica cada vez que se registra una nueva venta. Podemos pensar una variable como una caja etiquetada con un nombre (su identificador) y que guarda un valor (numérico, lógico o de caracter).\nFigura 2.1: La variable contiene al valor 5.\nSi un objeto tiene siempre necesariamente un valor fijo, se dice que es una constante. El valor es siempre el mismo para cualquier ejecución del programa, es decir, puede cambiar de una ejecución otra. Son ejemplos de constantes el número de meses del año, las constantes matemáticas tales como el número \\(\\pi\\), los factores de conversión de unidades de medida, etc. Las constantes pueden usarse literalmente, es decir, usando explícitamente el valor, o también través de un objeto que asocie un identificador al valor constante (por ejemplo, asociar el nombre pi la constante 3.14159265).","code":""},{"path":"objetos-y-operadores.html","id":"declaración-de-variables-y-constantes","chapter":"2 Objetos y operadores","heading":"2.1.1 Declaración de variables y constantes","text":"Al expresar nuestros algoritmos en pseudocódigo tomaremos la costumbre de declarar al inicio del mismo las variables y constantes necesarias para resolver el problema, explicitando su identificador y determinando el tipo de valor que guarda. Muchos lenguajes de programación utilizan esta declaración para reservar en la memoria de la computadora un espacio para almacenar la información correspondiente de manera adecuada.Veamos un ejemplo:Una vez que una variable o constante ha sido definida con un tipo particular, es incorrecto intentar asignarle un valor de otro tipo, por ejemplo, asignarle la variable radio del ejemplo anterior un valor de tipo caracter. Esto generaría ambigüedad, además de que en ciertos lenguajes de programación produciría un error.R es un lenguaje dinámico que requiere la declaración previa de las variables que serán utilizadas, sino que estas pueden definirse dinámicamente lo largo del programa. Por eso, incluiremos declaración de variables y constantes sólo en los algoritmos y cuando estos sean traducidos R. Al necesitar una declaración previa, en R es posible asignar, por ejemplo, un valor de tipo caracter un identificador que anteriormente contenía un valor de tipo numérico, pero trataremos de evitar esto.","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n        ...restantes acciones del algoritmo...\nFIN"},{"path":"objetos-y-operadores.html","id":"acción-de-asignación","chapter":"2 Objetos y operadores","heading":"2.1.2 Acción de asignación","text":"Para hacer que una variable guarde un determinado valor se recurre una acción de asignación. Mediante asignaciones podemos dar valores iniciales las variables, modificar el valor que tenían hasta el momento o guardar en ellas resultados intermedios o finales del algoritmo.En pseudocódigo expresaremos la asignación como se muestra en estos ejemplos:Si intervienen variables o constantes en la expresión la derecha de una acción de asignación, se usará el valor que tengan las mismas en ese momento. Por ejemplo, la siguiente secuencia de acciones en un algoritmo:resultará en que las variables var1, var2 y var3 tengan almacenados los valores 7, 2 y 7 respectivamente. Un caso particular se da cuando una variable se le asigna el valor de una operación de la que forma parte la misma variable. Por ejemplo:","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n    pi <- 3.14159265358979\n    radio <- 3\n    ...restantes acciones del algoritmo...\nFINvar1 <- 2\nvar2 <- var1\nvar1 <- 7\nvar3 <- var1stock <- 43\nventas <- 29\ncompras <- 12\nstock <- stock - ventas + compras"},{"path":"objetos-y-operadores.html","id":"objetosenR","chapter":"2 Objetos y operadores","heading":"2.1.3 Creación y manejo de objetos en R","text":"En R también se usa el operador “flechita” para asignar valores variables. Como lo vamos usar muchísimas veces, es conveniente recordar su shortcut: Alt + - (teclas Alt y guión medio). Como ya mencionamos antes, R es un lenguaje dinámico, lo cual significa que tenemos que declarar las variables antes de asignarles un valor. Por ejemplo, si necesitamos registrar el peso y lugar de nacimiento de una persona, solamente tenemos que hacer:En este caso, lugar_nacimiento es un objeto de tipo carácter, ya que la información que contiene es \"Bombal\", y peso_nacimiento es un objeto numérico. Vale aclarar que en R el punto decimal se representa con el punto . y con la coma , como solemos escribir habitualmente, por lo que el número indicado se lee “tres coma cuatrocientos veintitrés” y “tres mil cuatrocientos veintitrés”. Asimismo, se usan separadores de miles al escribir los números.Por otro lado, R provee algunas funciones para poder averiguar en cualquier momento qué tipo de dato está almacenado en alguna variable. Todavía hemos definido formalmente las funciones, pero por ahora nos alcanza con saber que son otro tipo de objetos que cuando las usamos se encargan de cumplir con alguna tarea específica. Las funciones también tienen un nombre (identificador) y están seguidas por un par de paréntesis, dentro de los cuales se escriben opciones para que ellas operen. La función class() es la que nos dice qué tipo de dato hay en una variable:También hay algunas funciones que devuelven TRUE o FALSE modo de respuesta cuando le preguntamos R si una variable tiene un dato de tipo numérico, caracter o lógico:Todos los objetos que vamos definiendo en nuestro algoritmo y, posteriormente, en nuestro programa, forman parte del ambiente. En Rstudio podemos ver listados todos los objetos presentes en el ambiente en la pestaña Environment del panel superior derecho. También podemos ver en la consola un listado de todos los nombres de los objetos que existen en el ambiente con la función ls(), por ejemplo:Es probable que mientras estamos escribiendo el código, necesitemos probar si algunas partes funcionan y para eso corremos algunas líneas de código, creando objetos en el ambiente. Entre intento e intento, probablemnte necesitemos borrar alguno o todos esos objetos que se crearon, para poder comenzar con un ambiente libre. Si deseamos borrar todos los objetos del ambiente podemos correr la sentencia rm(list = ls()) o hacer clic en el ícono de la escoba en el panel Environment. Si queremos eliminar sólo un objeto debemos ejecutar la función rm(), indicando entre paréntesis el identificador del objeto que deseamos borrar, por ejemplo:Todos los objetos generados viven temporalmente en la memoria de la computadora mientras dure la sesión de R en la que estamos trabajando. Si cerramos R, toda esa información desaparecerá. Muchas veces eso es algo deseable: una vez finalizado el programa, guardamos algún resultado que nos interese (por ejemplo, un conjunto de datos en un archivo de Excel) y todos los objetos del ambiente que fuimos necesitando en el camino son descartados. Sin embargo, en otras oportunidades nos interesa guardar de forma permanente en la computadora una copia de todo lo que se encuentra en el ambiente en un archivo dentro de alguna carpeta. Los archivos que contienen los objetos creados en R tienen extensión .RData. Estos archivos se generan con el ícono de guardar en la pestaña Environment o usando la función save.image(), que necesita que escribamos entre los paréntesis la carpeta donde guardaremos el archivo y el nombre elegido para el mismo, por ejemplo:Si por el contrario necesitamos importar al ambiente objetos que estén guardados en algún lugar de nuestra compu en un archivo .RData, podemos usar el ícono de abrir en la pestaña Environment o la función load(), por ejemplo:","code":"lugar_nacimiento <- \"Bombal\"\npeso_nacimiento <- 3.423\nvar1 <- 2\nvar2 <- \"Hola Mundo\"\nvar3 <- TRUE\nclass(var1)[1] \"numeric\"\nclass(var2)[1] \"character\"\nclass(var3)[1] \"logical\"\nis.numeric(var1)[1] TRUE\nis.numeric(var2)[1] FALSE\nis.character(var3)[1] FALSE\nis.logical(var3)[1] TRUE\nls()[1] \"var1\" \"var2\" \"var3\"\nrm(var1)\nsave.image(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")\nload(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")"},{"path":"objetos-y-operadores.html","id":"operadores","chapter":"2 Objetos y operadores","heading":"2.2 Operadores","text":"El desarrollo de un algoritmo involucra la necesidad de efectuar operaciones de distinto tipo entre los valores guardados en los objetos: suma, resta, concatenación de caracteres, comparaciones, etc. Los elementos que describen el tipo de operación realizar entre dos objetos se denominan operadores.","code":""},{"path":"objetos-y-operadores.html","id":"operadores-aritméticos","chapter":"2 Objetos y operadores","heading":"2.2.1 Operadores aritméticos","text":"Los operadores aritméticos permiten realizar operaciones matemáticas con datos de tipo numérico. continuación presentamos su simbología más comúnmente empleada la hora de expresarlos en pseudocódigo, junto con sus equivalentes en el lenguaje R:Tabla 2.1:  Operadores aritméticos.Los operadores aritméticos actúan con un orden de prioridad establecido, también conocido como orden de evaluación u orden de precedencia, tal como estamos acostumbrados en matemática. Las expresiones entre paréntesis se evalúan primero. Si hay paréntesis anidados se evalúan desde adentro hacia afuera. Dentro de una misma expresión, en R los operadores se evalúan en este orden:Potenciación (^)División entera y módulo (%/%, %%, y cualquier otro operador especial del tipo %...%)Multiplicación y división (*, /)Suma y resta (+, -)Si la expresión presenta operadores con igual nivel de prioridad, se evalúan de izquierda derecha. Veamos algunos ejemplos:Tabla 2.2:  Ejemplos de operaciones aritméticas según el orden de precedencia de R.","code":""},{"path":"objetos-y-operadores.html","id":"operadores-relacionales-o-de-comparación","chapter":"2 Objetos y operadores","heading":"2.2.2 Operadores relacionales o de comparación","text":"Los operadores relacionales sirven para comparar dos valores de cualquier tipo y dan como resultado un valor lógico: VERDADERO (T o TRUE en R) o FALSO (F o FALSE en R).Tabla 2.3:  Operadores relacionales o de comparación.Otros ejemplos:Es interesante notar que primero se evalúan las operaciones cada lado de los operadores relacionales y luego se hace la comparación. Es decir, los operadores aritméticos preceden los relacionales en el orden de prioridad. Por eso, en los ejemplos anteriores eran necesarios los paréntesis y podríamos poner directamente:Si bien en pseudocódigo podemos usar tanto = o == para probar la igualdad entre dos elementos, en R debemos usar = para este fin, puesto que = es un operador de comparación sino de asignación, parecido al <-.","code":"\na <- 3\nb <- 4\nd <- 2\ne <- 10\nf <- 15\n(a * b) == (d + e)[1] TRUE\n(a * b) != (f - b)[1] TRUE\na * b == d + e[1] TRUE\na * b != f - b[1] TRUE"},{"path":"objetos-y-operadores.html","id":"operadores-lógicos","chapter":"2 Objetos y operadores","heading":"2.2.3 Operadores lógicos","text":"Mientras que los operadores relacionales comparan cualquier tipo de valores, los operadores lógicos sólo toman operandos de tipo lógico y producen también un resultado lógico. Los operadores lógicos que utilizaremos son:Tabla 2.4:  Operadores lógicos.La operación de conjunción (Y) devuelve un valor VERDADERO sólo si son verdaderas ambas expresiones que vincula. Ejemplo: (3 > 2) Y (3 > 5) resulta en VERDADERO Y FALSO y esto es FALSO.La operación de disyunción (O) devuelve un valor VERDADERO si al menos una de las dos expresiones que vincula es verdadera. Ejemplo: (3 > 2) O (3 > 5) resulta en VERDADERO O FALSO y esto es VERDADERO.La operación de negación () niega un valor lógico, es decir, devuelve el opuesto. Ejemplo: (3 > 2) resulta en VERDADERO y esto es FALSO.Tanto para la conjunción como para la disyunción, R provee dos operadores, repitiendo o el símbolo correspondiente: && vs &; || vs |. Hay una diferencia entre ellos que por ahora viene al caso, pero vamos señalar que por ahora estaremos usando las versiones presentadas anteriormente: && y ||.La tabla de verdad o tabla de valores de verdad se utiliza para mostrar los resultados de estas operaciones lógicas:Tabla 2.5:  Operadores relacionales o de comparación.Con estos operadores es posible construir evaluaciones lógicas más elaboradas como los siguientes ejemplos:Evaluar si el valor de ancho está entre 5 y 7: (ancho > 5) Y (ancho < 7).\n\nancho <- 6.4\n(ancho > 5) && (ancho < 7)\n[1] TRUEEvaluar si el valor de ancho está entre 5 y 7: (ancho > 5) Y (ancho < 7).Establecer si una persona estudia Estadística o Economía: (carrera == \"Estadística\") O (carrera == \"Economía\").\n\ncarrera <- \"Administración\"\n(carrera == \"Estadística\") || (carrera == \"Economía\")\n[1] FALSEEstablecer si una persona estudia Estadística o Economía: (carrera == \"Estadística\") O (carrera == \"Economía\").Determinar si una persona estudia Estadística: (carrera == \"Estadística\").\n\ncarrera <- \"Administración\"\n!(carrera == \"Estadística\")\n[1] TRUEDeterminar si una persona estudia Estadística: (carrera == \"Estadística\").Verificar que el valor guardado en x sea igual 2 ni 3:\nOpción correcta 1: (x != 2) Y (x != 3)\n\n# Da verdadero porque x es ni 2 ni 3\nx <- 10\n(x != 2) && (x != 3)\n[1] TRUE\n\n# Da falso porque x es igual 3\nx <- 3\n(x != 2) && (x != 3)\n[1] FALSE\nOpción correcta 2: ((x == 2) O (x == 3))\n\n# Da verdadero porque x es ni 2 ni 3\nx <- 10\n!(x == 2 || x == 3)\n[1] TRUE\n\n# Da falso porque x es igual 3\nx <- 3\n!(x == 2 || x == 3)\n[1] FALSE\nOpción incorrecta: (x != 2) O (x != 3)\n\n# Da verdadero, porque al ser x igual 3, es distinto de 2,\n# haciendo que la primera parte sea verdadera \nx <- 3\n(x != 2) || (x != 3)\n[1] TRUEVerificar que el valor guardado en x sea igual 2 ni 3:Opción correcta 1: (x != 2) Y (x != 3)Opción correcta 2: ((x == 2) O (x == 3))Opción incorrecta: (x != 2) O (x != 3)Este último ejemplo se relaciona con las Leyes de Morgan: siendo b y c valores lógicos, se tiene:(b O c) es equivalente b Y c.(b Y c) es equivalente b O c.Es importante notar que todos los paréntesis usados en el código de R del ejemplo 4 son innecesarios, puesto que los operadores relacionales preceden los lógicos en el orden de prioridad. Sin embargo, veces preferimos usar paréntesis para que la lectura sea más sencilla. En el siguiente ejemplo, ambas expresiones son equivalentes:Para pensar: predecir el resultado de las siguientes operaciones y luego verificar:","code":"\nancho <- 6.4\n(ancho > 5) && (ancho < 7)[1] TRUE\ncarrera <- \"Administración\"\n(carrera == \"Estadística\") || (carrera == \"Economía\")[1] FALSE\ncarrera <- \"Administración\"\n!(carrera == \"Estadística\")[1] TRUE\n# Da verdadero porque x no es ni 2 ni 3\nx <- 10\n(x != 2) && (x != 3)[1] TRUE\n# Da falso porque x es igual a 3\nx <- 3\n(x != 2) && (x != 3)[1] FALSE\n# Da verdadero porque x no es ni 2 ni 3\nx <- 10\n!(x == 2 || x == 3)[1] TRUE\n# Da falso porque x es igual a 3\nx <- 3\n!(x == 2 || x == 3)[1] FALSE\n# Da verdadero, porque al ser x igual a 3, es distinto de 2,\n# haciendo que la primera parte sea verdadera \nx <- 3\n(x != 2) || (x != 3)[1] TRUE\nancho <- 6.4\n(ancho > 5) && (ancho < 7)[1] TRUE\nancho > 5 && ancho < 7[1] TRUE\nx <- 2\ny <- -2\nx > 0 && y < 0\nx > 0 || y < 0\n!(x > 0 && y < 0)"},{"path":"objetos-y-operadores.html","id":"evaluación-en-cortocircuito","chapter":"2 Objetos y operadores","heading":"2.2.3.1 Evaluación en cortocircuito","text":"Para evaluar la operación de conjunción x && y, en R se comienza por evaluar la expresión del primer operando x y si su resultado es FALSE ya se evalúa la expresión y del segundo operando. Esto es porque si x es FALSE, el resultado de x && y ya depende de y, será siempre FALSE. Por este motivo se dice que el operador && se evalúa en cortocircuito. La evaluación en cortocircuito evita realizar operaciones innecesarias7.Por ejemplo:La operación de disyunción también se evalúa en cortocircuito, es decir, si se encuentra que uno de los operandos es TRUE, hace falta evaluar los restantes, puesto que el resultado general será TRUE:","code":"\nx <- 1\ny <- 2\n\n# La primera parte da TRUE, se continúa con la segunda, pero da error porque no\n# existe un objeto llamado z\n(y > x) && (x > z)Error in eval(expr, envir, enclos): object 'z' not found\n# La primera parte da FALSE, entonces toda la operación será FALSE, no se\n# continúa con la segunda parte, con lo cual no se intenta usar el objeto\n# inexistente z y no hay error\n(y < x) && (x > z)[1] FALSE\n# Es TRUE porque la primera parte es TRUE, sin evaluar la segunda, que daría\n# error\n(y > x) || (x > z)[1] TRUE\n# Como la primera parte es FALSE, debe evaluar la segunda, no encuentra a z y da\n# error\n(x > y) || (x > z)Error in eval(expr, envir, enclos): object 'z' not found"},{"path":"objetos-y-operadores.html","id":"orden-de-precedencia-completo-en-r","chapter":"2 Objetos y operadores","heading":"2.2.3.2 Orden de precedencia completo en R","text":"Resumiendo la información anterior, continuación se presenta el orden completo de precedencia de los operadores en R que utilizaremos (hay algunos más que pueden ver en ?Syntax):Tabla 2.6:  Orden de precedencia de los operadores en R.Dentro de una misma expresión, operadores con igual prioridad se evalúan de izquierda derecha.","code":""},{"path":"objetos-y-operadores.html","id":"entrada-y-salida-de-información","chapter":"2 Objetos y operadores","heading":"2.3 Entrada y salida de información","text":"En la resolución de problemas puede ser necesario que alguna fuente externa (como un usuario del programa) provea información. En estos casos se debe registrar dicha información como un valor que debe ser asignado una variable. Cuando escribamos nuestros algoritmos en pseudocódigo, para esto utilizaremos la acción LEER. Cuando deseamos mostrar un resultado en un mensaje empleamos la acción ESCRIBIR. Las palabras o frases literales que se desean mostrar en el mensaje deben estar encerradas entre comillas porque son cadenas de texto, mientras que si se desea mostrar el valor de una variable se debe escribir su identificador sin comillas.Por ahora, en R ejecutaremos la acción LEER mediante la asignación directa de un valor una variable través del operador <-. La acción ESCRIBIR puede ser ejecutada través de la función cat() si se quiere mostrar una frase compuesta. En los casos en los que sólo interesa mostrar un valor (sin escribir una frase) será necesario usar cat(), ya que sencillamente al correr el nombre de un objeto, su valor es mostrado en la consola. En otros casos usaremos la función print(). Ya iremos viendo la utilidad de cada una de estas opciones.Vamos completar el ejemplo del algoritmo para el cálculo del área de un círculo, integrando todo lo mencionado anteriormente:Pseudocódigo:En R:Nota: pi ya es una constante incorporada en R Base, en realidad es necesario crear esta constante y asignarle valor.","code":"ALGORITMO: \"Calcular área de un círculo\"\nCOMENZAR\n    CONSTANTE numérica pi\n    VARIABLE numérica radio, area\n    pi <- 3.14159265358979\n    LEER radio\n    area <- pi * radio^2\n    ESCRIBIR \"El área del círculo es \" area\nFIN\n# PROGRAMA: \"Calcular área de un círculo\" ---------------------------\n\npi <- 3.14159265358979\nradio <- 5\narea <- pi * radio^2\ncat(\"El área del círculo es\", area)El área del círculo es 78.53982"},{"path":"objetos-y-operadores.html","id":"directorio-de-trabajo","chapter":"2 Objetos y operadores","heading":"2.4 Directorio de trabajo","text":"Antes de terminar este capítulo vamos presentar un concepto fundamental acerca de cómo se relaciona R con el sistema opertaivo de nuestra computadora para poder tener acceso nuestros archivos o para generar otros nuevos.Al finalizar la sección 2.1.3 vimos ejemplos en los que se utilizó R para, en primer lugar, generar un archivo llamado objetos.RData con todos los objetos existentes en nuestro ambiente de trabajo y, en segundo lugar, cargar la información que dicho archivo contiene:En ambos casos, dentro de las funciones save.image() y load() se tuvo que escribir la dirección completa que representa cuál es la ubicación exacta de dicho archivo en la computadora: C:/Users/Marcos/Documentos/Facultad/objetos.RData. Esto significa que el archivo se encuentra en la carpeta Facultad, que su vez está dentro de la carpeta Documentos, dentro de Marcos y dentro de Users, en el disco C de la computadora.Expresiones como C:/Users/Marcos/Documentos/Facultad/objetos.RData reciben el nombre de ruta informática o path y sirven para referenciar de manera exacta la localización ya sea de una carpeta o de un archivo en particular dentro del sistema de archivos que maneja el sistema operativo de la computadora. Un path está compuesto por todos los nombres de los directorios que ordenadamente nos permiten llegar hasta la carpeta o archivo de interés, separados por un carácter que dependiendo del sistema operativo puede ser una barra diagonal / o una barra inversa \\.R siempre está mirando alguna carpeta en particular dentro de la computadora, la cual recibe el nombre directorio de trabajo (o working directory, wd). Por ejemplo, en este momento y en mi computadora, R está posando su atención en una carpeta que se llama introprog y cuya ruta puedo descubrir con la función getwd(), que significa “obtener (get) el directorio de trabajo (wd)”:Esto quiere decir que R puede ver y acceder de manera directa todos los archivos que hay allí, sin necesidad de escribir la ruta completa. Por ejemplo, si en lugar de ejecutar:ejecuto sencillamente:lo que ocurre es que el nuevo archivo se generará en mi directorio de trabajo (carpeta introprog) y en la carpeta Facultad. Del mismo modo, si ejecuto:el software va buscar el archivo objetos.RData en mi directorio de trabajo (carpeta introprog) y va cargar su contenido al ambiente de trabajo. Si en dicha carpeta existe un archivo con ese nombre, obtendremos un mensaje de error muy famoso:El directorio de trabajo por default suele ser la carpeta Documentos o alguna equivalente y es la que vemos en el panel Files de RStudio. Podemos cambiar el directorio de trabajo por cualquier otra carpeta en la que queramos estar trabajando con la función setwd() (“setear el working directory”):Por ejemplo, si estamos resolviendo un trabajo práctico para el cual tenemos varios archivos necesarios guardados en la carpeta tp1, tenemos dos opciones:Sin importar cuál es nuestro directorio de trabajo, hacer referencia dichos archivos con paths completos, por ejemplo:\n\nload(\"/home/marcos/documents/introprog/tp1/objetos.RData\")Sin importar cuál es nuestro directorio de trabajo, hacer referencia dichos archivos con paths completos, por ejemplo:Setear como directorio de trabajo la carpeta del trabajo práctico y hacer un uso directo de los archivos que se encuentren allí:\n\nsetwd(\"/home/marcos/documents/introprog/tp1\")\nload(\"objetos.RData\")Setear como directorio de trabajo la carpeta del trabajo práctico y hacer un uso directo de los archivos que se encuentren allí:Es importante recordar lo siguiente: al escribir paths, R sólo reconoce como caracteres delimitadores entre los nombres de carpetas la barra diagonal / o dos barras invertidas \\\\. Quienes usan el sistema operativo Windows notarán que en el explorador de archivos, las rutas están delimitadas con una sola barra invertida \\. En el contexto de R, debe ser reemplazada por dos barras invertidas o por una sola barra diagonal.","code":"\nsave.image(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")\nload(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")\ngetwd()[1] \"/home/marcos/GitProjects/introprog\"\nsave.image(\"C:/Users/Marcos/Documentos/Facultad/objetos.RData\")\nsave.image(\"objetos.RData\")\nload(\"objetos.RData\")cannot find file 'objetos.RData', probable reason 'No such file or directory'\nsetwd(\"/home/marcos/documents/introprog/tp1\")\ngetwd()\n\"/home/marcos/documents/introprog/tp1\"\nload(\"/home/marcos/documents/introprog/tp1/objetos.RData\")\nsetwd(\"/home/marcos/documents/introprog/tp1\")\nload(\"objetos.RData\")"},{"path":"estructuras-de-control.html","id":"estructuras-de-control","chapter":"3 Estructuras de control","heading":"3 Estructuras de control","text":"Como mencionamos anteriormente, un algoritmo está compuesto por una sucesión ordenada de comandos que se ejecutan uno detrás de otro. Sin embargo, con frecuencia es necesario recurrir comandos especiales que alteran o controlan el orden en el que se ejecutan las acciones. Llamamos estructuras de control del flujo de las acciones al conjunto de reglas que permiten controlar el flujo de las acciones de un algoritmo o programa. Las mismas pueden clasificarse en secuenciales, condicionales e iterativas.","code":""},{"path":"estructuras-de-control.html","id":"estructuras-de-control-secuenciales","chapter":"3 Estructuras de control","heading":"3.1 Estructuras de control secuenciales","text":"Las estructuras secuenciales están compuestas por un número definido de acciones que se ubican en un orden específico y se suceden una tras otra. Los ejemplos que hemos discutido anteriormente están conformados por este tipo de estructura.","code":""},{"path":"estructuras-de-control.html","id":"estructuras-de-control-condicionales","chapter":"3 Estructuras de control","heading":"3.2 Estructuras de control condicionales","text":"En algunas partes de un algoritmo puede ser útil detenerse hacer una pregunta porque se llegó una situación en la que puede haber una o más opciones disponibles para continuar. Dependiendo de la respuesta la pregunta, que siempre deberá ser VERDADERO (TRUE) o FALSO (FALSE), el algoritmo seguirá ciertas acciones e ignorará otras. Estas preguntas y respuestas representan procesos de toma de decisión que conducen diferentes caminos dentro del algoritmo, permitiéndonos que la solución para el problema en cuestión sea flexible y se adapte distintas situaciones. Este tipo de estructuras de control de las acciones reciben el nombre de condicionales (o estructuras de selección) y pueden ser simples, dobles y múltiples.","code":""},{"path":"estructuras-de-control.html","id":"estructuras-condicionales-simples","chapter":"3 Estructuras de control","heading":"3.2.1 Estructuras condicionales simples","text":"Postulan una evaluación lógica y, si su resultado es VERDADERO, se procede ejecutar las acciones encerradas por esta estructura. Se describen en pseudocódigo con la siguiente sintaxis:La palabra SI indica el comando de evaluación lógica, <condición> indica la condición evaluar y Acción/es son las instrucciones que se realizarán sólo si se cumple la condición, es decir, si la evaluación resulta en VERDADERO. Si la condición se verifica, se ejecuta ninguna acción y el algoritmo sigue su estructura secuencial continuación del FIN SI.En R, la estructura que nos permite realizar esto es:Por ejemplo, el siguiente algoritmo registra la edad de una persona y, en el caso de que sea mayor de edad, avisa que puede votar en las elecciones provinciales de Santa Fe:Notar que si bien el uso de sangrías en el código es opcional, decidimos emplearlo para facilitar su lectura. Mantener la prolijidad en nuestros programas es esencial.","code":"SI <condición> ENTONCES\n    Acción/es\nFIN SIif (<condición>) {\n    ...código para ejecutar acciones...\n}ALGORITMO: \"Analizar edad para votar\"\nCOMENZAR\n    VARIABLE numérica edad\n    LEER edad\n    SI edad >= 18 ENTONCES\n        ESCRIBIR \"Edad = \" edad \" años: puede votar\"\n    FIN SI\nFIN\n# Programa: \"Analizar edad para votar\" -------------------------------\nedad <- 21\nif (edad >= 18) {\n    cat(\"Edad =\", edad, \"años: puede votar\")\n}Edad = 21 años: puede votar"},{"path":"estructuras-de-control.html","id":"estructuras-condicionales-dobles","chapter":"3 Estructuras de control","heading":"3.2.2 Estructuras condicionales dobles","text":"Este tipo de estructura añade una acción ejecutarse en el caso de que la condición evaluada se verifique (es decir, devuelve el valor FALSO). La sintaxis es:La palabra ENTONCES antecede las acciones que se realizan si se cumple la condición y la expresión SI las que se realizan si se verifica la misma.En R se utiliza el comando else:Retomando el ejemplo anterior:","code":"SI <condición> ENTONCES\n  Acción/es\nSI NO\n  Acción/es\nFIN SIif (<condición>) {\n    ...código para ejecutar acciones...\n} else {\n    ...código para ejecutar acciones...\n}ALGORITMO: \"Analizar edad para votar\"\nCOMENZAR\n    VARIABLE numérica edad\n    LEER edad\n    SI edad >= 18 ENTONCES\n        ESCRIBIR \"Edad = \" edad \" años: puede votar\"\n    SI NO\n        ESCRIBIR \"Edad = \" edad \" años: no puede votar\"\n    FIN SI\nFIN\n# Programa: \"Analizar edad para votar\" -------------------------------\nedad <- 21\nif (edad >= 18) {\n    cat(\"Edad =\", edad, \"años: puede votar\")\n} else {\n    cat(\"Edad =\", edad, \"años: no puede votar\")\n}Edad = 21 años: puede votar"},{"path":"estructuras-de-control.html","id":"estructuras-condicionales-múltiples-o-anidadas","chapter":"3 Estructuras de control","heading":"3.2.3 Estructuras condicionales múltiples o anidadas","text":"Permiten combinar varias estructuras condicionales para establecer controles más complejos sobre el flujo de las acciones, representando una toma de decisión múltiple. Podemos ejemplificar la sintaxis de la siguiente forma:En la estructura anterior, hay una primera evaluación lógica en la cual si el resultado es VERDADERO, se ejecuta la Acción 1 y nada más. En cambio, si su resultado es FALSO, se procede realizar una segunda evaluación lógica, que da lugar la ejecución de la Acción 2 o de la Acción 3 si su resultado es VERDADERO o FALSO, respectivamente.Se debe notar que luego del primer SI comienza una nueva estructura completa de SI/ENTONCES/SI /FIN SI. Cada SI termina con su propio FIN SI. Al traducir esto R, se vuelve algo más sencillo:El último bloque de acciones (...Acción 3...) se evaluará si ninguna de las condiciones lógicas anteriores fue VERDADERO.En el ejemplo de la edad:","code":"SI <condición 1> ENTONCES\n  Acción 1\nSI NO\n  SI <condición 2> ENTONCES\n    Acción 2\n  SI NO\n    Acción 3\n  FIN SI\nFIN SIif (<condición 1>) {\n    ...Acción 1...\n} else if (<condición 2>) {\n    ...Acción 2...\n} else {\n    ...Acción 3...\n}ALGORITMO: \"Analizar edad para votar\"\nCOMENZAR\n    VARIABLE numérica edad\n    LEER edad\n    SI edad < 18 ENTONCES\n        ESCRIBIR \"Edad = \" edad \" años: no puede votar\"\n    SI NO\n        SI edad >= 70 ENTONCES\n            ESCRIBIR \"Edad = \" edad \" años: puede votar opcionalmente\"\n        SI NO\n            ESCRIBIR \"Edad = \" edad \" años: debe votar obligatoriamente\"\n        FIN SI\n    FIN SI\nFIN\n# Programa: \"Analizar edad para votar\" -------------------------------\nedad <- 21\nif (edad < 18) {\n    cat(\"Edad =\", edad, \"años: no puede votar\")\n} else if (edad >= 70) {\n    cat(\"Edad =\", edad, \"años: puede votar opcionalmente\")\n} else {\n    cat(\"Edad =\", edad, \"años: debe votar obligatoriamente\")\n}Edad = 21 años: debe votar obligatoriamente"},{"path":"estructuras-de-control.html","id":"estructuras-de-control-iterativas","chapter":"3 Estructuras de control","heading":"3.3 Estructuras de control iterativas","text":"Las estructuras de control iterativas son útiles cuando la solución de un problema requiere que se ejecute repetidamente un determinado conjunto de acciones. El número de veces que se debe repetir dicha secuencia de acciones puede ser fijo o puede variar dependiendo de algún dato o condición evaluar en el algoritmo.","code":""},{"path":"estructuras-de-control.html","id":"estructuras-de-control-iterativas-con-un-número-fijo-de-iteraciones","chapter":"3 Estructuras de control","heading":"3.3.1 Estructuras de control iterativas con un número fijo de iteraciones","text":"Se aplican cuando se conoce de antemano el número exacto de veces que se debe repetir una secuencia de acciones. También se conocen como bucles (loops) controlados por un conteo, ya que el algoritmo va contando la cantidad de repeticiones haciendo uso de una variable que recibe el nombre de variable de iteración, índice o conteo.Por ejemplo, imaginemos que queremos escribir un algoritmo que permita calcular la quinta potencia de cualquier número. Para esto, se debe tomar dicho número y multiplicarlo por sí mismo 5 veces. Por lo tanto, una posible solución es:Ya que sabemos que la multiplicación se debe repetir 5 veces, podemos resumir lo anterior con la siguiente estructura:La letra es la variable de iteración. Podríamos haber elegido otra letra u otra palabra en su lugar, pero emplear es una elección bastante común. En este ejemplo, su única función es ir contando la cantidad de veces que se repiten las acciones encerradas dentro de la estructura PARA/FIN PARA. El bloque de instrucciones se repite tantas veces como tarde en llegar 5 partiendo desde 1. Por convención, la variable de iteración la declaramos junto con las otras variables numéricas (como x y resultado).En R, el ejemplo anterior se implementa así:Dado que la variable de iteración toma un valor numérico que va cambiando en cada repetición del bloque, se puede aprovechar para hacer cuentas con el mismo. Por ejemplo, el siguiente algoritmo muestra la tabla del ocho:En lo anterior, \\n es un carácter especial que indica “salto de línea”. Si lo agregamos, los mensajes se imprimirían uno al lado del otro en el mismo renglón:De manera general, la sintaxis para este tipo de estructuras es:Dado un valor inicial <valor1> asignado la <variable>, esta se irá aumentando o disminuyendo según el paso <valor3> hasta llegar tomar el valor <valor2>. Si se indica el paso se asume que la variable de iteración aumenta de uno en uno. En R:Notar en el ejemplo de la quinta potencia que 1:5 es lo mismo que seq(1, 5, 1), pero podemos usar la función seq() en otros contextos más complejos, donde la variable de iteración puede pegar otros saltos en lugar de uno en uno.","code":"ALGORITMO: \"Calcular la quinta potencia\"\nCOMENZAR\n    VARIABLE numérica x, resultado\n    LEER x\n    resultado <- 1\n    resultado <- resultado * x\n    resultado <- resultado * x\n    resultado <- resultado * x\n    resultado <- resultado * x\n    resultado <- resultado * x\n    ESCRIBIR x \"elevado a la quinta es igual a\" resultado\nFINALGORITMO: \"Calcular la quinta potencia\"\nCOMENZAR\n    VARIABLE numérica x, resultado\n    LEER x\n    resultado <- 1\n    PARA i DESDE 1 HASTA 5 HACER\n        resultado <- resultado * x\n    FIN PARA\n    ESCRIBIR x \"elevado a la quinta es igual a\" resultado\nFIN\n# Programa: \"Calcular la quinta potencia\" ------------------------\nx <- 4\nresultado <- 1\nfor (i in 1:5) {\n    resultado <- resultado * x\n}\ncat(x, \"elevado a la quinta es igual a\", resultado)4 elevado a la quinta es igual a 1024ALGORITMO: \"Mostrar tabla del 8\"\nCOMENZAR\n    VARIABLE numérica resultado\n    PARA i DESDE 0 HASTA 10 HACER\n        resultado <- 8 * i\n        ESCRIBIR \"8 x\" i \"=\" resultado\n    FIN PARA\nFIN\n# Programa: \"Mostrar tabla del 8\" -------------------------------\nfor (i in 0:10) {\n    resultado <- 8 * i\n    cat(\"8 x\", i, \"=\", resultado, \"\\n\")\n}8 x 0 = 0 \n8 x 1 = 8 \n8 x 2 = 16 \n8 x 3 = 24 \n8 x 4 = 32 \n8 x 5 = 40 \n8 x 6 = 48 \n8 x 7 = 56 \n8 x 8 = 64 \n8 x 9 = 72 \n8 x 10 = 80 \n# Programa: \"Mostrar tabla del 8\" -------------------------------\nfor (i in 0:10) {\n    resultado <- 8 * i\n    cat(\"8 x\", i, \"=\", resultado)\n}8 x 0 = 08 x 1 = 88 x 2 = 168 x 3 = 248 x 4 = 328 x 5 = 408 x 6 = 488 x 7 = 568 x 8 = 648 x 9 = 728 x 10 = 80PARA <variable> DESDE <valor1> HASTA <valor2> CON PASO <valor3> HACER\n    Acción/es\nFIN PARAfor (<variable> in seq(<valor1>, <valor2>, <valor3>)) {\n    ...Acción/es...\n}"},{"path":"estructuras-de-control.html","id":"estructuras-de-control-iterativas-con-un-número-indeterminado-de-iteraciones","chapter":"3 Estructuras de control","heading":"3.3.2 Estructuras de control iterativas con un número indeterminado de iteraciones","text":"En otras circunstancias se puede necesitar repetir un bloque de acciones sin conocer con exactitud cuántas veces, si que esto depende de algún otro aspecto del algoritmo. Las iteraciones pueden continuar mientras que o hasta que se verifique alguna condición, dando lugar dos tipos de estructuras. Estos casos también se conocen como bucles (loops) controlados por una condición.","code":""},{"path":"estructuras-de-control.html","id":"mientras-que","chapter":"3 Estructuras de control","heading":"3.3.2.1 Mientras que","text":"El conjunto de sentencias se repite mientras que se siga evaluando como VERDADERO una condición declarada al inicio del bloque. Cuando la condición ya se cumple, el proceso deja de ejecutarse. La sintaxis es:En R:Observaciones:La evaluación de la condición se lleva cabo antes de cada iteración, incluso antes de ejecutar el código dentro del bloque por primera vez. Si la condición es FALSO inicialmente, entonces las acciones en el cuerpo de la estructura se ejecutan nunca.La evaluación de la condición sólo se lleva cabo al inicio de cada iteración. Si la condición se vuelve FALSO en algún punto durante la ejecución de un bloque, el programa lo nota hasta que se termine de ejecutar el bloque y la condición sea evaluada antes de comenzar la próxima iteración.Veamos un ejemplo:","code":"MIENTRAS QUE <condición> HACER\n   Acción/es a repetir\nFIN MIENTRASwhile (<condición>) {\n    ...Acción/es a repetir...\n}ALGORITMO: \"Dividir un número por 2 hasta encontrar un valor menor que 0.01\"\nCOMENZAR\n    VARIABLE numérica x\n    LEER x\n    MIENTRAS QUE x >= 0.01 HACER\n        x <- x / 2\n        ESCRIBIR x\n    FIN MIENTRAS\nFIN\nx <- 100\nwhile (x >= 0.01) {\n    x <- x / 2\n    cat(x, \"\\n\")\n}50 \n25 \n12.5 \n6.25 \n3.125 \n1.5625 \n0.78125 \n0.390625 \n0.1953125 \n0.09765625 \n0.04882812 \n0.02441406 \n0.01220703 \n0.006103516 "},{"path":"estructuras-de-control.html","id":"hasta-que","chapter":"3 Estructuras de control","heading":"3.3.2.2 Hasta que","text":"diferencia de la estructura MIENTRAS QUE, la estructura HASTA QUE repite el bloque de acciones hasta que se cumpla una condición, es decir, se ejecuta mientras que dicha condición sea evaluada como FALSA. La sintaxis es:Observación: con la estructura MIENTRAS QUE podría ser que el conjunto de sentencias nunca llegue ejecutarse si desde partida la condición evaluada ya es falsa. Por el contrario, en la estructura HASTA QUE el proceso se realiza al menos una vez, dado que la condición se evalúa al final.El ejemplo anterior empleando este tipo de estructura:En R este tipo de estructura se implementa con la sentencia repeat {}. Si bien continuación se muestra el correspondiente ejemplo, vamos utilizar esta estructura, debido que su escritura es más compleja y que generalmente es posible obtener el mismo resultado con un () {}.","code":"REPETIR\n   Acción/es\nHASTA QUE <condición>ALGORITMO: \"Dividir un número por 2 hasta encontrar un valor menor que 0.01\"\nCOMENZAR\n    VARIABLE numérica x\n    LEER x\n    REPETIR\n        x <- x / 2\n        ESCRIBIR x\n    HASTA QUE x < 0.01\nFIN\nx <- 100\nrepeat {\n    x <- x / 2\n    cat(x, \"\\n\")\n    if (x < 0.01) break\n}50 \n25 \n12.5 \n6.25 \n3.125 \n1.5625 \n0.78125 \n0.390625 \n0.1953125 \n0.09765625 \n0.04882812 \n0.02441406 \n0.01220703 \n0.006103516 "},{"path":"estructuras-de-control.html","id":"loops-infinitos","chapter":"3 Estructuras de control","heading":"3.3.2.3 Loops infinitos","text":"Con las sentencias de tipo MIENTRAS QUE se debe tener mucha precaución, puesto que si la evaluación lógica está bien especificada o nunca deja de ser evaluada como TRUE, se incurre en un loop infinito: el programa nunca deja de repetir el bloque (al menos hasta que la máquina se tilde o se produzca un error por desbordamiento de memoria, por ejemplo).La siguiente situación ilustra esto:En R se puede usar la instrucción break para forzar la detención del proceso iterativo si se presenta alguna condición en particular8:","code":"var <- 9\nwhile (var < 10) {\n    var <- var - 1\n    cat(\"var =\", var, \"No puedo parar!!!\\n\")\n}\n\nvar = 8 No puedo parar!!!\nvar = 7 No puedo parar!!!\nvar = 6 No puedo parar!!!\nvar = 5 No puedo parar!!!\nvar = 4 No puedo parar!!!\nvar = 3 No puedo parar!!!\nvar = 2 No puedo parar!!!\nvar = 1 No puedo parar!!!\nvar = 0 No puedo parar!!!\nvar = -1 No puedo parar!!!\n...\nvar <- 9\nwhile (var < 10) {\n    var <- var - 1\n    cat(\"var =\", var, \"No puedo parar!!!\\n\")\n    if (var == -3) break\n}var = 8 No puedo parar!!!\nvar = 7 No puedo parar!!!\nvar = 6 No puedo parar!!!\nvar = 5 No puedo parar!!!\nvar = 4 No puedo parar!!!\nvar = 3 No puedo parar!!!\nvar = 2 No puedo parar!!!\nvar = 1 No puedo parar!!!\nvar = 0 No puedo parar!!!\nvar = -1 No puedo parar!!!\nvar = -2 No puedo parar!!!\nvar = -3 No puedo parar!!!"},{"path":"estructuras-de-control.html","id":"ejemplos","chapter":"3 Estructuras de control","heading":"3.4 Ejemplos","text":"continuación se presentan algunos otros ejemplosNo necesariamente tiene que ser la variable iteradora, podemos darle cualquier nombre:\n\n(guau 1:5) {\n    print(guau)\n}\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\nLa sentencia print() también sirve para mostrar resultados. La ventaja con respecto cat() es que necesitamos agregar \\n para que el siguiente mensaje se escriba en un nuevo renglón, ya que lo agrega por sí sola sin que lo pidamos. La desventaja es que nos permite crear un mensaje combinando elementos separados entre comas, tal como se puede hacer con cat() (por ejemplo, cat(\"El valor de x es igual \", x)).necesariamente tiene que ser la variable iteradora, podemos darle cualquier nombre:La sentencia print() también sirve para mostrar resultados. La ventaja con respecto cat() es que necesitamos agregar \\n para que el siguiente mensaje se escriba en un nuevo renglón, ya que lo agrega por sí sola sin que lo pidamos. La desventaja es que nos permite crear un mensaje combinando elementos separados entre comas, tal como se puede hacer con cat() (por ejemplo, cat(\"El valor de x es igual \", x)).Acá tenemos un ejemplo de dos estructuras anidadas. En primer lugar, toma el valor 1, y entonces j varía de 1 2, generando las combinaciones = 1, j = 1; = 1, j = 2. Luego de que el loop de j finalice habiendo recorrido todo su campo de variación, comienza la segunda iteración del loop de , actualizándose su valor 2 y comenzando otra vez el loop de j, que varía de 1 2. Así, se generan las combinaciones = 2, j = 1; = 2, j = 2. Finalmente, se actualiza y pasa valer 3, generando las combinaciones = 3, j = 1; = 3, j = 2. Para cada combinación, se muestra el valor de la suma:\n\n(1:3) {\n    (j 1:2) {\n        suma <- + j\n        cat(\"vale\", , \"y j vale\", j, \". La suma es igual \", suma, \"\\n\") \n    }\n}\nvale 1 y j vale 1 . La suma es igual 2 \nvale 1 y j vale 2 . La suma es igual 3 \nvale 2 y j vale 1 . La suma es igual 3 \nvale 2 y j vale 2 . La suma es igual 4 \nvale 3 y j vale 1 . La suma es igual 4 \nvale 3 y j vale 2 . La suma es igual 5 Acá tenemos un ejemplo de dos estructuras anidadas. En primer lugar, toma el valor 1, y entonces j varía de 1 2, generando las combinaciones = 1, j = 1; = 1, j = 2. Luego de que el loop de j finalice habiendo recorrido todo su campo de variación, comienza la segunda iteración del loop de , actualizándose su valor 2 y comenzando otra vez el loop de j, que varía de 1 2. Así, se generan las combinaciones = 2, j = 1; = 2, j = 2. Finalmente, se actualiza y pasa valer 3, generando las combinaciones = 3, j = 1; = 3, j = 2. Para cada combinación, se muestra el valor de la suma:Sumar los números naturales del 1 al 5:\n\nsuma <- 0\n(1:5) {\n    suma <- suma + \n}\nsuma\n[1] 15Sumar los números naturales del 1 al 5:Sumar números naturales hasta que la suma pase el valor 100 y detenerse:\n\nsuma <- 0\n<- 1\n(suma < 100) {\n    suma <-  suma + \n    <- + 1\n}\nsuma\n[1] 105Sumar números naturales hasta que la suma pase el valor 100 y detenerse:Escribir todos los múltiplos de 8 menores que 150:\nALGORITMO: \"Múltiplos de 8 menores 150\"\nCOMENZAR\n    VARIABLE numérica multiplo\n    multiplo <- 8\n    MIENTRAS QUE multiplo < 150 HACER\n        ESCRIBIR multiplo\n        multiplo <- multiplo + 8\n    FIN MIENTRAS\nFIN\n\n# Programa: \"Múltiplos de 8 menores 150\" ------------------------\nmultiplo <- 8\n(multiplo < 150) {\n    print(multiplo)\n    multiplo <- multiplo + 8\n}\n[1] 8\n[1] 16\n[1] 24\n[1] 32\n[1] 40\n[1] 48\n[1] 56\n[1] 64\n[1] 72\n[1] 80\n[1] 88\n[1] 96\n[1] 104\n[1] 112\n[1] 120\n[1] 128\n[1] 136\n[1] 144Escribir todos los múltiplos de 8 menores que 150:","code":"\nfor (guau in 1:5) {\n    print(guau)\n}[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\nfor (i in 1:3) {\n    for (j in 1:2) {\n        suma <- i + j\n        cat(\"i vale\", i, \"y j vale\", j, \". La suma es igual a\", suma, \"\\n\") \n    }\n}i vale 1 y j vale 1 . La suma es igual a 2 \ni vale 1 y j vale 2 . La suma es igual a 3 \ni vale 2 y j vale 1 . La suma es igual a 3 \ni vale 2 y j vale 2 . La suma es igual a 4 \ni vale 3 y j vale 1 . La suma es igual a 4 \ni vale 3 y j vale 2 . La suma es igual a 5 \nsuma <- 0\nfor (i in 1:5) {\n    suma <- suma + i\n}\nsuma[1] 15\nsuma <- 0\ni <- 1\nwhile (suma < 100) {\n    suma <-  suma + i\n    i <- i + 1\n}\nsuma[1] 105ALGORITMO: \"Múltiplos de 8 menores a 150\"\nCOMENZAR\n    VARIABLE numérica multiplo\n    multiplo <- 8\n    MIENTRAS QUE multiplo < 150 HACER\n        ESCRIBIR multiplo\n        multiplo <- multiplo + 8\n    FIN MIENTRAS\nFIN\n# Programa: \"Múltiplos de 8 menores a 150\" ------------------------\nmultiplo <- 8\nwhile (multiplo < 150) {\n    print(multiplo)\n    multiplo <- multiplo + 8\n}[1] 8\n[1] 16\n[1] 24\n[1] 32\n[1] 40\n[1] 48\n[1] 56\n[1] 64\n[1] 72\n[1] 80\n[1] 88\n[1] 96\n[1] 104\n[1] 112\n[1] 120\n[1] 128\n[1] 136\n[1] 144"},{"path":"descomposición-algorítmica.html","id":"descomposición-algorítmica","chapter":"4 Descomposición algorítmica","heading":"4 Descomposición algorítmica","text":"Un principio fundamental en la resolución de un problema es intentar descomponerlo en partes más pequeñas, que puedan ser más fáciles de afrontar. Este concepto también se aplica en la programación. Nuestros algoritmos pueden descomponerse en subalgoritmos que den solución un aspecto del problema, de menor extensión. Este proceso se conoce como descomposición algorítmica o descomposición modular. Cada subalgoritmo debe ser independiente de los demás y su vez podría seguir descomponiéndose en partes más sencillas en lo que se conoce como refinamiento sucesivo. Si un programa es muy largo se corre el riesgo de que sea muy difícil de entender como un todo, pero siempre se lo puede dividir en secciones más simples y manejables. Un subalgoritmo se escribe una vez y luego es utilizado por todos aquellos algoritmos que lo necesiten.Cada vez que, como parte de la resolución de un problema, desde un algoritmo se solicita que se realicen las acciones establecidas por un subalgoritmo, se dice que se lo está invocando o llamando. Al algoritmo que invoca los subalgoritmos veces le decimos algoritmo principal para darle un mayor énfasis la idea que, desde el curso de acción principal, cada tanto se delega la ejecución de algunas tareas al subalgoritmo.El empleo de subalgoritmos, desarrollando por separado ciertas partes del problema, resulta especialmente ventajoso en los casos siguientes:En algoritmos complejos: si el algoritmo, y luego el programa, se escribe todo seguido y en un único archivo de código, resulta muy complicado de entender, porque se pierde la visión de su estructura global dada la gran cantidad de operaciones que lo conforman. Aislando ciertas partes como subalgoritmos separados se reduce la complejidad.Cuando se repiten operaciones análogas: si la resolución de un problema requiere realizar una tarea que se repite varias veces en el algoritmo, podemos definir dicha tarea como un subalgoritmo por separado. De esta manera, su código se escribirá sólo una vez aunque se use en muchos puntos del programa.En este capítulo hay algunas secciones indicadas como “opcionales” y algunos comentarios agregados como notas al pie. Estas partes añaden información para quienes estén interesados en saber un poco más, pero su contenido será requerido en la práctica ni en las evaluaciones.","code":""},{"path":"descomposición-algorítmica.html","id":"tipos-de-subalgoritmos","chapter":"4 Descomposición algorítmica","heading":"4.1 Tipos de subalgoritmos","text":"En el mundo de la programación existen muchos términos para definir distintos tipos de subalgoritmos: subrutinas, funciones, procedimientos, métodos, subprogramas, etc. es posible obtener una definición que capture todas las variantes que existen en el uso de estos términos debido que el significado de cada uno de ellos varía según el paradigma\n9\ny el lenguaje de programación escogidos.Sin embargo, suele haber bastante consenso en distinguir, dentro de los subalgoritmos, las funciones y los procedimientos de esta forma:Una función es un subalgoritmo que al ser evaluado devuelve un único resultado (por ejemplo, un valor numérico) que es utilizado en el algoritmo principal que lo invoca.Un procedimiento es un subalgoritmo que al ser evaluado devuelve un valor, sino que produce efectos secundarios en el ambiente del algoritmo principal que lo invoca. Persigue el objetivo de ayudar en la modularidad del programa.","code":""},{"path":"descomposición-algorítmica.html","id":"funciones","chapter":"4 Descomposición algorítmica","heading":"4.2 Funciones","text":"Una función es un subalgoritmo que devuelve un único resultado partir de otros valores provistos. El valor que la función devuelve define su tipo, de modo que una función puede ser de tipo numérica, carácter o lógica 10.Para ejemplificar, podemos decir que la noción de función en programación se asemeja la idea matemática de función de una o más variables. Podemos pensar en la función \\(f(x, y) = x^2 + 3y\\) (ejemplo 1). Si queremos saber cuál es el valor numérico de la función \\(f\\) cuando \\(x\\) toma el valor \\(4\\) e \\(y\\) toma el valor \\(5\\), reemplazamos en la expresión anterior las variables por los valores mencionados y obtenemos: \\(f(4, 5) = 4^2 + 3 \\times 5 = 31\\).Podemos definir dicha función en pseudocódigo de la siguiente manera:El primer renglón de la definición comienza con la palabra clave FUNCIÓN y termina, luego de los dos puntos, con la palabra numérico para indicar que esta función devuelve como resultado un valor numérico.En el medio se encuentra el nombre elegido para la función (f), seguido por la declaración entre paréntesis de los parámetros o argumentos que la función necesita para operar, es decir, el input o información de entrada con la cual se realizarán las operaciones. Se dice que \\(x\\) e \\(y\\) son los parámetros formales o ficticios, ya que tienen un valor asignado en sí mismos sino que permiten expresar de manera general las acciones que la función ejecuta. Describen lo que uno diría en palabras: “hay que tomar \\(x\\), elevarlo al cuadrado y sumarle la \\(y\\) multiplicada por 3”. Entre los paréntesis también se aclara que estos parámetros formales son de tipo numérico.Los valores en los cuales se quiere evaluar la función se llaman parámetros actuales o reales. Por ejemplo, si nos interesa calcular \\(f(4, 5)\\), los valores \\(4\\) y \\(5\\) son los parámetros actuales y se establece una correspondencia entre el parámetro formal \\(x\\) y el actual \\(4\\), así como entre la \\(y\\) y el \\(5\\). El resultado que se obtiene, como observamos antes, es \\(31\\) y este es el valor que la función devuelve.La definición anterior también puede ser expresada como:Aquí notamos que debemos declarar x e y puesto que son los parámetros de la función (quedan declarados entre los paréntesis en la primera línea). Sin embargo, sí declaramos cualquier otra nueva variable que sea creada dentro de la función, por ejemplo, la variable resultado.De manera general, la definición de una función es:La palabra clave DEVOLVER provoca la inmediata finalización de la ejecución de la función e indica cuál es el resultado de la misma, cuyo tipo debe coincidir con el tipo de función declarado en el encabezado. La acción DEVOLVER se puede insertar en cualquier punto del cuerpo de la función y, además, es posible utilizar más de una sentencia DEVOLVER en una misma función, aunque sólo una llegue ejecutarse. Esto puede verse en el siguiente ejemplo (ejemplo 2):Para usar una función en un algoritmo, se la invoca escribiendo su nombre seguido por los valores actuales entre paréntesis, separados por coma. Esta invocación representa un valor que puede ser usado como operando en otra expresión. Por ejemplo:Al invocar una función es obligatorio que los valores suministrados para los argumentos actuales entre los paréntesis correspondan en cantidad, tipo y orden con los argumentos formales de la definición de la función. Es por esto que los siguientes casos son ejemplos de un uso incorrecto de funciones en el algoritmo principal:Para motivar el uso de una buena práctica que ayude distinguir entre las acciones de los subalgoritmos y del algoritmo, vamos escribir los subalgoritmos antes y por fuera del algoritmo principal11. Consideremos el ejemplo 3 mostrado continuación. Primero definimos los subalgoritmos que necesitaremos (son los de los ejemplos 1 y 2) y luego escribiremos un algoritmo principal que hace uso de ellos para resolver un problema en particular:¿Qué mensaje escribe el algoritmo anterior?","code":"FUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    DEVOLVER x^2 + 3 * y\nFIN FUNCIÓNFUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    VARIABLE numérica resultado\n    resultado <- x^2 + 3 * y\n    DEVOLVER resultado\nFIN FUNCIÓNFUNCIÓN nombre(lista de parámetros formales): tipo de resultado\nCOMENZAR\n    Declaración de variables\n    Acciones\n    DEVOLVER valor\nFIN FUNCIÓNFUNCIÓN maximo(num1: numérico, num2: numérico): numérico\nCOMENZAR\n    SI num1 >= num2 ENTONCES\n        DEVOLVER num1\n    SI NO\n        DEVOLVER num2\n    FIN SI\nFIN FUNCIÓNALGORITMO: \"Hallar el máximo entre dos valores y restarle 100\"\nCOMENZAR\n    VARIABLE numérica x, y, rtdo\n    LEER x, y\n    rtdo <- maximo(x, y) - 100\n    ESCRIBIR \"El resultado es \" rtdo\nFINALGORITMO: \"Incorrecto por proveer pocos argumentos para la función\"\nCOMENZAR\n    VARIABLE numérica x, y, rtdo\n    LEER x, y\n    rtdo <- maximo(x) - 100\n    ESCRIBIR \"El resultado es \" rtdo\nFIN\n\nALGORITMO: \"Incorrecto por proveer valores de tipo carácter para la función\"\nCOMENZAR\n    VARIABLE numérica rtdo\n    VARIABLE carácter x, y\n    x <- \"chau\"\n    y <- \"hola\"\n    rtdo <- maximo(x, y) - 100\n    ESCRIBIR \"El resultado es \" rtdo\nFIN\n\nALGORITMO: \"Incorrecto por no proveer argumentos para la función\"\nCOMENZAR\n    VARIABLE numérica x, y, rtdo\n    LEER x, y\n    rtdo <- maximo - 100\n    ESCRIBIR \"El resultado es \" rtdo\nFIN---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    DEVOLVER x^2 + 3 * y\nFIN FUNCIÓN\n\nFUNCIÓN maximo(num1: numérico, num2: numérico): numérico\nCOMENZAR\n    SI num1 >= num2 ENTONCES\n        DEVOLVER num1\n    SI NO\n        DEVOLVER num2\n    FIN SI\nFIN FUNCIÓN\n\n--------------------------------------------------------------\nALGORITMO PRINCIPAL\n--------------------------------------------------------------\n\nALGORITMO: \"Realizar operaciones matemáticas muy importantes\"\nCOMENZAR\n    VARIABLE numérica rtdo1, rtdo2, rtdo3\n    rtdo1 <- f(2, 5)\n    rtdo2 <- f(3, 10)\n    rtdo3 <- maximo(rtdo1, rtdo2) + 20\n    ESCRIBIR \"El resultado es \" rtdo3\nFIN"},{"path":"descomposición-algorítmica.html","id":"funciones-en-r","chapter":"4 Descomposición algorítmica","heading":"4.3 Funciones en R","text":"En la sección anterior vimos cómo definir funciones en pseudocódigo. Antes de pasar ver cómo programar nuestras funciones en R, vamos comentar algunas cuestiones acerca de las funciones que R ya trae disponibles como parte de su funcionalidad básica.","code":""},{"path":"descomposición-algorítmica.html","id":"funcpredef","chapter":"4 Descomposición algorítmica","heading":"4.3.1 Funciones predefinidas de R","text":"R, como todo lenguaje de programación, tiene funciones predefinidas, es decir, sentencias que se encargan de realizar alguna actividad. Ya estuvimos usando algunas de ellas, por ejemplo, cuando hemos necesitado mostrar algún mensaje usamos las funciones cat() o print()12. Además, existen muchas otras funciones predefinidas, como todas aquellas que se necesitan para realizar ciertas operaciones matemáticas:En los ejemplos anteriores, 100 representa un valor numérico que se pasa como argumento la función para que la misma opere. Algunas funciones predefinidas en R pueden trabajar con más de un argumento, en cuyo caso hay que enumerarlos dentro de los paréntesis, separados con comas. Por ejemplo, si en lugar de calcular el logaritmo natural (cuya base es la constante matemática \\(e\\)), queremos calcular un logaritmo en base 10, podemos hacer lo siguiente:¿Cómo sabemos que la función log() se puede usar de esa forma, cambiando el valor de la base con respecto la cual toma el logaritmo? Lo aprendemos al leer el manual de ayuda de R. Toda función predefinida de R viene con un instructivo que detalla cómo se usa, qué argumentos incluye y otras aclaraciones. Lo encontramos en la pestaña de Ayuda (Help) en el panel de abajo la derecha en RStudio. Otras formas de abrir la página de ayuda sobre una función es correr en la consola alguna de estas sentencias:Esa página de ayuda tiene bastante información, porque reúne información sobre muchas funciones relacionadas con logaritmos y exponenciales, pero podemos detenernos en la parte resaltada que se muestra continuación:\nFigura 4.1: Captura de pantalla de la ayuda sobre la función log()\nEn la sección Usage (“uso”) descubrimos que la función log() puede usarse con dos argumentos: x y base. En la sección Arguments entendemos que x es el número al cual le vamos sacar el logaritmo y base es la base con respecto la cual se toma el logaritmo. Por eso, al correr log(100, 10), estamos calculando el logaritmo de x = 100 con base = 10.Vemos, además, una diferencia en la forma en que x y base aparecen en la descripción: log(x, base = exp(1)). Cuando un argumento tiene un signo = significa que tiene asignado un valor por default y que es necesario usarlo. Por eso, cuando corremos log(100) estamos calculando el logaritmo de x = 100 con la base elegida por R por defecto: base = exp(1), que es la forma que tiene R de nombrar la constante \\(e = 2.718282...\\) (es el logaritmo natural). Si quiero cambiar la base, debo proveer un valor, por ejemplo, log(100, 10). Por el contrario, el argumento x tiene asignado un valor por default. Eso significa que obligatoriamente tenemos que proveer un valor para el mismo.R también permite usar una función escribiendo los nombres de los argumentos (es decir, detallando tanto los parámetros formales como los actuales), lo cual muchas veces es muy esclarecedor:Es más, si escribimos los nombres de los parámetros explícitamente, podemos cambiar su orden, sin alterar el resultado:Si escribimos los nombres, el orden importa:Al tener los nombres indicados explícitamente, R hace corresponder los parámetros formales x y base con los valores provistos en ese orden: en el primer caso x recibe el valor 100 y base, el valor 10, mientras que en el segundo caso es al revés.Finalmente, se debe observar que es necesario invocar la función escribiendo de forma directa los valores entre los paréntesis, sino que en su lugar pueden ir variables:","code":"\n# Raíz cuadrada\nsqrt(100)[1] 10\n# Valor absoluto\nabs(100)[1] 100\n# Función exponencial\nexp(100)[1] 2.688117e+43\n# Logaritmo natural\nlog(100)[1] 4.60517\n# Logaritmo de 100 en base 10\nlog(100, 10)[1] 2\nhelp(log)\n?log\nlog(x = 100, base = 10)[1] 2\nlog(base = 10, x = 100)[1] 2\nlog(100, 10)[1] 2\nlog(10, 100)[1] 0.5\nx <- 100\ny <- x / 2\nz <- 4\nlog(x - y, 4)       # Log en base 4 de x - y[1] 2.821928"},{"path":"descomposición-algorítmica.html","id":"definición-de-nuevas-funciones-en-r","chapter":"4 Descomposición algorítmica","heading":"4.3.2 Definición de nuevas funciones en R","text":"Ahora que ya hemos visto cómo se trabaja con funciones en R de manera general, vamos aprender definir nuestras propias funciones. Recordemos el subalgoritmo del ejemplo 1:En R, definimos esta función así:\nFigura 4.2: Estructura de una función en R\nLa estructura general es:Debemos:Elegir un nombreAl lado del nombre, colocar el operador de asignación (<-) para asociar ese nombre la definición de una función.Escribir la sentencia function(...) {...}, donde entre paréntesis se definen todos los parámetros formales separados con coma y entre llaves el conjunto de acciones englobar.El valor que la función debe arrojar como resultado se encierra dentro de la sentencia return(), que indica el fin de la ejecución.Una vez que la definición de la función es ejecutada, pasa formar parte de los elementos que conforman al ambiente, como se puede apreciar al verla listada como un objeto más en el panel Environment de RStudio 13. partir de este momento, podemos utilizarla, como parte de otro programa. Para invocarla, escribimos el nombre de la función y entre paréntesis los valores que nos interesan para el cálculo (parámetros actuales). Por ejemplo:Recordando lo discutido en la sección anterior, podemos apreciar que los siguientes usos de la función f() son equivalentes:Sin embargo, son equivalentes los siguientes:continuación, podemos ver casos que generan error por hacer un uso incorrecto de la función (¿por qué?):Retomemos ahora el ejemplo 3. Mencionamos que es importante distinguir entre la definición de los subalgoritmos y la de un algoritmo principal que los invoca:Esta distinción también es importante en R: la definición de las funciones debe ejecutarse antes de que las mismas sean llamadas desde el programa principal. Así, para traducir el pseudocódigo anterior R, podríamos crear un archivo de código (llamado, por ejemplo, ejemplo3.R) con el siguiente contenido:","code":"FUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    VARIABLE numérica resultado\n    resultado <- x^2 + 3 * y\n    DEVOLVER resultado\nFIN FUNCIÓN\nf <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}nombre <- function(argumentos) {\n  ... sentencias de R ...\n}\n# Ejemplos de uso de la función f\nf(4, 5)[1] 31\nf(6, -5)[1] 21\nf(0, 0)[1] 0\nf(4, 5)[1] 31\nf(x = 4, y = 5)[1] 31\nf(y = 5, x = 4)[1] 31\n# Siguiendo el orden de definición, x recibe el valor 4, y recibe el 5:\nf(4, 5)[1] 31\n# Siguiendo el orden de definición, x recibe el valor 5, y recibe el 4:\nf(5, 4)[1] 37\n# Error por omitir un argumento de uso obligatorio (x recibe 4, falta y)\nf(4)Error in f(4): argument \"y\" is missing, with no default\n# Error por proveer más argumentos de los declarados en la definición\nf(4, 5, 6)Error in f(4, 5, 6): unused argument (6)---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f(x: numérico, y: numérico): numérico\nCOMENZAR\n    DEVOLVER x^2 + 3 * y\nFIN FUNCIÓN\n\nFUNCIÓN maximo(num1: numérico, num2: numérico): numérico\nCOMENZAR\n    SI num1 >= num2 ENTONCES\n        DEVOLVER num1\n    SI NO\n        DEVOLVER num2\n    FIN SI\nFIN FUNCIÓN\n\n--------------------------------------------------------------\nALGORITMO PRINCIPAL\n--------------------------------------------------------------\n\nALGORITMO: \"Realizar  operaciones matemáticas muy importantes\"\nCOMENZAR\n    VARIABLE numérica rtdo1, rtdo2, rtdo3\n    rtdo1 <- f(2, 5)\n    rtdo2 <- f(3, 10)\n    rtdo3 <- maximo(rtdo1, rtdo2) + 20\n    ESCRIBIR \"El resultado es \" rtdo3\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nf <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}\n\nmaximo <- function(num1, num2) {\n    if (num1 > num2) {\n        return(num1)\n    } else {\n        return(num2)\n    }\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\nrtdo1 <- f(2, 5)\nrtdo2 <- f(3, 10)\nrtdo3 <- maximo(rtdo1, rtdo2) + 20\ncat(\"El resultado es\", rtdo3)El resultado es 59"},{"path":"descomposición-algorítmica.html","id":"null-vs-na-vs-nan","chapter":"4 Descomposición algorítmica","heading":"4.3.3 NULL vs NA vs NaN","text":"Generalmente los lenguajes de programación poseen un valor conocido como NULO, para representar un objeto vacío, sin información. El mismo suele emplearse como valor devuelto por funciones cuando corresponde devolver otro tipo de resultado. En pseudocódigo podemos usar esta estrategia escribiendo DEVOLVER NULO, si deseamos que nuestra función devuelva nada. La representación en R de este tipo de objeto es NULL, que se trata de un objeto vacío que generalmente devuelven las funciones cuando el resultado es indefinido. Es decir, podemos crear funciones que terminen con un return(NULL), como en el siguiente caso donde interesa emitir un mensaje, pero devolver ningún objeto:El objeto NULL debe confundirse con otros dos valores existentes en el lenguaje R: NA y NaN:NA son las siglas de Available y es un valor lógico (como TRUE y FALSE) que generalmente representa datos faltantes.NaN son las siglas de Number y es un valor numérico que generalmente surge como resultado de operaciones aritméticas imposibles de calcular, como indeterminaciones, raíces negativas, etc. (correr 0/0, log(-1) o sqrt(-1) para verlo). Es un valor establecido por IEEE, el estándar con el cual se rige la representación numérica en la computadora.Otro valor numérico muy especial es Inf (y su contrapartida negativa, -Inf), que es el resultado de almacenar un número muy grande o de una división por cero. es semejante NA, porque además de ser de tipo lógico, representa que hay un dato faltante sino que se trata de un valor numérico.","code":"\ng <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    cat(\"El resultado de esta cuenta es:\", resultado)\n    return(NULL)\n}\ng(4, 5)El resultado de esta cuenta es: 31NULL\na <- NULL\nb <- NA\nd <- NaN\ne <- Inf\nf <- \"NULL\"\n\nclass(a)[1] \"NULL\"\nclass(b)[1] \"logical\"\nclass(d)[1] \"numeric\"\nclass(e)[1] \"numeric\"\nclass(f)[1] \"character\""},{"path":"descomposición-algorítmica.html","id":"función-return","chapter":"4 Descomposición algorítmica","heading":"4.3.4 Función return()","text":"En R, la función return() puede omitirse, ya que si está presente se devuelve el resultado de la última expresión analizada. Por eso, las siguientes funciones son equivalentes:De todos modos, es aconsejable usar return() para evitar ambigüedades y ganar en claridad. Además, en funciones más complejas, su uso puede ser indispensable para indicar el término de la evaluación de la función.En el caso particular donde interese que nuestra función emita un mensaje, sin necesariamente devolver un objeto en particular, podemos proceder como se mencionó en la sección anterior:O de esta otra forma:En ambos casos, la función escribe el mensaje y devuelve como resultado un objeto NULL: en g3 porque se lo pedimos explícitamente y en g4 porque la función cat(), que es lo último en evaluarse, además de escribir un mensaje, devuelve un NULL:","code":"\ng1 <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}\ng1(4, 5)[1] 31\ng2 <- function(x, y) {\n    x^2 + 3 * y\n}\ng2(4, 5)[1] 31\ng3 <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    cat(\"El resultado de esta cuenta es:\", resultado)\n    return(NULL)\n}\ng3(4, 5)El resultado de esta cuenta es: 31NULL\ng4 <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    cat(\"El resultado de esta cuenta es:\", resultado)\n}\ng4(4, 5)El resultado de esta cuenta es: 31\nx <- g3(4, 5)El resultado de esta cuenta es: 31\nxNULL\ny <- g4(4, 5)El resultado de esta cuenta es: 31\nyNULL"},{"path":"descomposición-algorítmica.html","id":"ejemplofact","chapter":"4 Descomposición algorítmica","heading":"4.4 Documentación de los subalgoritmos","text":"En el contexto de la programación, documentar significa escribir indicaciones para que otras personas puedan entender lo que queremos hacer en nuestro código o para que sepan cómo usar nuestras funciones. Por ejemplo, como vimos antes todas funciones predefinidas de R están documentadas para que podamos buscar ayuda si la necesitamos. Cuando estamos creando nuestras propios subalgoritmos, es importante que también incluyamos comentarios para guiar otras personas (y nosotros mismos en el futuro si nos olvidamos) para qué y cómo se usa lo que estamos desarrollando.Para ilustrar esto, vamos recordar que en la práctica 2 escribimos un algoritmo para el cálculo de factoriales. Dado que los mismos son muy útiles en variadas aplicaciones, podemos escribir un subalgortimo que se encargue de obtenerlos. Luego, escribiremos un algoritmo para mostrar todos los factoriales de los números 1 10.En R:","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\n#-------------------------------------------------------\n# Función fact\n# Calcula el factorial de números enteros no negativos\n# Entrada:\n#   - n, entero no negativo\n# Salida:\n#   - el factorial de n\n#-------------------------------------------------------\nFUNCIÓN fact(n: numérico): numérico\nCOMENZAR\n    VARIABLE numérica resultado\n    resultado <- 1\n    SI n > 0 ENTONCES\n        PARA i DESDE 1 HASTA n HACER\n            resultado <- resultado * i\n        FIN PARA\n    FIN SI\n    DEVOLVER resultado\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Mostrar los factoriales de los 10 primeros naturales\"\nCOMENZAR\n    PARA j DESDE 1 HASTA 10 HACER\n        ESCRIBIR \"El factorial de \" j \" es igual a \" fact(j)\n    FIN PARA\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\n#-----------------------------------------------------\n# Función fact\n# Calcula el factorial de números enteros no negativos\n# Entrada:\n#       - n, entero no negativo\n# Salida:\n#       - el factorial de n\n#-----------------------------------------------------\nfact <- function(n) {\n    resultado <- 1\n    if (n > 0) {\n        for (i in 1:n) {\n            resultado <- resultado * i\n        }\n    }\n    return(resultado)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL: Mostrar los factoriales de los 10 primeros naturales\n# ---------------------------------------------------------------\nfor (j in 1:10) {\n    cat(\"El factorial de\", j, \"es igual a\", fact(j), \"\\n\")\n}El factorial de 1 es igual a 1 \nEl factorial de 2 es igual a 2 \nEl factorial de 3 es igual a 6 \nEl factorial de 4 es igual a 24 \nEl factorial de 5 es igual a 120 \nEl factorial de 6 es igual a 720 \nEl factorial de 7 es igual a 5040 \nEl factorial de 8 es igual a 40320 \nEl factorial de 9 es igual a 362880 \nEl factorial de 10 es igual a 3628800 "},{"path":"descomposición-algorítmica.html","id":"pasaje-de-parámetros","chapter":"4 Descomposición algorítmica","heading":"4.5 Pasaje de parámetros","text":"Los algoritmos y subalgoritmos comunican información entre sí través de los parámetros o argumentos. Esta comunicación recibe el nombre de pasaje de argumentos y se puede realizar de dos formas: por valor o por referencia. Algunos lenguajes de programación trabajan con uno u otro sistema, mientras que otros lenguajes permiten el uso de ambos.","code":""},{"path":"descomposición-algorítmica.html","id":"pasaje-por-valor","chapter":"4 Descomposición algorítmica","heading":"4.5.1 Pasaje por valor","text":"En este caso, los argumentos representan valores que se transmiten desde el algoritmo hacia el subalgoritmo. El pasaje por valor implica que los objetos del algoritmo provistos como argumentos en la llamada al subalgoritmo serán modificados por la ejecución del mismo. Este sistema funciona de la siguiente forma:Se evalúan los argumentos actuales usados en la invocación al subalgoritmo.Los valores obtenidos se copian en los argumentos formales dentro del subalgoritmo.Los argumentos formales se usan como variables dentro del subalgoritmo. Aunque los mismos sean modificados (por ejemplo, se les asignen nuevos valores), se modifican los argumentos actuales en el algoritmo, sólo sus copias dentro del subalgoritmo.Veamos un ejemplo:Si el pasaje de argumentos se hace por valor, los cambios producidos en el cuerpo de la función sobre los parámetros formales son transmitidos los parámetros actuales en el algoritmo principal. Esto significa que los formales son una “copia” de los actuales. Los pasos que sigue el algoritmo son:En el algoritmo principal, se asignan los valores: = 3, b = 5.Al invocar la función, se establece la correspondencia: x = 3, y = 5.Primera línea de la función: x = 3 + 1 = 4.Segunda línea de la función: y = 5 * 2 = 10.La función devuelve el valor x + y = 4 + 10 = 14.De regreso en el algoritmo principal: d recibe el valor 14.El algoritmo escribe: 3 5 14.En R, el pasaje de argumentos es por valor. Por lo tanto, este tipo de comportamiento es lo que vemos cuando implementamos el ejemplo discutido14:","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN fun(x: numérico, y: numérico): numérico\nCOMENZAR\n    x <- x + 1\n    y <- y * 2\n    DEVOLVER x + y\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo de pasaje de argumentos\"\nCOMENZAR\n    VARIABLE numérica a, b, d\n    a <- 3\n    b <- 5\n    d <- fun(a, b)\n    ESCRIBIR a b d\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nfun <- function(x, y) {\n    x <- x + 1\n    y <- y * 2\n    return(x + y)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\na <- 3\nb <- 5\nd <- fun(a, b)\ncat(a, b, d)3 5 14"},{"path":"descomposición-algorítmica.html","id":"pasaje-por-referencia","chapter":"4 Descomposición algorítmica","heading":"4.5.2 Pasaje por referencia","text":"En este caso, los argumentos sólo representan valores que se transmiten desde el algoritmo hacia el subalgoritmo, sino también desde el subalgoritmo al algoritmo. Esto sirve en las situaciones en las que se quiere que el subalgoritmo pueda modificar las variables del algoritmo principal que se pasaron como argumentos. De esta manera, un subalgoritmo puede producir uno o varios efectos secundarios en el ambiente del algoritmo.Si un parámetro se pasa por referencia, todos los cambios que experimente dentro del subalgoritmo se producirán también en la variable externa pasada como argumento. Esto se debe que la información que es pasada desde el algoritmo al subalgoritmo es la dirección en la memoria de la computadora donde se halla almacenado el parámetro actual, es decir, se pasa una referencia la variable, el valor que contiene.Este sistema funciona de la siguiente forma:Se seleccionan las variables usadas como argumentos actuales.Se asocia cada variable con el argumento formal correspondiente.Los cambios que experimenten los argumentos formales se reflejan también en los argumentos actuales de origen.Retomemos el ejemplo anterior:Si el pasaje de argumentos se hace por referencia, los pasos que sigue el algoritmo son:En el algoritmo principal, se asignan los valores: = 3, b = 5.Al invocar la función, se establece la correspondencia: x = 3, y = 5.Primera línea de la función: x = 3 + 1 = 4. El parámetro actual asociado con x, , es en realidad el que sufre dicho cambio y recibe el valor 4 (= 4).Segunda línea de la función: y = 5 * 2 = 10. El parámetro actual asociado con y, b, es en realidad el que sufre dicho cambio y recibe el valor 10 (b = 10).La función devuelve el valor x + y = 4 + 10 = 14.De regreso en el algoritmo principal: d recibe el valor 14.El algoritmo escribe: 4 10 14.Debe notarse que los resultados difieren dependiendo del tipo de pasaje de argumentos empleado\n15. R trabaja con pasaje por referencia (aunque es posible forzar que haga algo similar, si así se lo desea).","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN fun(x: numérico, y: numérico): numérico\nCOMENZAR\n    x <- x + 1\n    y <- y * 2\n    DEVOLVER x + y\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo de pasaje de argumentos\"\nCOMENZAR\n    VARIABLE numérica a, b, d\n    a <- 3\n    b <- 5\n    d <- fun(a, b)\n    ESCRIBIR a b d\nFIN"},{"path":"descomposición-algorítmica.html","id":"ámbito-de-las-variables","chapter":"4 Descomposición algorítmica","heading":"4.6 Ámbito de las variables","text":"En todo lenguaje de programación se le dice ámbito o scope la región del programa donde una variable definida existe y es visible, tal que fuera de dicha región se puede acceder la misma\n16. Según el ámbito en el que existen, las variables pueden considerarse locales o globales.","code":""},{"path":"descomposición-algorítmica.html","id":"variables-locales","chapter":"4 Descomposición algorítmica","heading":"4.6.1 Variables locales","text":"Las variables declaradas dentro de un subalgoritmo (por ejemplo, dentro de una función) se llaman variables locales. Sólo pueden ser usadas por las instrucciones que están dentro de esa función, mientras que el programa principal u otros subalgoritmos desconocen su existencia y las pueden usar. Las variables locales residen en el ambiente local de un subalgortimo y tienen nada que ver con las variables que puedan ser declaradas con el mismo nombre en otros lugares17. En el siguiente ejemplo, las variables y b son locales la función f1 y se pueden usar desde el programa principal, porque dejan de existir una vez que termina la ejecución de f1:El error se genera porque el algoritmo principal quiere usar la variable , la cual es local la función f1() y sólo existe dentro de la misma.El uso de variables locales tiene muchas ventajas. Permiten independizar al subalgoritmo del algoritmo principal, ya que las variables definidas localmente en un subalgoritmo son reconocidas fuera de él. La comunicación entre el subalgoritmo y el algoritmo principal se da exclusivamente través de la lista de parámetros. Esta característica hace posible dividir grandes proyectos en piezas más pequeñas y que, por ejemplo, diferentes programadores puedan trabajar independientemente en un mismo proyecto.","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f1(x: numérico): numérico\nCOMENZAR\n    VARIABLE numérica a, b\n    a <- x - 10\n    b <- x + 10\n    DEVOLVER a + b\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo\"\nCOMENZAR\n    VARIABLE numérica z\n    z <- f1(50)\n    ESCRIBIR z\n    ESCRIBIR z + a   ---LÍNEA CON ERROR---\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nf1 <- function(x) {\n    a <- x - 10\n    b <- x + 10\n    return(a + b)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\nz <- f1(50)\nz[1] 100\nz + aError in eval(expr, envir, enclos): object 'a' not found"},{"path":"descomposición-algorítmica.html","id":"variables-globales","chapter":"4 Descomposición algorítmica","heading":"4.6.2 Variables globales","text":"Las variables globales son las que se definen en el algoritmo principal y pueden ser usadas dentro de los subalgoritmos, aún cuando se las pase como argumento. En el ejemplo anterior z es una variable global18. Las variables globales residen en el ambiente global del algoritmo.El siguiente ejemplo muestra cómo la función f2 puede hacer uso de una variable global y que fue definida fuera de ella, en el programa principal\n19:La función pudo hacer uso de la variable global y sin haberse comunicado con el programa principal través de los argumentos. Esta práctica es recomendable: si bien evaluemos f2(2) dos veces, el resultado fue el mismo, porque depende de cuánto vale y en el ambiente global en el momento que f2 es invocada. Además de ser confuso, esto es una violación al principio de transparencia referencial: un subalgoritmo sólo debe utilizar elementos mencionados en la lista de argumentos o definidos localmente, sin emplear variables globales. En particular, si hablamos de una función donde el pasaje de parámetros es por valor, esta práctica garantiza que la misma siempre devuelva el mismo resultado cada vez que sea invocada con los mismos valores en los argumentos de entrada, sin producir ningún efecto secundario en el algoritmo principal. El uso de variables globales permite escribir subalgoritmos que carecen de transparencia referencial.Un algoritmo puede usar el mismo nombre para variables locales y globales, pero dentro de una función toma precedencia la variable local. En el siguiente ejemplo, hay una variable global en el programa principal que recibe el valor 70. Y hay otra variable que es local la función f3. Cuando f3 calcula + b, lo hace con el valor de su variable local (x - 10) y con el valor de la variable global (70):Se debe prestar atención que con la sentencia ESCRIBIR o la función cat() en R se muestra en pantalla un mensaje en el momento en el que se ejecuta esa acción. Si el mensaje incluye mostrar valores guardados en objetos, se mostrarán los valores que los mismos tienen en ese momento. Por otro lado, lo devuelto por la sentencia DEVOLVER o la función return() es el resultado de la ejecución de la función: el valor que la función entrega puede ser asignado otro objeto en el algoritmo principal, como ocurre en la lína de z <- f3(50).","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f2(x: numérico): numérico\nCOMENZAR\n    VARIABLE numérica a\n    a <- x * y\n    DEVOLVER a\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo\"\nCOMENZAR\n    VARIABLE numérica y\n    y <- 20\n    ESCRIBIR f2(2)\n    y <- 18\n    ESCRIBIR f2(2)\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nf2 <- function(x) {\n    a <- x * y\n    return(a)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\ny <- 20\nf2(2)[1] 40\ny <- 18\nf2(2)[1] 36---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nFUNCIÓN f3(x: numérico): numérico\nCOMENZAR\n    VARIABLE numérica a, b\n    a <- x - 10\n    b <- x + 10\n    ESCRIBIR \"Acá, dentro de la f3, el valor de a es\", a\n    DEVOLVER a + b\nFIN FUNCIÓN\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: \"Ejemplo\"\nCOMENZAR\n    VARIABLE numérica a, z\n    a <- 70\n    z <- f3(50)\n    ESCRIBIR z\n    ESCRIBIR \"Acá, en el programa principal, el valor de a es\", a\n    ESCRIBIR a + z\nFIN\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\nf3 <- function(x) {\n    a <- x - 10\n    b <- x + 10\n    cat(\"Acá, dentro de la f3, el valor de a es\", a)\n    return(a + b)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\na <- 70\nz <- f3(50)Acá, dentro de la f3, el valor de a es 40\nz[1] 100\ncat(\"Acá, en el programa principal, el valor de a es\", a)Acá, en el programa principal, el valor de a es 70\na + z[1] 170"},{"path":"descomposición-algorítmica.html","id":"otras-nociones-importantes-en-r","chapter":"4 Descomposición algorítmica","heading":"4.7 Otras nociones importantes en R","text":"","code":""},{"path":"descomposición-algorítmica.html","id":"la-función-source","chapter":"4 Descomposición algorítmica","heading":"4.7.1 La función source()","text":"Cuanto más grande o complejo es el problema resolver, más funciones deben ser programadas y es necesario escribirlas todas en el mismo archivo de código del programa principal. Para ser más ordenados, podemos escribir nuestras funciones en uno o más archivos separados. Si hacemos esto, en el comienzo del script del programa principal debemos incluir una sentencia para que en primer lugar se ejecute el código guardado en esos otros archivos, de modo que las funciones sean definidas y formen parte del ambiente global.Consideremos otra vez el ejemplo de la función para el cálculo de factoriales. Podemos guardar el código de esta función (y otras si hubiese) en un archivo llamado funciones.R, con el siguiente contenido:Luego, en cualquier problema que requiera el cálculo de factoriales, vamos pedirle R que ejecute el código guardado en el archivo funciones.R con la sentencia source(), como paso inicial en el archivo donde estemos escribiendo el programa principal. Por ejemplo:Gracias source() todas las funciones definidas en el archivo funciones.R aparecerán en el entorno y hay necesidad ni siquiera de abrirlo. Notar que C:/Documentos/Facultad/IALP/ es la dirección o path de la carpeta en la computadora donde está guardado el archivo funciones.R.","code":"#-----------------------------------------------------\n# Función fact\n# Calcula el factorial de números enteros no negativos\n# Entrada:\n#       - n, entero no negativo\n# Salida:\n#       - el factorial de n\n#-----------------------------------------------------\nfact <- function(n) {\n    resultado <- 1\n    if (n > 0) {\n        for (i in 1:n) {\n            resultado <- resultado * i\n        }\n    }\n    return(resultado)\n}\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL: Mostrar los factoriales de los 10 primeros naturales\n# ---------------------------------------------------------------\n\nsource(\"C:/Documentos/Facultad/IALP/funciones.R\")\n\nfor (j in 1:10) {\n    cat(\"El factorial de\", j, \"es igual a\", fact(j), \"\\n\")\n}"},{"path":"descomposición-algorítmica.html","id":"argumentos-con-valores-asignados-por-defecto","chapter":"4 Descomposición algorítmica","heading":"4.7.2 Argumentos con valores asignados por defecto","text":"Hemos visto que algunos argumentos de las funciones predefinidas de R tienen valores asignados por defecto, como es el caso de la función log(), que menos que indiquemos otra cosa opera con la base natural. Cuando definimos nuestras propias funciones, también es posible asignarle un valor por defecto uno o más de sus argumentos.\nTomemos el primer ejemplo de este capítulo:Esta función también podría ser definida así:Esto significa que si proveemos un valor para el argumento y, este se le asignará por default el valor 100. Luego:En el caso anterior, se hace corresponder el 4 al primer argumento de la función, x, y como hay ningún otro parámetro actual que le estemos pasando la función, la misma le asigna y el valor 100 y calcula: x^2 + 3 * y = 16 + 300 = 316. Sin embargo, podemos, como antes, proveer cualquier otro valor para y, de modo que se use el valor por default:Como x tiene valor asignado por default en la función nueva_f(), siempre debemos pasarle un valor. En caso contrario, recibiremos un error:","code":"\nf <- function(x, y) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}\nf(4, 5)[1] 31\nnueva_f <- function(x, y = 100) {\n    resultado <- x^2 + 3 * y\n    return(resultado)\n}\nnueva_f(4)[1] 316\nnueva_f(4, 5)[1] 31\nnueva_f()Error in nueva_f(): argument \"x\" is missing, with no default\nnueva_f(y = 5)Error in nueva_f(y = 5): argument \"x\" is missing, with no default"},{"path":"descomposición-algorítmica.html","id":"otros-tópicos-de-lectura-opcional","chapter":"4 Descomposición algorítmica","heading":"4.8 Otros tópicos de lectura opcional","text":"","code":""},{"path":"descomposición-algorítmica.html","id":"modificar-una-variable-global-desde-el-cuerpo-de-una-función-en-r","chapter":"4 Descomposición algorítmica","heading":"4.8.1 Modificar una variable global desde el cuerpo de una función en R","text":"Hemos dicho que una función recibe información desde el programa principal través de sus parámetros, y envía información al mismo mediante el valor que devuelve. Sin embargo, es posible alterar el comportamiento para que sea capaz de producir efectos secundarios, por ejemplo, modificando el valor de una variable global, violando así el principio de transparencia referencial.Los siguientes ejemplos definen dos funciones con un único argumento, x, pero que en su cuerpo hacen uso de una variable global, y, definida el algoritmo principal (estos casos violan el principio de transparencia referencial, su práctica es recomendable). La diferencia entre ellas es que g1() modifica el valor de y dentro de la función, pero el valor de y en el ambiente global es alterado; mientras que g2() cambia el valor de y sólo localmente, sino también en el ambiente global. Esto se logra mediante el uso del operador <<-20.Nuevamente, esta forma de trabajo es aconsejable porque estamos produciendo efectos secundarios desde la función en el ambiente global que pueden pasar desapercibidos si estamos muy atentos. Así como la mejor práctica es pasar toda la información desde el programa principal hacia la función través de sus parámetros, también es recomendable que toda comunicación desde la función hacia el programa principal se realice través del valor (u objeto) que la función devuelve, sin producir efectos secundarios (transparencia referencial).","code":"\n# ---------------------------------------------------------------\n# DEFINICIÓN DE FUNCIONES\n# ---------------------------------------------------------------\n\ng1 <- function(x) {\n    y <- y + 100\n    return(x / y)\n}\n\ng2 <- function(x) {\n    y <<- y + 100\n    return(x / y)\n}\n\n# ---------------------------------------------------------------\n# PROGRAMA PRINCIPAL\n# ---------------------------------------------------------------\n\n# Caso 1: el valor de y en el ambiente global no es modificado por g1\nx <- 500\ny <- 50\nz <- g1(x)\ncat(x, y, z)500 50 3.333333\n# Caso 2: el valor de y en el ambiente global es modificado por g2\nx <- 500\ny <- 50\nz <- g2(x)\ncat(x, y, z)500 150 3.333333"},{"path":"descomposición-algorítmica.html","id":"procedimientos","chapter":"4 Descomposición algorítmica","heading":"4.8.2 Procedimientos","text":"Un procedimiento es un subalgoritmo que agrupa una acción o conjunto de acciones, dándoles un nombre por el que se las puede identificar posteriormente. Se diferencia de la función en que tiene como objetivo, en general, devolver un valor, sino sólo contribuir la descomposición o modularidad del programa. R trabaja con el concepto de procedimiento, sino que todo tipo de subalgoritmo se genera con la misma estructura de function(...){...}21.Como en las funciones, desde el algoritmo principal se pasan valores al procedimiento utilizando parámetros o argumentos, aunque también puede haber procedimientos que carezcan de los mismos. Para usar un procedimiento hay que invocarlo, escribiendo su nombre y continuación, si los hay, los valores de los argumentos actuales para esa llamada, separados por comas. Aquí también los argumentos actuales deben ser compatibles en cuanto la cantidad, tipo y orden que los argumentos formales declarados en la definición del procedimiento.En el siguiente ejemplo podemos identificar los argumentos actuales (con el valor 5), b (con el valor 2), c y d (sin valores asignados inicialmente). Cuando el procedimiento proced1 es invocado, se establece una correspondencia con los argumentos formales n1, n2, n3 y n4, respectivamente. n1 toma el valor 5, n2 toma el valor 2 y el procedimiento le asigna los valores 7 n3 y 1 n4. Al finalizar, este procedimiento habrá dejado sin cambios las variables y b, mientras que le habrá asignado los valores 7 c y 1 d. Como resultado, el algoritmo escribe “5 2 7 1”.En el siguiente ejemplo, el procedimiento proced2 modifica las variables que actúan como argumentos actuales. Al ser invocado, se establece una correspondencia entre los argumentos actuales (con el valor 5) y b (con el valor 2), y los argumentos formales n1 y n2, respectivamente. De esta forma, la primera acción del procedimiento le asigna el valor 7 n1 y 1 n2. De esta manera, al finalizar vale 7 y b vale 1 y el algoritmo escribe “7 1”.Analicemos ahora el tipo de pasaje de argumentos en el contexto de un procedimiento:Si el pasaje es por referencia, los pasos que sigue el algoritmo serían:En el algortimo se asignan los valores: = 8, b = 4.Al invocar la función: x = 8, y = 4.Primera línea de la función: x = 8 * 2 = 16. Lo mismo sucede con el parámetro actual : = 16.Segunda línea de la función: y = 16 - 4 = 12. Lo mismo sucede con el parámetro actual b: b = 12.Al regresar al algoritmo principal, la sentencia ESCRIBIR produce: 16 12.Si el pasaje hubiese sido por valor, y b hubiesen cambiado y la sentencia ESCRIBIR mostraría 8, 4. Como en un procedimiento los resultados regresan en los mismos parámetros, pueden ser todos pasados por valor, porque en ese caso el procedimiento nunca realizaría ninguna acción.Si el parámetro x se pasa por valor mientras que y se pasa por referencia, los pasos serían:= 8, b = 4.Al invocar la función: x = 8, y = 4.Primera línea de la función: x = 8 * 2 = 16.Segunda línea de la función: y = 16 - 4 = 12. Lo mismo sucede con el parámetro actual b: b = 12.Al regresar al algoritmo principal, la sentencia ESCRIBIR produce: 8 12.Dado que en R el pasaje de argumentos es siempre por valor y por referencia, existen los procedimientos. Por esta razón, esta sección se ejemplifica con código de R.","code":"---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nPROCEDIMIENTO proced1(n1: numérico, n2: numérico, n3: numérico, n4: numérico)\n    n3 <- n1 + n2\n    n4 <- n2 - 1\nFIN PROCEDIMIENTO\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: Primer ejemplo de procedimiento\nCOMENZAR\n    VARIABLE numérica a, b, c, d\n    a <- 5\n    b <- 2\n    proced1(a, b, c, d)\n    ESCRIBIR a b c d\nFIN---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nPROCEDIMIENTO proced2(n1: numérico, n2: numérico)\n    n1 <- n1 + n2\n    n2 <- n2 - 1\nFIN PROCEDIMIENTO\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: Segundo ejemplo de procedimiento\nCOMENZAR\n    VARIABLE numérica a, b\n    a <- 5\n    b <- 2\n    proced2(a, b)\n    ESCRIBIR a b\nFIN---------------------------------------------------------------\nSUBALGORITMOS\n---------------------------------------------------------------\n\nPROCEDIMIENTO miProc(x: numérico, y: numérico)\n    x <- x * 2\n    y <- x - y\nFIN PROCEDIMIENTO\n\n---------------------------------------------------------------\nALGORITMO PRINCIPAL\n---------------------------------------------------------------\n\nALGORITMO: Tercer ejemplo de procedimiento\nCOMENZAR\n    VARIABLE numérica a, b\n    a <- 8\n    b <- 4\n    miProc(a, b)\n    ESCRIBIR a b\nFIN"},{"path":"estructuras-de-datos.html","id":"estructuras-de-datos","chapter":"5 Estructuras de datos","heading":"5 Estructuras de datos","text":"Hasta ahora todos los algoritmos que hemos desarrollado hacen uso de objetos que guardan datos individuales, los cuales representan un número, una cadena de texto o un valor lógico. Sin embargo, la verdadera utilidad de la computación radica en poder trabajar con conjuntos de datos, organizados de acuerdo ciertas reglas que permitan su manipulación y acceso. Definimos entonces como estructura de datos un conjunto de datos que cuentan con un sistema de organización.","code":""},{"path":"estructuras-de-datos.html","id":"arreglos","chapter":"5 Estructuras de datos","heading":"5.1 Arreglos","text":"Un arreglo se define como una colección de valores individuales con dos características fundamentales:Ordenamiento: los valores individuales pueden ser enumerados en orden, es decir, debe ser posible identificar en qué posición del arreglo se encuentra cada valor.Homogeneidad: los valores individuales almacenados en un arreglo son todos del mismo tipo (numérico, carácter, lógico).Los arreglos son muy útiles para almacenar información en la memoria de la computadora, organizando valores que estén relacionados entre sí de alguna manera, por ejemplo, una conjunto de precios, los meses del año, el listado de calificaciones de estudiantes en distintos parciales, etc.Los componentes individuales del conjunto se llaman elementos. Para indicar qué posición ocupa cada elemento en el arreglo se emplean uno o más índices. Dependiendo de cuántos índices se deban utilizar para acceder cada elemento dentro de los arreglos, estos se clasifican en unidmensionales (vectores) o bidimensionales (matrices). También existen los arreglos multidimensionales y están presentados al final de este capítulo, pero como trabajaremos la lectura de esa sección es opcional.","code":""},{"path":"estructuras-de-datos.html","id":"arreglos-unidimensionales-o-vectores","chapter":"5 Estructuras de datos","heading":"5.1.1 Arreglos unidimensionales o vectores","text":"Un arreglo unidimensional o vector tiene n elementos todos del mismo tipo. Por ejemplo, el siguiente es un vector de tipo numérico llamado x con 5 elementos:\nFigura 5.1: Ejemplo de un vector numérico\nCada uno de los elementos ocupa una posición determinada en el vector. Por ejemplo, el elemento 3 del vector x es el numéro 2.71. Se puede acceder o hacer referencia cada elemento mediante el uso de índices, expresados entre corchetes al lado del nombre del vector. De esta forma, si escribimos x[3] hacemos referencia la tercera posición del vector, que actualmente guarda al valor 2.71. Como podemos ver, sólo hace falta un índice para hacer referencia cada elemento de un vector.\nFigura 5.2: Ejemplo de un vector numérico: índices para señalar cada posición.\nLos siguientes son ejemplos de vectores de tipo carácter y lógico, con distintas cantidades de elementos:\nFigura 5.3: Ejemplo de un vector carácter y un vector lógico\nAl igual que todas las variables que empleamos en nuestros algoritmos, los vectores que serán utilizados deben ser declarados en el pseudocódigo, eligiendo un identificador (nombre) e indicando su tipo y su tamaño, es decir, la cantidad de posiciones que contienen. Esto último se señala entre paréntesis al lado del nombre elegido. Por ejemplo, el vector x visto anteriomente puede ser creado de la siguiente forma:Si bien la declaración de un vector sólo tiene como objetivo permitirle la computadora que reserve internamente el espacio necesario en memoria para el mismo, para escribir pseudocódigo de una manera sencilla estableceremos la siguiente convención. Cuando declaramos un vector de tipo numérico con la expresión VARIABLE numérica x(5) asumiremos que, además de reservar espacio en memoria para el vector, se le asigna un 0 (cero) en cada posición. Es decir, el vector x es iniciado con ceros, que más tarde pueden ser reemplazados por otros valores. Del mismo modo, asumiremos que cuando declaramos vectores de tipo carácter, todos sus elementos son iniciados con valores \"\" (una cadena de texto vacía) y cuando declaramos vectores de tipo lógico, con el valor FALSO.En R, los vectores se construyen de forma dinámica por lo cual es necesario declararlos antes de comenzar utilizarlos. La función c() (de combinar) permite crear vectores, por ejemplo, los mencionados anteriormente:\nFigura 5.4: Creación de vectores en R\nCuando ejecutamos dichas líneas, se crean en el ambiente global los objetos x, y y z, como podemos notar en la pestaña Environment de RStudio. Es decir, los vectores, así como cualquier otro tipo de arreglo, son objetos que constituyen entidades en sí mismas y que pueden ser manipulados al hacer referencia sus indicadores. Además, RStudio nos muestra en la pestaña mencionada qué tipo de vector es cada uno (num, chr, logi), cuántos elementos tiene ([1:5], [1:4], [1:3]) y una previsualización de sus primeros elementos.Dado que la función c() resulta, en consecuencia, muy importante al programar en R, es recomendable que evitemos usar la letra c como nombre para otros objetos22.Podemos emplear estructuras iterativas para recorrer todas las posiciones de un vector y realizar operaciones con ellas, por ejemplo:Todos los lenguajes de programación incluyen, además, alguna función para determinar cuántos elementos tiene un vector que ya fue creado. Para esto emplearemos la expresión LARGO() en el pseudocódigo y la función length de R:Entonces, para recorrer todos los elementos del vector podemos hacer también:O bien:Antes comentamos que en R los vectores se crean con expresiones como x <- c(-4.5, 12, 2.71, -6, 25), donde sus elementos están listados de forma literal. También podemos crear vectores de un largo determinado dejando que cada posición quede ocupada por algún valor asignado por defecto. Por ejemplo, el siguiente código crea un vector tipo numérico con 10 posiciones, uno carácter con 7 y otro lógico con 2. En cada caso, R rellena todas las posiciones con el mismo valor: ceros en el vector numérico, caracteres vacíos \"\" en el vector de tipo carácter y valores FALSE en el vector lógico:Se pueden asignar valores una, varias o todas las posiciones de un vector en cualquier parte del algoritmo. Además, en pseudocódigo emplearemos la palabra clave MOSTRAR cuando deseamos que se escriba en pantalla todo el contenido de un vector. Por ejemplo:En los ejemplos anteriores, declaramos los vectores explicitando su tamaño con un número: VARIABLE numérica x(5) o VARIABLE numérica (10). Sin embargo, el tamaño del vector podría estar guardado en otra variable, cuyo valor se determina en cada ejecución del programa mediante información externa o como resultado de algún cálculo anterior. En el siguiente ejemplo se deja que el usuario determine la dimensión del vector y que provea cada uno de los valores para el mismo. Antes de poder declarar la existencia del nuevo vector llamado mi_vector, se “lee” su tamaño:Por ahora, toda instrucción de leer en el pseudocódigo será traducida en R mediante la asignación directa de valores. Por ejemplo, LEER tam se reemplaza por tam <- 5 (o el número que necesitemos).Antes de terminar esta sección haremos una última observación. En R todos los objetos que hemos considerado como “variable” y que guardan un único valor (como tam en el ejemplo anterior), son también considerados como vectores, cuyo largo es 1, como podemos verificar en el siguiente ejemplo:Ejemplo: invertir los elementos de un vectorNos planteamos el problema de dar vuelta los elementos pertenecientes un vector, de manera que el primer elemento pase ser el último, el segundo pase al penúltimo lugar, etcétera. Por ejemplo, dado el vector de tipo carácter v:\nFigura 5.5: Vector v original\nqueremos modificarlo para obtener:\nFigura 5.6: Vector v reordenado\nSi bien podemos pensar en distintas formas para resolver este problema, probablemente la más sencilla requiere que intercambiemos de dos los valores en ciertas posiciones del vector, por ejemplo, empezando por intercambiar el primero con el último. Para esto podemos emplear una variable auxiliar que guarde el valor de alguna de las celdas temporariamente (por eso lo vamos llamar tmp):\nFigura 5.7: Pasos para intercambiar valores\nAhora sólo resta realizar el mismo procedimiento para los valores de las posiciones 2 y 4. Como el número de elementos en el vector es impar, el valor en la posición central queda en su lugar. Podemos definir el siguiente algoritmo para resolver este problema de manera general. En el siguiente pseudocódigo, primero declaramos una variable numérica n que puede tomar cualquier valor y que servirá para declarar cuántos espacios necesita el vector. Luego, se itera para leer cada elemento del vector. Finalmente, se implementa la estrategia de reordenamiento:En el ejemplo anterior hemos incorporado el uso de comentarios en el pseudocódigo para describir el objetivo de cada parte. Imitando lo que hacemos en R, señalamos la presencia de comentarios con el carácter # (podríamos usar otra cosa, pero adheriremos esta convención). Se usó el operador DIV para obtener la división entera entre n y 2 (por ejemplo, 5 DIV 2 = 2). En R reemplazamos todas las instrucciones LEER por una asignación directa de valores y empleamos el operador de división entera %/%:","code":"VARIABLE numérica x(5)\nx[1] <- -4.5\nx[2] <- 12\nx[3] <- 2.71\nx[4] <- -6\nx[5] <- 25\nx <- c(-4.5, 12, 2.71, -6, 25)\ny <- c(\"ARG\", \"correo@gmail.com\", \"Ok\", \"chau\")\nz <- c(TRUE, TRUE, FALSE)PARA i DESDE 1 HASTA 5 HACER\n    ESCRIBIR \"La posición \" i \"de x está ocupada por el valor \" x[i]\nFIN PARA\nfor (i in 1:5) {\n    cat(\"La posición\", i, \"de x está ocupada por el valor\", x[i], \"\\n\")\n}La posición 1 de x está ocupada por el valor -4.5 \nLa posición 2 de x está ocupada por el valor 12 \nLa posición 3 de x está ocupada por el valor 2.71 \nLa posición 4 de x está ocupada por el valor -6 \nLa posición 5 de x está ocupada por el valor 25 ESCRIBIR \"El vector x tiene \" LARGO(x) \" elementos.\"\nESCRIBIR \"El vector y tiene \" LARGO(y) \" elementos.\"\nESCRIBIR \"El vector z tiene \" LARGO(z) \" elementos.\"\ncat(\"El vector x tiene\", length(x), \"elementos.\")El vector x tiene 5 elementos.\ncat(\"El vector y tiene\", length(y), \"elementos.\")El vector y tiene 4 elementos.\ncat(\"El vector z tiene\", length(z), \"elementos.\")El vector z tiene 3 elementos.PARA i DESDE 1 HASTA LARGO(x) HACER\n    ESCRIBIR \"La posición \" i \"de x está ocupada por el valor \" x[i]\nFIN PARAtam <- LARGO(x)\nPARA i DESDE 1 HASTA tam HACER\n    ESCRIBIR \"La posición \" i \"de x está ocupada por el valor \" x[i]\nFIN PARA\na <- numeric(10)\nb <- character(7)\nd <- logical(2)\n\na [1] 0 0 0 0 0 0 0 0 0 0\nb[1] \"\" \"\" \"\" \"\" \"\" \"\" \"\"\nd[1] FALSE FALSEVARIABLE numérica a(10)\n...algunas acciones...\nPARA i DESDE 1 HASTA LARGO(a) HACER\n    SI i MOD 3 == 0 ENTONCES  \n        a[i] <- i * 100\n    FIN SI\nFIN PARA\nMOSTRAR a\na <- numeric(10)\nfor (i in 1:length(a)) {\n    if (i %% 3 == 0) {\n        a[i] <- i * 100\n    }\n}\na [1]   0   0 300   0   0 600   0   0 900   0VARIABLE numérica tam\nLEER tam\nVARIABLE numérica mi_vector(tam)\nPARA i DESDE 1 HASTA tam HACER\n    LEER mi_vector[i]\nFIN PARA\nx <- 25\nlength(x)[1] 1\nis.vector(x) # Esta función lógica le pregunta a R si el objeto x es un vector[1] TRUEALGORITMO: \"Invertir (dar vuelta) los elementos de un vector\"\nCOMENZAR\n    \n  # Declarar variables\n  VARIABLE numérica n\n  VARIABLE carácter tmp\n  LEER n\n  VARIABLE carácter v(n)\n  \n  # Asignar valores al vector\n  PARA i DESDE 1 HASTA n HACER\n      LEER v[i]\n  FIN PARA\n  \n  # Reordenar\n  PARA i DESDE 1 HASTA n DIV 2 HACER\n      tmp <- v[i]                 # Paso 1\n      v[i] <- v[n - i + 1]        # Paso 2\n      v[n - i + 1] <- tmp         # Paso 3\n  FIN PARA\n  \n  # Mostrar el vector reodenado\n  MOSTRAR v\n    \nFIN\nv <- c(\"Estadística\", \"en\", \"Licenciatura\", \"la\", \"Aguante\")\nn <- length(v)\nfor (i in 1:(n%/%2)) {\n    tmp <- v[i]\n    v[i] <- v[n - i + 1]\n    v[n - i + 1] <- tmp\n}\nv[1] \"Aguante\"      \"la\"           \"Licenciatura\" \"en\"           \"Estadística\" "},{"path":"estructuras-de-datos.html","id":"arreglos-bidimensionales-o-matrices","chapter":"5 Estructuras de datos","heading":"5.1.2 Arreglos bidimensionales o matrices","text":"Un arreglo bidimensional representa lo que habitualmente conocemos en matemática como matriz y por eso también lo llamamos de esa forma. Podemos imaginar que en una matriz los elementos están organizados en filas y columnas formando una tabla. Por ejemplo, la siguiente es una matriz llamada x:\nFigura 5.8: Ejemplo de una matriz numérica\ndiferencia de los vectores, las matrices requieren dos índices para señalar la posición de cada elemento, el primero para indicar la fila y el segundo para indicar la columna. Los mismos se colocan entre corchetes, separados por una coma, al lado del identificador de la matriz. De esta forma, si hablamos de x[1, 3] hacemos referencia la posición ocupada por el valor 18, mientras que si mencionamos x[3, 1] nos referimos al valor 14.\nFigura 5.9: Ejemplo de una matriz numérica: índices para señalar cada posición\nAl tamaño de una matriz, es decir, cuántas filas y columnas tiene, se le dice dimensión. La matriz anterior es de dimension \\(3 \\times 4\\).Como hicimos con los vectores, debemos declarar las matrices que vamos usar en el pseudocódigo, indicando su identificador, tipo y dimensión: VARIABLE numérica x(3, 4). También vamos asumir que todas las posiciones de una matriz son iniciadas con el valor 0, \"\" o FALSO si la misma es numérica, carácter o lógica, respectivamente. La matriz x puede ser generada en pseudocódigo de esta forma:En R, es necesario declarar las matrices con anterioridad y las mismas pueden ser creadas de manera literal con la función matrix(). Su primer argumento, data, es un vector con todos los elementos que queremos guardar en la matriz. Luego, se indica la cantidad de filas para la misma con nrow y la cantidad de columnas con ncol:Notar que R ubicó los valores provistos llenando primero la columna 1, luego la 2, etc. Ese comportamiento puede ser modificado con el argumento byrow, que por default es FALSE. Si lo cambiamos TRUE los elementos son ubicados por fila. Además, podemos usar saltos de líneas (enter) para visualizar las diferentes filas de la matriz. Esto tiene ningún impacto en R, sólo sirve para que el código sea más fácil de leer. Dado que hemos provisto 12 valores e indicamos que queremos 3 filas, el argumento ncol es necesario (es obvio que quedarán 4 columnas). Por eso, las siguientes sentencias son equivalentes la anterior:Si colocamos un único valor como primer argumento en la función matrix(), el mismo se repetirá en todas las posiciones. En este caso sí o sí tenemos que indicar cuántas filas y columnas deseamos:Una vez que la matriz ya existe, en el pseudocódigo haremos referencia al número de filas y columnas de la misma con las expresiones NFILA(x) y NCOL(x). En R tenemos las siguientes funciones para analizar el tamaño de las matrices:Podemos recorrer todas las posiciones de una matriz con una estructura iterativa doble: nos situamos en la primera fila y recorremos cada columna, luego en la segunda fila y recorremos todas las columnas y así sucesivamente:\nFigura 5.10: Recorrer una matriz por fila\nTambién se puede recorrer la matriz por columna, si modificamos ligeramente las estructuras iterativas:\nFigura 5.11: Recorrer una matriz por columna\nSe puede usar cualquier letra o palabra como variables iteradoras, pero el uso de para las filas y de j para las columnas es bastante común.También podemos asignar valores en cada celda mientras recorremos la matriz. De hecho, la matriz x del ejemplo puede ser generada así, donde los índices y j sólo señalan una posición en particular dentro de la matriz, sino que además se usan para hacer el cálculo del valor asignar:Si queremos dejar que el valor en cada posición sea determinado por una fuente de información externa la hora de correr el programa, empleamos la sentencia LEER en el pseudocódigo:Ejemplo: trasponer una matrizEn Álgebra, trasponer una matriz de dimensión \\(m \\times n\\) significa generar una nueva matriz de dimensión \\(n \\times m\\), donde los elementos se intercambian de este modo:\nFigura 5.12: Matriz traspuesta\nPodemos formalizar el algoritmo que permite generar la matriz traspuesta, teniendo en cuenta que cada elemento que originalmente ocupa la posición [, j] en la matriz original, debe pasar ocupar la posición [j, ] en la matriz traspuesta:Dado que en R vamos asignar valores en la matriz de manera literal, primero la creamos y luego usamos nrow() y ncol() para obtener los correspondientes valores de nf y nc. En el siguiente ejemplo, además, todas las posiciones de la matriz traspuesta son iniciadas con el valor NA.","code":"VARIABLE numérica x(3, 4)\nx[1, 1] <- 8\nx[1, 2] <- 13\nx[1, 3] <- 18\nx[1, 4] <- 23\nx[2, 1] <- 11\nx[2, 2] <- 16\nx[2, 3] <- 21\nx[2, 4] <- 26\nx[3, 1] <- 14\nx[3, 2] <- 19\nx[3, 3] <- 24\nx[3, 4] <- 29\nx <- matrix(data = c(8, 11, 14, 13, 16, 19, 18, 21, 24, 23, 26, 29),\n            nrow = 3, ncol = 4)\nx     [,1] [,2] [,3] [,4]\n[1,]    8   13   18   23\n[2,]   11   16   21   26\n[3,]   14   19   24   29\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n            nrow = 3, byrow = TRUE)\n\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n            ncol = 4, byrow = TRUE)\ny <- matrix(0, nrow = 2, ncol = 5)\ny     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    0    0    0    0\n[2,]    0    0    0    0    0\ndim(x)[1] 3 4\nnrow(x)[1] 3\nncol(x)[1] 4\ndim(y)[1] 2 5\nnrow(y)[1] 2\nncol(y)[1] 5VARIABLE numérica x(3, 4)\nPARA i DESDE 1 HASTA NFILA(x) HACER\n    PARA j DESDE 1 HASTA NCOL(x) HACER\n        x[i, j] <- 3 * i + 5 * j\n    FIN PARA\nFIN PARA\nMOSTRAR x\nx <- matrix(0, nrow = 3, ncol = 4)\nfor (i in 1:nrow(x)) {\n    for (j in 1:ncol(x)) {\n        x[i, j] <- 3 * i + 5 * j\n    }\n}\nx     [,1] [,2] [,3] [,4]\n[1,]    8   13   18   23\n[2,]   11   16   21   26\n[3,]   14   19   24   29VARIABLE numérica x(3, 4)\nPARA i DESDE 1 HASTA NFILA(x) HACER\n  PARA j DESDE 1 HASTA NCOL(x) HACER\n    LEER x[i, j]\n  FIN PARA\nFIN PARAALGORITMO: Trasponer matriz\nCOMENZAR\n    \n    # Declarar objetos\n    VARIABLE numérica nf, nc\n    LEER nf, nc\n    VARIABLE numérica x(nf, nc), traspuesta(nc, nf)\n    \n    # Leer los valores de la matriz\n    PARA i DESDE 1 HASTA nf HACER\n        PARA j DESDE 1 HASTA nc HACER\n            LEER x[i, j]\n        FIN PARA\n    FIN PARA\n    \n    # Trasponer\n    PARA i DESDE 1 HASTA nf HACER\n        PARA j DESDE 1 HASTA nc HACER\n            traspuesta[j, i] <- x[i, j]\n        FIN PARA\n    FIN PARA\n    \n    # Mostrar ambas matrices\n    ESCRIBIR \"Matriz original\"\n    MOSTRAR x\n    ESCRIBIR \"Matriz traspuesta\"\n    MOSTRAR traspuesta\n    \nFIN\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n            nrow = 3, byrow = TRUE)\nnf <- nrow(x)\nnc <- ncol(x)\ntraspuesta <- matrix(NA, nc, nf)\nfor (i in 1:nf) {\n    for (j in 1:nc) {\n        traspuesta[j, i] <- x[i, j]\n    }\n}\ncat(\"Matriz original\\n\")\nx\ncat(\"Matriz traspuesta\\n\")\ntraspuestaMatriz original\n     [,1] [,2] [,3] [,4]\n[1,]    8   13   18   23\n[2,]   11   16   21   26\n[3,]   14   19   24   29\nMatriz traspuesta\n     [,1] [,2] [,3]\n[1,]    8   11   14\n[2,]   13   16   19\n[3,]   18   21   24\n[4,]   23   26   29"},{"path":"estructuras-de-datos.html","id":"características-particulares-de-las-estructuras-de-datos-en-r","chapter":"5 Estructuras de datos","heading":"5.2 Características particulares de las estructuras de datos en R","text":"Los vectores y matrices son estructuras que están bien representadas en casi cualquier lenguaje de programación. Por esta razón, ante diversos problemas computacionales podemos escribir algoritmos que empleando arreglos y operando con cada uno de sus elementos alcancen los objetivos propuestos.obstante, cada lenguaje de programación propone formas particulares de operar con los arreglos e incluso otros tipos de estructuras de datos. En esta sección nos dedicaremos conocer cuáles son las herramientas que R nos ofrece para trabajar con vectores y matrices. Como son específicas de R, hay convenciones generales para representarlas en pseudocódigo.","code":""},{"path":"estructuras-de-datos.html","id":"elementos-con-nombre","chapter":"5 Estructuras de datos","heading":"5.2.1 Elementos con nombre","text":"Además de guardar información, los objetos de R pueden poseer ciertos atributos, que consisten en información adicional sobre el objeto. Uno de ellos es el atributo names, que permite que cada elemento dentro de un vector o una lista pueda tener su propio nombre, así como también que cada fila o columna de una matriz tenga su propio nombre, independientemente del identificador general del objeto.VectoresA cada elemento de un vector se le puede, opcionalmente, asignar un nombre. Esto se realiza de alguna de estas formas:Opción 1: después de crear el vector\n\n# El vector se llama \"frutas\" y tiene 4 elementos\nfrutas <- c(3, 7, 2, 1)\nfrutas\n[1] 3 7 2 1\n\n# Cada uno de estos elementos tienen nombres\nnames(frutas)\nNULL\n\n# Le doy un nombre cada elemento\nnames(frutas) <- c(\"manzanas\", \"naranjas\", \"bananas\", \"peras\")\nfrutas\nmanzanas naranjas  bananas    peras \n       3        7        2        1 Opción 1: después de crear el vectorOpción 2: en el momento de crear el vector\n\nfrutas <- c(manzanas = 3, naranjas = 7, bananas = 2, peras = 1)\nfrutas\nmanzanas naranjas  bananas    peras \n       3        7        2        1 Opción 2: en el momento de crear el vectorLos nombres son útiles porque permiten indexar al vector, sin necesidad de usar como índice la posición del elemento:todos los elementos de un vector deben tener nombre:MatricesEn el caso de las matrices, se le puede asignar nombres sus filas y columnas:Opción 1: después de crear la matriz\n\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n              nrow = 3, byrow = TRUE)\nrownames(x) <- c(\"\", \"B\", \"C\")\ncolnames(x) <- c(\"grupo1\", \"grupo2\", \"grupo3\", \"grupo4\")\nx\n  grupo1 grupo2 grupo3 grupo4\n     8     13     18     23\nB     11     16     21     26\nC     14     19     24     29Opción 1: después de crear la matrizOpción 2: al crear la matrizOpción 2: al crear la matrizEn este último ejemplo, se han elegido arbitrariamente los nombres Categorias y Grupos para llamar al conjunto completo de las filas y de las columnas, respectivamente. Esos nombres pueden ser cambiados por otros. Además, los nombres fueron encerrados en una lista, una estructura de datos que estudiaremos en breve.Al igual que con los vectores, podemos usar los nombres de filas y columnas para indexar:","code":"\n# El vector se llama \"frutas\" y tiene 4 elementos\nfrutas <- c(3, 7, 2, 1)\nfrutas[1] 3 7 2 1\n# Cada uno de estos elementos no tienen nombres\nnames(frutas)NULL\n# Le doy un nombre a cada elemento\nnames(frutas) <- c(\"manzanas\", \"naranjas\", \"bananas\", \"peras\")\nfrutasmanzanas naranjas  bananas    peras \n       3        7        2        1 \nfrutas <- c(manzanas = 3, naranjas = 7, bananas = 2, peras = 1)\nfrutasmanzanas naranjas  bananas    peras \n       3        7        2        1 \nfrutas[2]naranjas \n       7 \nfrutas[\"naranjas\"]naranjas \n       7 \nfrutas <- c(manzanas = 3, 7, bananas = 2, 1)\nfrutasmanzanas           bananas          \n       3        7        2        1 \nnames(frutas)[1] \"manzanas\" \"\"         \"bananas\"  \"\"        \nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n              nrow = 3, byrow = TRUE)\nrownames(x) <- c(\"A\", \"B\", \"C\")\ncolnames(x) <- c(\"grupo1\", \"grupo2\", \"grupo3\", \"grupo4\")\nx  grupo1 grupo2 grupo3 grupo4\nA      8     13     18     23\nB     11     16     21     26\nC     14     19     24     29\nx <- matrix(c( 8, 13, 18, 23, \n              11, 16, 21, 26, \n              14, 19, 24, 29), \n            nrow = 3, byrow = TRUE,\n            dimnames = list(Categorias = c(\"A\", \"B\", \"C\"), \n                            Grupos = c(\"grupo1\", \"grupo2\", \"grupo3\", \"grupo4\")))\nx          Grupos\nCategorias grupo1 grupo2 grupo3 grupo4\n         A      8     13     18     23\n         B     11     16     21     26\n         C     14     19     24     29\nx[\"B\", \"grupo2\"][1] 16"},{"path":"estructuras-de-datos.html","id":"operaciones-vectorizadas","chapter":"5 Estructuras de datos","heading":"5.2.2 Operaciones vectorizadas","text":"Con los conocimientos compartidos hasta aquí en esta unidad seremos capaces de escribir interesantes algoritmos para operar con vectores y matrices (por ejemplo: ordenar, buscar el mínimo, realizar cálculos algebraicos, etc.) y también de programarlos en R. En este proceso de aprendizaje, en la práctica de esta unidad vamos encarar la tarea de escribir muchas funciones que, por lo general, ya forman parte de la sintaxis básica de cualquier lenguaje de programación. Sí… trabajaremos de más, ¡pero es para poder aprender! obstante, ahora vamos mencionar algunos ejemplos de funciones que ya están disponibles en R y que evitan que tengamos que trabajar tanto.La mayoría de las funciones de R están vectorizadas. Esto quiere decir que están diseñadas para operar al mismo tiempo con todos los elementos de los vectores y matrices y es necesario recorrer cada posición, una por una, como aprendimos para incorporar nuestros primeros conocimientos sobre algoritmos. Las funciones operan en todos los elementos sin tener que usar estructuras iterativas, haciendo que el código sea más conciso, fácil de leer y con menos chances de cometer errores.VectoresPor ejemplo, supongamos que queremos sumar dos vectores, como en el *ejercicio 2 de la práctica 4. Gracias que la suma en R está vectorizada, esto se logra haciendo sencillamente:Sin vectorización, deberíamos diseñar y programar un algoritmo como el siguiente:Como podemos notar, al ejecutar u + v R realiza la suma elemento elemento entre los dos vectores. Esto también sucede con los otros operadores aritméticos:Estas operaciones también funcionan con vectores de distinto largo. En este caso, R aplica la regla del reciclaje: el vector más corto se recicla (se repiten sus elementos) hasta alcanzar la longitud del más largo y luego se opera elemento elemento. Como es raro que queramos operar con dos vectores de distinto largo, R por las dudas nos tira una advertencia:Si hacemos operaciones que involucran una constante y un vector, R repetirá tal operación con cada elemento del vector:Si le aplicamos funciones matemáticas como log() o sqrt() un vector, obtendremos como resultado el valor de dicha función en cada uno de los elementos del vector:Hay funciones que cuando se aplican un vector, logran resumirlo siguiendo algún criterio:Sumar todos los elementos de un vector:\n\nsum(u)\n[1] 15Sumar todos los elementos de un vector:Multiplicar todos los elementos de un vector:\n\nprod(u)\n[1] 80Multiplicar todos los elementos de un vector:Calcular el promedio de los elementos de un vector:\n\nmean(u)\n[1] 5Calcular el promedio de los elementos de un vector:Encontrar el valor mínimo y su ubicación en el vector (como en el ejercicio 4 de la práctica 4):\n\nx <- c(40, 70, 20, 90, 20)\nmin(x)\n[1] 20\n\n.min(x) # si el mínimo se repite, esta es la posición del primero\n[1] 3\n\n(x == min(x)) # si el mínimo se repite, esto muestra todas sus posiciones\n[1] 3 5Encontrar el valor mínimo y su ubicación en el vector (como en el ejercicio 4 de la práctica 4):Encontrar el valor máximo y su ubicación en el vector:\n\nmax(x)\n[1] 90\n\n.max(x) # si el mínimo se repite, esta es la posición del primero\n[1] 4\n\n(x == max(x)) # si el mínimo se repite, esto muestra todas sus posiciones\n[1] 4Encontrar el valor máximo y su ubicación en el vector:Combinando las ideas anteriores, podemos resolver de forma muy rápida ciertos problemas, como el de calcular el producto escalar entre dos vectores (ejercicio 5 de la práctica 4):En lo anterior, u * v hace la multiplicación elemento elemento entre los vectores u y v y luego sumamos esos valores con sum(). Sin las operaciones vectorizadas, deberíamos hacer algo como lo siguiente:En el ejercicio 3 de la Práctica 4 creamos las funciones ordenar_asc() y ordenar_des() para ordenar los elementos de un vector. Con las funciones disponibles en R, esto se puede hacer así:MatricesLos casos anteriores tienen sus equivalentes cuando operamos con matrices. Por ejemplo, en el ejercicio 7 de la práctica 4 programamos una función para hacer la suma entre dos matrices. Sin vectorización, esto involucra pasos como los siguientes:Gracias las operaciones vectorizadas de R, esto se puede resumir en:continuación, otros ejemplos de operaciones realizadas elemento elemento con matrices:También podemos resumir la información contenida en una matriz:Suma de todos los elementos:\n\n\n     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\n\nsum()\n[1] 21Suma de todos los elementos:Promedio de todos los elementos:\n\nmean()\n[1] 3.5Promedio de todos los elementos:Suma de los elementos por fila:\n\nrowSums()\n[1]  7 11  3Suma de los elementos por fila:Suma de los elementos por columna:\n\ncolSums()\n[1] 15  6Suma de los elementos por columna:Promedio de los elementos por fila:\n\nrowMeans()\n[1] 3.5 5.5 1.5Promedio de los elementos por fila:Promedio de los elementos por columna:\n\ncolMeans()\n[1] 5 2Promedio de los elementos por columna:Búsqueda de mínimos y máximos en una matriz:\n\nd <- matrix(sample(100, 20), nrow = 5)\n\n# Valor máximo\nmax(d)\n[1] 100\n\n# Posición (arr.ind = TRUE para que nos indique fila y columna)\n(d == max(d), arr.ind = TRUE)\n     row col\n[1,]   5   4\n\n# Valor mínimo\nmin(d)\n[1] 6\n\n# Posición\n(d == min(d), arr.ind = TRUE)\n     row col\n[1,]   2   4Búsqueda de mínimos y máximos en una matriz:Como aprenderán en Álgebra, las matrices numéricas son muy útiles en diversos campos y por eso existen distintas operaciones que se pueden realizar con las mismas. Veamos algunos ejemplos de la aplicación del álgebra matricial en R:Transpuesta de una matriz:\n\n\n     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\n\nt()\n     [,1] [,2] [,3]\n[1,]    5    8    2\n[2,]    2    3    1Transpuesta de una matriz:Producto entre dos matrices:\n\ne <- matrix(1:4, nrow = 2)\n\n     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\n\ne\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n%*% e\n     [,1] [,2]\n[1,]    9   23\n[2,]   14   36\n[3,]    4   10Producto entre dos matrices:Inversa de la matriz:\n\nsolve(e)\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5Inversa de la matriz:Obtener los elementos de la diagonal principal:\n\ndiag(d)\n[1] 72 87 83 21Obtener los elementos de la diagonal principal:","code":"\nu <- c(5, 8, 2)\nv <- c(2, 3, -1)\nsuma <- u + v\nsuma[1]  7 11  1\nsuma <- numeric(length(u))\nfor (i in 1:length(u)) { \n    suma[i] <- u[i] + v[i]\n}\nsuma[1]  7 11  1\nu - v[1] 3 5 3\nu * v[1] 10 24 -2\nu / v[1]  2.500000  2.666667 -2.000000\nu %% v[1] 1 2 0\nz <- c(1, 2)\nu + zWarning in u + z: longer object length is not a multiple of shorter object\nlength[1]  6 10  3\nu + 5[1] 10 13  7\n1 / v[1]  0.5000000  0.3333333 -1.0000000\n10 * z[1] 10 20\n(u + v) / 100[1] 0.07 0.11 0.01\nlog(u)[1] 1.6094379 2.0794415 0.6931472\nsqrt(z)[1] 1.000000 1.414214\nsum(u)[1] 15\nprod(u)[1] 80\nmean(u)[1] 5\nx <- c(40, 70, 20, 90, 20)\nmin(x)[1] 20\nwhich.min(x) # si el mínimo se repite, esta es la posición del primero[1] 3\nwhich(x == min(x)) # si el mínimo se repite, esto muestra todas sus posiciones[1] 3 5\nmax(x)[1] 90\nwhich.max(x) # si el mínimo se repite, esta es la posición del primero[1] 4\nwhich(x == max(x)) # si el mínimo se repite, esto muestra todas sus posiciones[1] 4\nu[1] 5 8 2\nv[1]  2  3 -1\nsum(u * v)[1] 32\nrtdo <- 0\nfor (i in 1:length(u)) { \n    rtdo <- rtdo + u[i] * v[i]\n}\nrtdo[1] 32\nx[1] 40 70 20 90 20\nsort(x)[1] 20 20 40 70 90\nsort(x, decreasing = TRUE)[1] 90 70 40 20 20\na <- matrix(c(5, 8, 2, 2, 3, 1), nrow = 3)\nb <- matrix(c(0, -1, 3, 1, 2, 4), nrow = 3)\na     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\nb     [,1] [,2]\n[1,]    0    1\n[2,]   -1    2\n[3,]    3    4\nsuma <- matrix(NA, nrow(a), ncol(a))\nfor (i in 1:nrow(a)) {\n    for (j in 1:ncol(a)) {\n        suma[i, j] <- a[i, j] + b[i, j]\n    }\n}\nsuma     [,1] [,2]\n[1,]    5    3\n[2,]    7    5\n[3,]    5    5\na + b     [,1] [,2]\n[1,]    5    3\n[2,]    7    5\n[3,]    5    5\na + b     [,1] [,2]\n[1,]    5    3\n[2,]    7    5\n[3,]    5    5\na - b     [,1] [,2]\n[1,]    5    1\n[2,]    9    1\n[3,]   -1   -3\na * b     [,1] [,2]\n[1,]    0    2\n[2,]   -8    6\n[3,]    6    4\na / b           [,1] [,2]\n[1,]        Inf 2.00\n[2,] -8.0000000 1.50\n[3,]  0.6666667 0.25\na^2     [,1] [,2]\n[1,]   25    4\n[2,]   64    9\n[3,]    4    1\nsqrt(a)         [,1]     [,2]\n[1,] 2.236068 1.414214\n[2,] 2.828427 1.732051\n[3,] 1.414214 1.000000\na     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\nsum(a)[1] 21\nmean(a)[1] 3.5\nrowSums(a)[1]  7 11  3\ncolSums(a)[1] 15  6\nrowMeans(a)[1] 3.5 5.5 1.5\ncolMeans(a)[1] 5 2\nd <- matrix(sample(100, 20), nrow = 5)\n\n# Valor máximo\nmax(d)[1] 100\n# Posición (arr.ind = TRUE para que nos indique fila y columna)\nwhich(d == max(d), arr.ind = TRUE)     row col\n[1,]   5   4\n# Valor mínimo\nmin(d)[1] 6\n# Posición\nwhich(d == min(d), arr.ind = TRUE)     row col\n[1,]   2   4\na     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\nt(a)     [,1] [,2] [,3]\n[1,]    5    8    2\n[2,]    2    3    1\ne <- matrix(1:4, nrow = 2)\na     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\ne     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\na %*% e     [,1] [,2]\n[1,]    9   23\n[2,]   14   36\n[3,]    4   10\nsolve(e)     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\ndiag(d)[1] 72 87 83 21"},{"path":"estructuras-de-datos.html","id":"operaciones-lógicas-vectorizadas","chapter":"5 Estructuras de datos","heading":"5.2.3 Operaciones lógicas vectorizadas","text":"Cuando dos vectores o matrices se vinculan través de una comparación, se opera elemento elemento obteniendo un vector o matriz de valores lógicos:Si un vector o matriz de valores lógicos y queremos saber si todos o al menos uno de los elementos es igual TRUE, podemos usar las funciones () y (), respectivamente:Las operaciones de comparación pueden hacerse entre cada elemento de un vector o matriz y un único valor:Los operadores lógicos que se utilizan para realizar cálculos elemento elemento con vectores y matrices son &, \\ y !. Ellos nos permiten crear expresiones aún más complejas:","code":"\nx <- c(40, 70, 20, 90, 20)\ny <- c(10, 70, 30, 15, 21)\nx > y[1]  TRUE FALSE FALSE  TRUE FALSE\nx < y * 5[1]  TRUE  TRUE  TRUE FALSE  TRUE\na <- matrix(c(5, 8, 2, 2, 3, 1), nrow = 3)\nb <- matrix(c(0, -1, 3, 1, 2, 4), nrow = 3)\na     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\nb     [,1] [,2]\n[1,]    0    1\n[2,]   -1    2\n[3,]    3    4\na != b     [,1] [,2]\n[1,] TRUE TRUE\n[2,] TRUE TRUE\n[3,] TRUE TRUE\na > b      [,1]  [,2]\n[1,]  TRUE  TRUE\n[2,]  TRUE  TRUE\n[3,] FALSE FALSE\nall(a != b)[1] TRUE\nany(a != b)[1] TRUE\nall(a > b)[1] FALSE\nany(a > b)[1] TRUE\nx < 50[1]  TRUE FALSE  TRUE FALSE  TRUE\na == 3      [,1]  [,2]\n[1,] FALSE FALSE\n[2,] FALSE  TRUE\n[3,] FALSE FALSE\nb > 0      [,1] [,2]\n[1,] FALSE TRUE\n[2,] FALSE TRUE\n[3,]  TRUE TRUE\nx < 50 & y > 50[1] FALSE FALSE FALSE FALSE FALSE\na < 0 | b > 0      [,1] [,2]\n[1,] FALSE TRUE\n[2,] FALSE TRUE\n[3,]  TRUE TRUE\n!(x <= 50)[1] FALSE  TRUE FALSE  TRUE FALSE"},{"path":"estructuras-de-datos.html","id":"uso-de-vectores-para-indexar-vectores-y-matrices","chapter":"5 Estructuras de datos","heading":"5.2.4 Uso de vectores para indexar vectores y matrices","text":"Como ya sabemos, indexar es hacer referencia uno o más elementos particulares dentro de una estructura de datos. Vimos que para indexar un vector, hace falta sólo un índice:Y que para indexar matrices, son necesarios dos índices:Pero también podemos indexar múltiples elementos de un vector o una matriz la vez:VectoresMatrices","code":"\nx <- c(10.4, 5.6, 3.1, 6.4, 21.7)\nx[3][1] 3.1\na <- matrix(c(4,-2, 1, 20, -7, 12, -8, 13, 17), nrow = 3)\na     [,1] [,2] [,3]\n[1,]    4   20   -8\n[2,]   -2   -7   13\n[3,]    1   12   17\na[2, 3][1] 13\n# Mostrar los primeros tres elementos del vector x\nx[1:3][1] 10.4  5.6  3.1\n# Mostrar los elementos en las posiciones 2 y 4\nx[c(2, 4)][1] 5.6 6.4\n# Mostrar el último elemento\nx[length(x)][1] 21.7\n# Indexar con valores lógicos. Obtenemos sólo las posiciones indicadas con TRUE:\nx[c(F, F, T, T, F)][1] 3.1 6.4\n# Sabiendo que la siguiente operación devuelve TRUE o FALSE para cada posición de x:\nx > 10[1]  TRUE FALSE FALSE FALSE  TRUE\n# ...la podemos usar para quedarnos con aquellos elementos de x mayores a 10:\nx[x > 10][1] 10.4 21.7\n#Mostrar todos los elementos menos el cuarto\nx[-4][1] 10.4  5.6  3.1 21.7\n# Toda la fila 3\na[3, ][1]  1 12 17\n# Toda la columna 2\na[, 2][1] 20 -7 12\n# Submatriz con las columnas 1 y 2\na[, 1:2]     [,1] [,2]\n[1,]    4   20\n[2,]   -2   -7\n[3,]    1   12\n# Submatriz con las columnas 1 y 3\na[, c(1, 3)]     [,1] [,2]\n[1,]    4   -8\n[2,]   -2   13\n[3,]    1   17\n# Asignar el mismo valor en toda la fila 3\na[3, ] <- 10\na     [,1] [,2] [,3]\n[1,]    4   20   -8\n[2,]   -2   -7   13\n[3,]   10   10   10"},{"path":"estructuras-de-datos.html","id":"la-función-apply","chapter":"5 Estructuras de datos","heading":"5.2.5 La función apply()","text":"Supongamos que queremos encontrar el máximo valor en cada fila de una matriz. Podemos lograrlo de la siguiente forma. Creamos un vector maximos con lugar para guardar el máximo de cada fila. Luego, iteramos para recorrer cada fila de la matriz, buscar el mínimo y guardarlo en el vector maximos:En R existe una forma más práctica y eficiente de conseguir el mismo resultado:La función apply() sirve para aplicar una misma operación cada fila o columna de una matriz. En el ejemplo anterior:el primer argumento, , es la matriz analizar.el segundo argumento, 1, indica que la operación se realizará fila por fila (para que se haga por columna, debemos indicar 2)el tercer argumento, max, es el nombre de la función que se le aplica cada fila.De manera similar, podemos encontrar el mínimo valor de cada columna:","code":"\na     [,1] [,2] [,3]\n[1,]    4   20   -8\n[2,]   -2   -7   13\n[3,]   10   10   10\nmaximos <- numeric(nrow(a))\nfor (i in 1:nrow(a)) {\n    maximos[i] <- max(a[i, ])\n}\nmaximos[1] 20 13 10\napply(a, 1, max)[1] 20 13 10\napply(a, 2, min)[1] -2 -7 -8"},{"path":"estructuras-de-datos.html","id":"generación-de-vectores-con-secuencias-numéricas","chapter":"5 Estructuras de datos","heading":"5.2.6 Generación de vectores con secuencias numéricas","text":"continuación mostramos cómo generar algunos vectores numéricos en R:","code":"\n# Enteros de 1 a 5\n1:5[1] 1 2 3 4 5\n# Números de 1 a 10 cada 2\nseq(1, 10, 2)[1] 1 3 5 7 9\n# Números de 0 a -1 cada -0.1\nseq(0, -1, -0.1) [1]  0.0 -0.1 -0.2 -0.3 -0.4 -0.5 -0.6 -0.7 -0.8 -0.9 -1.0\n# Siete números equiespaciados entre 0 y 1\nseq(0, 1, length.out = 7)[1] 0.0000000 0.1666667 0.3333333 0.5000000 0.6666667 0.8333333 1.0000000\n# Repetir el 1 tres veces\nrep(1, 3)[1] 1 1 1\n# Repetir (1, 2, 3) tres veces\nrep(1:3, 3)[1] 1 2 3 1 2 3 1 2 3\n# Repetir cada número tres veces\nrep(1:3, each = 3)[1] 1 1 1 2 2 2 3 3 3\n# Generar una matriz diagonal\ndiag(c(3, 7, 1, 5))     [,1] [,2] [,3] [,4]\n[1,]    3    0    0    0\n[2,]    0    7    0    0\n[3,]    0    0    1    0\n[4,]    0    0    0    5\n# Generar una matriz identidad\ndiag(rep(1, 5))     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1"},{"path":"estructuras-de-datos.html","id":"concatenación-de-vectores-y-matrices","chapter":"5 Estructuras de datos","heading":"5.2.7 Concatenación de vectores y matrices","text":"Los vectores pueden combinarse entre sí para crear nuevos vectores con c():Matrices que tienen la misma cantidad de filas pueden concatenarse una al lado de la otra con cbind():Matrices que tienen la misma cantidad de columnas pueden concatenarse una debajo de la otra con cbind():Estas funciones también permiten unir matrices con vectores:","code":"\nx <- 1:5\ny <- c(10, 90, 87)\nz <- c(x, y, x)\nz [1]  1  2  3  4  5 10 90 87  1  2  3  4  5\na <- matrix(c(5, 8, 2, 2, 3, 1), nrow = 3)\nb <- matrix(c(0, -1, 3, 1, 2, 4), nrow = 3)\na     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\nb     [,1] [,2]\n[1,]    0    1\n[2,]   -1    2\n[3,]    3    4\nd <- cbind(a, b)\nd     [,1] [,2] [,3] [,4]\n[1,]    5    2    0    1\n[2,]    8    3   -1    2\n[3,]    2    1    3    4\ne <- rbind(a, b)\ne     [,1] [,2]\n[1,]    5    2\n[2,]    8    3\n[3,]    2    1\n[4,]    0    1\n[5,]   -1    2\n[6,]    3    4\nx <- 1:6\ncbind(e, x)          x\n[1,]  5 2 1\n[2,]  8 3 2\n[3,]  2 1 3\n[4,]  0 1 4\n[5,] -1 2 5\n[6,]  3 4 6"},{"path":"estructuras-de-datos.html","id":"listas","chapter":"5 Estructuras de datos","heading":"5.2.8 Listas","text":"Una de las principales características de los arreglos es la homegeneidad: todos los elementos que contienen deben ser del mismo tipo. se puede, por ejemplo, mezclar en una matriz valores numéricos y lógicos. Sin embargo, en muchos problemas resulta útil contar con alguna estructura de datos que permita agrupar objetos de diversos tipos. Esa es, justamente, la definición de una lista. Podemos imaginarla como una bolsa en la cual podemos meter todo tipo de objetos, incluyendo vectores, matrices y, por qué , otras bolsas (es decir, bolsas dentro de una bolsa o listas dentro de una lista). Todos los lenguajes de programación proveen algún tipo de estructura con estas características, aunque todos las llaman igual. Otros posibles nombres con los que se conocen pueden ser tupla o agregado. En R se llaman listas o vectores recursivos. El siguiente diagrama presenta una lista (recuadro con puntas redondeadas) que contiene:Un vector numérico de largo 3.Un vector carácter de largo 2.Una matriz numérica de dimensión 2x2.Un valor lógico.\nFigura 5.13: Ejemplo de una lista\nLa creación de esta lista se realiza mediante la función list(), cuyos argumentos son los elementos que queremos guardar en la lista, separados por comas:Luego de correr la sentencia anterior, podemos ver que mi_lista es un nuevo objeto disponible en el ambiente global y como tal está listado en el panel Environment. Allí se nos indica que se trata de una lista y, además, podemos previsualizar su contenido al hacer clic en el círculo celeste que antecede su nombre:\nFigura 5.14: La lista en la pestaña Environment de RStudio\nUsamos dobles corchetes [[ ]] para referenciar cada objeto que forma parte de la lista. Además, si queremos indicar un elemento dentro de un objeto que forma parte de la lista, agregamos otro conjunto de corchetes como hacemos con vectores y matrices. Por ejemplo:\nFigura 5.15: Ejemplo de una lista\nPodemos asignar valor algún elemento usando los índices de esa misma forma:Cada uno de los elementos de una lista puede tener un nombre propio. Podemos asignarle un nombre uno, algunos o todos los integrantes en una lista:Esto amplía las opciones para hacer referencia cada objeto y elemento allí contenido. Las siguientes sentencias son todas equivalentes y sirven para acceder al tercer elemento de la lista, cuyo nombre es y:Finalmente, consideremos la situación en la cual queremos aplicarle la misma función cada uno de los elementos que integran una lista. Para esto podemos usar lapply() o sapply(), parientes de la función apply() que vimos antes. Por ejemplo, tenemos una lista con varios vectores y queremos saber el largo de cada uno de ellos:Podemos ver el largo de cada elemento de la lista, uno por uno:O podemos hacerlo así:Ambas funciones le aplican la función elegida como segundo argumento (length()) cada elemento de la lista indicada en el primer argumento (mi_lista). La diferencia entre ellas es que lapply() devuelve una nueva lista con los resultados, mientras que sapply() los devuelve acomodados en un vector23.Ejemplo: función que devuelve una listaEn el capítulo anterior, dijimos que las funciones son subalgoritmos que podían devolver exactamente un objeto como resultado. Esto puede ser una limitación, ya que en algunos casos tal vez necesitemos devolver varios elementos de distinto tipo\n24\n.\nLa solución consiste en devolver una lista que englobe todos los objetos que nos interese que la función le entregue como resultado al algoritmo principal que la invocó. Como una lista es un único objeto, ¡la función puede devolverla sin ningún problema!Para ejemplificar, recordemos el siguiente ejercicio de la práctica 3: escribir un programa para la creación de la función triangulos(, b, c) que partir de la longitud de los tres lados de un triángulo , b y d (valores positivos) lo clasifica con los siguientes resultados posibles: forman un triángulo (un lado mayor que la suma de los otros dos), triángulo equilátero, isósceles o escaleno. Vamos modificar la función para que tenga el siguiente comportamiento: la función debe devolver el tipo de triángulo como cadena de texto y el valor numérico del perímetro del mismo (o un 0 si es triángulo). Es decir, la función debe devolver tanto un objeto de tipo carácter y otro de tipo numérico. Para lograrlo los encerraremos en una lista:Ejemplos del uso de esta función:","code":"\nmi_lista <- list(\n    c(-4.5, 12, 2.71),\n    c(\"hola\", \"chau\"),\n    matrix(c(8, 11, 13, 16), nrow = 2),\n    TRUE\n)\nmi_lista[[1]]\n[1] -4.50 12.00  2.71\n\n[[2]]\n[1] \"hola\" \"chau\"\n\n[[3]]\n     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\n\n[[4]]\n[1] TRUE\nmi_lista[[1]][1] -4.50 12.00  2.71\nmi_lista[[1]][3][1] 2.71\nmi_lista[[2]][1] \"hola\" \"chau\"\nmi_lista[[2]][2][1] \"chau\"\nmi_lista[[3]]     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\nmi_lista[[3]][2, 1][1] 11\nmi_lista[[4]][1] TRUE\nmi_lista[[4]][1][1] TRUE\nmi_lista[[1]][3] <- 0\nmi_lista[[1]]\n[1] -4.5 12.0  0.0\n\n[[2]]\n[1] \"hola\" \"chau\"\n\n[[3]]\n     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\n\n[[4]]\n[1] TRUE\nmi_lista <- list(\n    w = c(-4.5, 12, 2.71),\n    x = c(\"hola\", \"chau\"),\n    y = matrix(c(8, 11, 13, 16), nrow = 2),\n    z = TRUE\n)\nmi_lista$w\n[1] -4.50 12.00  2.71\n\n$x\n[1] \"hola\" \"chau\"\n\n$y\n     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\n\n$z\n[1] TRUE\nmi_lista[[3]]     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\nmi_lista[[\"y\"]]     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\nmi_lista$y     [,1] [,2]\n[1,]    8   13\n[2,]   11   16\nmi_lista <- list(x = c(1, 8, 9, -1), y = c(\"uno\", \"dos\", \"tres\"), z = c(3, 2))\nmi_lista$x\n[1]  1  8  9 -1\n\n$y\n[1] \"uno\"  \"dos\"  \"tres\"\n\n$z\n[1] 3 2\nlength(mi_lista$x)[1] 4\nlength(mi_lista$y)[1] 3\nlength(mi_lista$z)[1] 2\nlapply(mi_lista, length)$x\n[1] 4\n\n$y\n[1] 3\n\n$z\n[1] 2\nsapply(mi_lista, length)x y z \n4 3 2 \n#-----------------------------------------------------\n# Función triangulos\n# Clasifica un triángulo según la longitud de sus lados\n# Entrada:\n#       - a, b, d, números reales positivos\n# Salida:\n#       - una lista cuyo primer elemento es un carácter que indica el tipo de\n#       triángulo y cuyo segundo elemento es el perímetro del triángulo o el valor 0\n#       si los lados provistos no corresponden a un triángulo\n#-----------------------------------------------------\ntriangulos <- function(a, b, d) {\n    perimetro <- a + b + d\n    if (a > b + d || b > a + d || d > a + b) {\n        tipo <- \"no es triángulo\"\n        perimetro <- 0\n    } else if (a == b & a == d) {\n        tipo <- \"equilátero\"\n    } else if (a == b || a == d || b == d) {\n        tipo <- \"isósceles\"\n    } else {\n        tipo <- \"escaleno\"\n    }\n    return(list(tipo = tipo, perimetro = perimetro))\n    # atención con tipo = tipo: la primera vez es el nombre que le estamos dando\n    # al elemento de la lista, la segunda vez es la variable que guardamos en la lista\n}\n# Guardamos el resultado devuelto (una lista) en el objeto resultado\nresultado <- triangulos(2, 3, 4)\n# Miramos el primer elemento de la lista (carácter que indica el tipo)\nresultado[[1]][1] \"escaleno\"\nresultado$tipo[1] \"escaleno\"\n# Miramos el primer elemento de la lista (perímetro)\nresultado[[2]][1] 9\nresultado$perimetro[1] 9\n# Miramos todo junto\nresultado$tipo\n[1] \"escaleno\"\n\n$perimetro\n[1] 9\n# Otro ejemplo:\nresultado2 <- triangulos(2, 3, 10)\nresultado2[[1]][1] \"no es triángulo\"\nresultado2[[2]][1] 0"},{"path":"estructuras-de-datos.html","id":"otras-consideraciones-lectura-opcional","chapter":"5 Estructuras de datos","heading":"5.3 Otras consideraciones (lectura opcional)","text":"Dependiendo de cómo se almacenan los datos que componen una estructura en el hardware de la computadora, las mismas se pueden clasificar en contiguas o enlazadas. En las estructuras contiguas, los datos se sitúan en áreas adyacentes de memoria y cada uno de ellos se puede localizar partiendo de la posición en memoria del primer elemento de la estructura. En las estructuras enlazadas, los datos se sitúan necesariamente de forma continua en la memoria sino que existen punteros (otro tipo de dato que apunta hacia determinada posición de memoria) que permite identificar cuál es el orden de los elementos dentro de la estructura.Por otro lado, las estructuras también se pueden clasificar en dinámicas o estáticas, según si su tamaño puede cambiar o durante la ejecución de un programa, respectivamente. Cuando se emplea una estructura estática, se declara con anterioridad el tamaño que ocupará en memoria y su dimensión podrá variar, aún cuando se ocupen todas las posiciones reservadas. En contraposición, una estructura dinámica puede cambiar en tamaño.Antes se mencionó que las listas de R pueden contener objetos de distintos tipos. Para ser más rigurosos, una lista es un tipo especial de vector que agrupa punteros hacia distintos objetos. Técnicamente, todos los elementos de una lista son del mismo tipo (punteros), pero hacen referencia distintos objetos, dándonos la impresión de que en una lista de R, sencillamente, podemos meter cualquier tipo de objeto.","code":""},{"path":"estructuras-de-datos.html","id":"arreglos-multidimensionales-lectura-opcional","chapter":"5 Estructuras de datos","heading":"5.4 Arreglos multidimensionales (lectura opcional)","text":"Un arreglo multidimensional contiene más de dos dimensiones, es decir, requiere más de dos índices para identificar cada uno de sus elementos. La representación matemática o visual ya es tan sencilla como la de los vectores o matrices. Para interpretarlos o saber cuándo usarlos, pensamos que cada una de las dimensiones representa una característica de los elementos.Por ejemplo, imaginemos que en un local comercial se quiere registrar cuántos clientes se atendieron en cada una de las tres cajas disponibles (primer dimensión del arreglo: caja 1, caja 2 o caja 3), ya sea en el turno mañana o tarde (segunda dimensión: 1 para la mañana o 2 para la tarde) en cada día hábil de una semana (tercera dimensión: 1 lunes, 2 martes, 3 miércoles, 4 jueves o 5 viernes). Si queremos registrar, por ejemplo, que la caja 1 en el turno tarde del día jueves atendió 12 clientes, tenemos que guardar el valor 12 en la posición [1, 2, 4] del arreglo.El arreglo de 3 dimensiones que permite acomodar toda la información del ejemplo en una sola estructura puede definirse en R así:Luego, si queremos registrar que la caja 1 en el turno tarde del día jueves atendió 12 clientes, hacemos:En R, podemos ponerle un nombre cada una de las dimensiones del arreglo (“caja”, “turno”, “dia”), para poder identificar mejor qué aspecto hace referencia y, su vez, un nombre cada una de sus modalidades (por ejemplo, “caja 1”, “caja 2” o “caja 3”). Esto se logra de la siguiente forma:Para situaciones como la anterior, resulta más útil guardar los valores en otros tipos de estructuras especializadas en conjuntos de datos, como veremos más adelante. Por esta razón, en esta asignatura profundizaremos en el estudio de arreglos multidimensionales y nos bastaremos con vectores y matrices. Sin embargo, debemos saber de su existencia porque son estructuras útiles para ciertas tareas de programación.","code":"\nclientes <- array(0, dim = c(3, 2, 5))\nclientes, , 1\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 2\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 3\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 4\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 5\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\nclientes[1, 2, 4] <- 12\nclientes, , 1\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 2\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 3\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\n\n, , 4\n\n     [,1] [,2]\n[1,]    0   12\n[2,]    0    0\n[3,]    0    0\n\n, , 5\n\n     [,1] [,2]\n[1,]    0    0\n[2,]    0    0\n[3,]    0    0\ndimnames(clientes) <- list(caja = c(\"caja 1\", \"caja 2\", \"caja 3\"),\n                           turno = c(\"mañana\", \"tarde\"),\n                           dia = c(\"lun\", \"mar\", \"mie\", \"jue\", \"vie\"))\nclientes, , dia = lun\n\n        turno\ncaja     mañana tarde\n  caja 1      0     0\n  caja 2      0     0\n  caja 3      0     0\n\n, , dia = mar\n\n        turno\ncaja     mañana tarde\n  caja 1      0     0\n  caja 2      0     0\n  caja 3      0     0\n\n, , dia = mie\n\n        turno\ncaja     mañana tarde\n  caja 1      0     0\n  caja 2      0     0\n  caja 3      0     0\n\n, , dia = jue\n\n        turno\ncaja     mañana tarde\n  caja 1      0    12\n  caja 2      0     0\n  caja 3      0     0\n\n, , dia = vie\n\n        turno\ncaja     mañana tarde\n  caja 1      0     0\n  caja 2      0     0\n  caja 3      0     0"},{"path":"uso-de-archivos-de-datos.html","id":"uso-de-archivos-de-datos","chapter":"6 Uso de archivos de datos","heading":"6 Uso de archivos de datos","text":"","code":""},{"path":"uso-de-archivos-de-datos.html","id":"introducción","chapter":"6 Uso de archivos de datos","heading":"6.1 Introducción","text":"Como hemos visto, los programas usan variables para guardar información: datos de entrada, resultados calculados, valores intermedios, etc. Sin embargo, la información guardada en las variables es efímera. Cuando los programas paran de correr, el valor almacenado en las variables se pierde. En muchas ocasiones, es necesario guardar información de una forma más permanente.En estos casos, el enfoque usual es recolectar la información en un todo lógicamente cohesivo y guardarlo en un medio permanente que generalmente se graba en el disco rígido de la máquina, es decir, en un archivo. Un archivo o fichero es un conjunto de información sobre un mismo tema tratado como una unidad de almacenamiento y organizado de forma estructurada para la búsqueda de un dato individual. Los archivos pueden contener instrucciones de programas o información creada o usada por un programa. Todos los objetos de datos permanentes que guardamos en nuestra computadora (documentos, juegos, programas ejecutables, código, etc.) son guardados en la forma de archivos.Un archivo se identifica con un nombre, seguido por un punto y una extensión, la cual es un sufijo empleado para indicar características de su contenido, el uso pretendido o el software con el cual puede ser empleado. Por ejemplo, un archivo que se llama planilla.xlsx es una hoja de cálculo de Excel o un archivo llamado codigo.R es un script de código de R.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"registros-campos-claves-y-bases-de-datos","chapter":"6 Uso de archivos de datos","heading":"6.1.1 Registros, campos, claves y bases de datos","text":"En esta asignatura nos limitaremos trabajar con archivos que guardan información de forma tabular, en los que la unidad elemental que los compone es un registro, es decir, una colección de información relativa una misma entidad. En general, cada registro de un mismo archivo tiene la misma estructura que los demás. Los datos individuales sobre dicha entidad se organizan en campos. Un campo es la mínima unidad de información de un registro.Para ejemplificar, trabajaremos con un archivo llamado mundiales.txt que tiene datos sobre todos los mundiales de fútbol de la FIFA, incluyendo el del año 2022, en el cual nuestra selección argentina conquistó su tercer título. Cada fila del conjunto de datos corresponde un país y cada columna hace referencia las siguientes variables25:Este archivo tiene 80 registros, ya que son 80 países los que han disputado algún mundial lo largo de la historia. Los primeros registros lucen así:Un campo está caracterizado por el tipo de datos que almacena (carácter, numérico, lógico) y en algunos contextos es necesario precisar su longitud (por ejemplo, cantidad de caracteres admitidos como máximo en los datos del campo). Algunos lenguajes, como R, admiten trabajar con campos de longitud variable (sin necesidad de que sea especificada con anticipación).En el contexto del análisis de datos, cada columna o campo en este tipo de archivos puede representar una variable observada sobre los individuos o unidades de interés, los cuales se encuentran dispuestos en las sucesivas filas.Generalmente suele ser necesario identificar de manera única cada registro de un archivo. Para esto suele considerarse uno de los campos del archivo como el campo clave o, más sencillamente, clave. La clave o key es el campo que identifica inequívocamente cada registro, permitiendo diferenciarlo del resto, como podría ser el nombre de la selección en el ejemplo anterior. En ocasiones donde hay un campo clave es posible identificar un registro través de la combinación de los valores presentes en más de uno de los campos.Por último, cabe mencionar que llamamos base de datos un conjunto de archivos que contienen datos relacionados entre sí, vinculados mediante sistemas complejos que enlazan las claves de uno y otro archivo y que pueden ser consultados mediante el uso de software especializado. Por eso, cuando trabajamos con los datos almacenados en un único archivo, es conveniente referirse los mismos como “conjunto de datos” y como “base de datos”.","code":"ARCHIVO: mundiales.txt\nCampo 1 - seleccion: nombre del país, tipo carácter\nCampo 2 - continente: continente al que pertenece el país, tipo carácter\nCampo 3 - participaciones: cantidad de mundiales jugados, tipo numérico\nCampo 4 - pg: cantidad de partidos ganados, tipo numérico\nCampo 5 - pe: cantidad de partidos empatados, tipo numérico\nCampo 6 - pp: cantidad de partidos perdidos, tipo numérico\nCampo 7 - gf: cantidad de goles a favor, tipo numérico\nCampo 8 - gf: cantidad de goles en contra, tipo numérico\nCampo 9 - titulo: cantidad de mundiales ganados, tipo numérico"},{"path":"uso-de-archivos-de-datos.html","id":"organización-de-archivos","chapter":"6 Uso de archivos de datos","heading":"6.1.2 Organización de archivos","text":"Existen distintos tipos de organización de los archivos según la forma en la que se pueda acceder cada uno de sus registros:Organización secuencial\nLos registros se encuentran en cierto orden que debe ser respetado para la lectura de los mismos. Para leer el registro situado en la posición n, el programa previamente tiene que pasar por los n-1 registros que ocupan las posiciones anteriores.\nLos archivos de tipo secuencial en general ocupan menos memoria y suelen ser utilizados para guardar contenidos que sufren pocas modificaciones. Los registros se graban consecutivamente en el soporte que los aloja (por ejemplo, en el disco). El orden físico con el que fueron escritos los registros coincide con el orden de lectura de los mismos.\nLos registros pueden leerse uno por uno hasta llegar al final del archivo, donde se indica de alguna manera el fin del mismo, muchas veces través de un caracter especial como un asterisco o de una línea en blanco. Esta marca generalmente se conoce como EOF (end file). La mayoría de los lenguajes de programación disponen de una función lógica que devuelve un valor VERDADERO cuando se alcanza el final del archivo.\nOrganización secuencialLos registros se encuentran en cierto orden que debe ser respetado para la lectura de los mismos. Para leer el registro situado en la posición n, el programa previamente tiene que pasar por los n-1 registros que ocupan las posiciones anteriores.Los archivos de tipo secuencial en general ocupan menos memoria y suelen ser utilizados para guardar contenidos que sufren pocas modificaciones. Los registros se graban consecutivamente en el soporte que los aloja (por ejemplo, en el disco). El orden físico con el que fueron escritos los registros coincide con el orden de lectura de los mismos.Los registros pueden leerse uno por uno hasta llegar al final del archivo, donde se indica de alguna manera el fin del mismo, muchas veces través de un caracter especial como un asterisco o de una línea en blanco. Esta marca generalmente se conoce como EOF (end file). La mayoría de los lenguajes de programación disponen de una función lógica que devuelve un valor VERDADERO cuando se alcanza el final del archivo.Organización directa\nSon archivos que están organizados de manera que se pueda acceder de forma directa cada registro mediante su posición en el soporte físico que lo contiene, sin tener que pasar secuencialmente por los registros anteriores. Poseen la ventaja de brindar un acceso rápido la información y la posibilidad de leer y escribir registros en cualquier posición y orden.\nSe puede mencionar como desventaja de este tipo de organización el hecho de que requiere la programación de la forma de identificar la posición de un registro partir de alguno de los valores de sus campos, generalmente, la clave. Esto se hace mediante un algoritmo de transformación de la clave (llamado hash function) que partir de la misma devuelve la dirección del registro en el soporte físico. El archivo debe diseñarse teniendo en cuenta de antemano una cantidad total de registros fija.Organización directaSon archivos que están organizados de manera que se pueda acceder de forma directa cada registro mediante su posición en el soporte físico que lo contiene, sin tener que pasar secuencialmente por los registros anteriores. Poseen la ventaja de brindar un acceso rápido la información y la posibilidad de leer y escribir registros en cualquier posición y orden.Se puede mencionar como desventaja de este tipo de organización el hecho de que requiere la programación de la forma de identificar la posición de un registro partir de alguno de los valores de sus campos, generalmente, la clave. Esto se hace mediante un algoritmo de transformación de la clave (llamado hash function) que partir de la misma devuelve la dirección del registro en el soporte físico. El archivo debe diseñarse teniendo en cuenta de antemano una cantidad total de registros fija.Organización indexada\nLos archivos están estructurados de manera que los registros se pueden localizar sin pasar por los anteriores, consultando en una tabla adicional de índices la zona del archivo donde se encuentra el registro buscado. Esto permite localizar un registro por medio de su clave o del valor de algún campo en particular.\nPara imaginarnos esto, podemos pensar que un diccionario es un ejemplo de un archivo indexado, ya que podemos encontrar la región donde se encuentra un registro (palabra) mediante el índice de letras. Si queremos buscar el término “programación” en un diccionario, recorremos todas las palabras del mismo desde la “” hasta encontrar el término de interés, sino que buscamos en el índice en qué página del diccionario se encuentra la “P” y comenzamos una búsqueda secuencial desde la misma.\nUn archivo indexado, entonces, cuenta en realidad con dos archivos, uno de índices (que se recorre de forma secuencial) y otro con los registros propiamente dichos. Posee la ventaja de brindar un rápido acceso los registros, pero con el costo de utilizar espacio adicional para la tabla de índices.Organización indexadaLos archivos están estructurados de manera que los registros se pueden localizar sin pasar por los anteriores, consultando en una tabla adicional de índices la zona del archivo donde se encuentra el registro buscado. Esto permite localizar un registro por medio de su clave o del valor de algún campo en particular.Para imaginarnos esto, podemos pensar que un diccionario es un ejemplo de un archivo indexado, ya que podemos encontrar la región donde se encuentra un registro (palabra) mediante el índice de letras. Si queremos buscar el término “programación” en un diccionario, recorremos todas las palabras del mismo desde la “” hasta encontrar el término de interés, sino que buscamos en el índice en qué página del diccionario se encuentra la “P” y comenzamos una búsqueda secuencial desde la misma.Un archivo indexado, entonces, cuenta en realidad con dos archivos, uno de índices (que se recorre de forma secuencial) y otro con los registros propiamente dichos. Posee la ventaja de brindar un rápido acceso los registros, pero con el costo de utilizar espacio adicional para la tabla de índices.La organización más sencilla y más comúnmente empleada es la secuencial, aunque en algunos casos puede ser la más eficiente. Si bien todos los lenguajes de programación permiten el trabajo con archivos indexados o de organización directa, todos pueden manejar archivos secuenciales.En esta asignatura profundizaremos en esta distinción y trabajaremos con archivos guardados como documentos de Excel (extensión .xlsx) o archivos de texto (extensión .txt o .csv), los cuales siguen una organización secuencial.Un archivo de texto (también conocido como texto llano o texto simple) es un archivo informático que contiene únicamente texto formado por una secuencia ordenada de caracteres. El texto almacenado en este tipo de archivo carece de cualquier tipo de formato tipográfico (negrita, cursiva, colores, subrayado, fuente, etc.), lo cual permite que una gran variedad de programas pueda leer y editar el contenido. Cada renglón en el archivo de texto es un registro y los distintos campos suelen estar señalizados con tabulaciones (archivos .txt, como el que usaremos de ejemplo, mundiales.txt) o separados por comas o punto y comas (archivos .csv).Los archivos de texto están compuestos por caracteres ordinarios, como las letras, números y signos de puntuación, y por caracteres especiales que indican, por ejemplo, saltos de línea (\\n) y tabulaciones (\\t). Pero como en realidad las computadoras solamente entienden números, cada carácter es codificado internamente con una representación numérica binaria, que nosotros nunca llegamos ver. Distintas maneras de hacer esta representación dan lugar diferentes formatos de codificación de caracteres (como ASCII, ISO-8859-1 o UTF-8). Si en alguna oportunidad abrimos un archivo y nos percatamos que caracteres como la “ñ” o las tildes han sido reemplazadas por otros produciendo un aspecto “raro”, significa que el archivo ha sido abierto empleando una codificación diferente de la que se utilizó al crear el archivo. La solución para este problema es muy sencilla, sólo hay que cambiar la opción de codificación la hora de guardar o de abrir el archivo.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"operaciones-sobre-archivos","chapter":"6 Uso de archivos de datos","heading":"6.1.3 Operaciones sobre archivos","text":"El uso de archivos en programación es muy importante ya que nos permite leer datos para hacer algún tipo de procesamiento y también guardar resultados obtenidos. El sistema operativo de la computadora es el que se encarga de manipular los archivos para que podamos leerlos o escribir en ellos, pero debemos aprender las sentencias que el lenguaje de programación elegido utiliza para encargarle esas tareas al sistema operativo. Los procedimientos básicos que los programas pueden llevar cabo sobre los distintos tipos de archivos son:Creación de un archivo: para que un archivo pueda ser utilizado, antes tiene que existir, obviamente. Una vez que el archivo de datos fue creado y existe, se pueden hacer con él las restantes operaciones. En la mayoría de las aplicaciones que veremos, tendremos archivos que han sido creados con anterioridad y ya tienen registros, por lo cual usaremos pocas veces esta acción, pero eventualmente crearemos nuevos archivos para guardar nuevas versiones del conjunto de datos o para guardar resultados en otro tipo de documento.Creación de un archivo: para que un archivo pueda ser utilizado, antes tiene que existir, obviamente. Una vez que el archivo de datos fue creado y existe, se pueden hacer con él las restantes operaciones. En la mayoría de las aplicaciones que veremos, tendremos archivos que han sido creados con anterioridad y ya tienen registros, por lo cual usaremos pocas veces esta acción, pero eventualmente crearemos nuevos archivos para guardar nuevas versiones del conjunto de datos o para guardar resultados en otro tipo de documento.Apertura de un archivo: para que un programa pueda operar sobre un archivo, la primera acción que debe realizar es la apertura del mismo, que incluye la identificación del archivo utilizar y el modo (lectura o escritura). Esto hace que el sistema operativo establezca una conexión con el archivo que mientras se mantenga activa permitirá la lectura y escritura de registros en el mismo. Dependiendo del lenguaje de programación o de las subsiguientes operaciones realizar, en algunos casos la apertura tiene que ser indicada con alguna instrucción de manera explícita y en otros, .Apertura de un archivo: para que un programa pueda operar sobre un archivo, la primera acción que debe realizar es la apertura del mismo, que incluye la identificación del archivo utilizar y el modo (lectura o escritura). Esto hace que el sistema operativo establezca una conexión con el archivo que mientras se mantenga activa permitirá la lectura y escritura de registros en el mismo. Dependiendo del lenguaje de programación o de las subsiguientes operaciones realizar, en algunos casos la apertura tiene que ser indicada con alguna instrucción de manera explícita y en otros, .Lectura de registros en un archivo: la lectura consiste en transferir información del archivo la memoria principal usada por el programa. En los archivos de organización secuencial, los registros se leen uno por uno, es decir, línea por línea, hasta llegar al final del archivo. Sin embargo, en la aplicaciones que nos interesan, el software se encarga de leer automáticamente todos los registros y almacenarlos en alguna estructura de datos especializada que definamos en el ambiente de trabajo.Lectura de registros en un archivo: la lectura consiste en transferir información del archivo la memoria principal usada por el programa. En los archivos de organización secuencial, los registros se leen uno por uno, es decir, línea por línea, hasta llegar al final del archivo. Sin embargo, en la aplicaciones que nos interesan, el software se encarga de leer automáticamente todos los registros y almacenarlos en alguna estructura de datos especializada que definamos en el ambiente de trabajo.Escritura en un archivo: la escritura es la transferencia de información guardada en las variables del programa al archivo.Escritura en un archivo: la escritura es la transferencia de información guardada en las variables del programa al archivo.Cierre de un archivo: cuando un programa vaya acceder más un archivo, es necesario indicarlo través del cierre del mismo, para que se interrumpa la conexión establecida por el sistema operativo. Esto hace que se liberen memoria y recursos del sistema, se prevenga la corrupción de los datos y se exprese explícitamente que ya se hará más uso del mismo. En algunos lenguajes o para determinadas tareas, esto puede ser necesario.Cierre de un archivo: cuando un programa vaya acceder más un archivo, es necesario indicarlo través del cierre del mismo, para que se interrumpa la conexión establecida por el sistema operativo. Esto hace que se liberen memoria y recursos del sistema, se prevenga la corrupción de los datos y se exprese explícitamente que ya se hará más uso del mismo. En algunos lenguajes o para determinadas tareas, esto puede ser necesario.Otras operaciones: ptras operaciones que se pueden realizar sobre los archivos, en base combinaciones de las anteriores, incluyen las acciones de:\nActualización: añadir (dar de alta), modificar o eliminar (dar de baja) algún registro.\nClasificación: reubicar los registros de tal forma que queden ordenados por algún campo determinado.\nFusión o mezcla: combinar dos o más archivos para formar uno nuevo.\nPartición: subdividir los registros por el valor que toman en algún campo para generar más de un archivo.\nOtras operaciones: ptras operaciones que se pueden realizar sobre los archivos, en base combinaciones de las anteriores, incluyen las acciones de:Actualización: añadir (dar de alta), modificar o eliminar (dar de baja) algún registro.Clasificación: reubicar los registros de tal forma que queden ordenados por algún campo determinado.Fusión o mezcla: combinar dos o más archivos para formar uno nuevo.Partición: subdividir los registros por el valor que toman en algún campo para generar más de un archivo.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"lectura-de-los-registros-del-archivo","chapter":"6 Uso de archivos de datos","heading":"6.2 Lectura de los registros del archivo","text":"Ya hemos mencionado que R se organiza mediante un sistema de paquetes, algunos de los cuales vienen instalados con la distribución básica de R, mientras que otros deben ser instalados si tenés el particular interés de usarlos. R Base trae muchas funciones útiles para la importación de datos, así como para las subsiguientes tareas de manejo, transformación y resumen. Sin embargo, en esta asignatura aprenderemos emplear una familia de paquetes conocida como tidyverse, creados para la manipulación, exploración y visualización de datos con un diseño, estructuras y reglas de uso en común, que resultan muy amigables para programar.Instalamos esta colección de paquetes con:Lo anterior se realiza una sola vez. Luego, cada vez que queramos usar este sistema, usamos library() para que queden nuestra disposición las funciones provistas por los paquetes más importantes de esta gran familia:El tidyverse provee una función de uso muy sencillo para leer datos guardados en un archivo de texto con campos separados por tabulaciones, como es el caso de mundiales.txt. En este enlace o en el aula virtual podrás encontrar el archivo de datos.Si tenemos que importar otro tipo de archivo (por ejemplo, de Excel o de texto separado con comas) y nos acordamos cuál es la función que permite hacerlo, podemos recurrir al menú de importación de datos mediante el botón Import Dataset en el panel Environment de RStudio (arriba la derecha). Ahí podremos elegir distintas opciones para la importación y automáticamente se generará y ejecutará el código de R necesario, el cual debemos copiar y pegar en nuestro script para dejar sentado cómo se realizó la importación.Una vez completado este paso, en el ambiente podremos ver listado un nuevo objeto llamado datos, ya que ese es el nombre que elegimos como identificador para el conjunto de datos devuelto por la función read_delim(). Allí también vemos una breve descripción que nos dice que datos tiene 80 observaciones (registros) de 9 variables (campos). Si hacemos clic sobre el nombre del objeto se abrirá una pestaña para que podamos explorar su contenido. Entonces… ¿qué tipo de objeto es datos?:Hasta ahora habíamos trabajado con tres tipos de datos básicos: numérico, carácter y lógico, y habíamos visto que con los mismos podíamos crear estructuras de datos como vectores, matrices o listas. Como indica la salida anterior, el objeto datos es de tipo data.frame, lo cual significa que es una estructura de datos bidimensional (como una matriz) en la cual cada fila representa un registro y cada columna representa uno de los campos del archivo, pudiendo entonces almacenar valores de distinto tipo en cada una de ellas (diferencia de los arreglos, cuyos valores son todos homogéneos)26.Existen algunas funciones de R que nos permiten explorar el contenido de un data.frame:Un data.frame puede ser indexado de la misma forma empleada con matrices, por ejemplo:Para hacer referencia exclusivamente una variable dentro del data.frame, usamos el nombre del conjunto de datos, seguido por el operador $ y el nombre de la variable, por ejemplo:Lo anterior resulta en un vector, con el que se pueden hacer operaciones como buscar el valor máximo si queremos saber cuál es la cantidad máxima de títulos alcanzada:Si bien en los ejemplos anteriores vemos que en muchos aspectos los data.frames son similares las matrices, partir de ahora vamos ver cómo utilizar funciones que fueron especialmente pensadas para ayudarnos transformar y explorar los conjuntos de datos que están guardados en objetos de tipo data.frame y que simplifican muchas tareas relacionadas al análisis de datos.","code":"\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\ndatos <- read_delim(\"mundiales.txt\")\nclass(datos)[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n# Muestra los nombres de las columnas (campos del archivo)\nnames(datos)[1] \"seleccion\"       \"continente\"      \"participaciones\" \"pg\"             \n[5] \"pe\"              \"pp\"              \"gf\"              \"gc\"             \n[9] \"titulos\"        \n# Muestra la \"estructura\" interna del dataset\nstr(datos)spc_tbl_ [80 × 9] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ seleccion      : chr [1:80] \"Brasil\" \"Alemania\" \"Argentina\" \"Italia\" ...\n $ continente     : chr [1:80] \"América\" \"Europa\" \"América\" \"Europa\" ...\n $ participaciones: num [1:80] 22 20 18 18 16 16 16 11 14 14 ...\n $ pg             : num [1:80] 76 68 47 45 39 32 31 30 25 21 ...\n $ pe             : num [1:80] 19 21 17 21 14 22 17 14 13 10 ...\n $ pp             : num [1:80] 19 23 24 17 20 20 19 11 21 20 ...\n $ gf             : num [1:80] 237 232 152 128 136 104 108 96 89 69 ...\n $ gc             : num [1:80] 108 130 101 77 85 68 75 52 76 74 ...\n $ titulos        : num [1:80] 5 4 3 4 2 1 1 0 2 0 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   seleccion = col_character(),\n  ..   continente = col_character(),\n  ..   participaciones = col_double(),\n  ..   pg = col_double(),\n  ..   pe = col_double(),\n  ..   pp = col_double(),\n  ..   gf = col_double(),\n  ..   gc = col_double(),\n  ..   titulos = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n# Muestra la cantidad de filas y columnas\ndim(datos)[1] 80  9\n# Muestra la cantidad de filas\nnrow(datos)[1] 80\n# Muestra la cantidad de columnas\nncol(datos)[1] 9\n# Muestra los primeros registros\nhead(datos)# A tibble: 6 × 9\n  seleccion  continente participaciones    pg    pe    pp    gf    gc titulos\n  <chr>      <chr>                <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1 Brasil     América                 22    76    19    19   237   108       5\n2 Alemania   Europa                  20    68    21    23   232   130       4\n3 Argentina  América                 18    47    17    24   152   101       3\n4 Italia     Europa                  18    45    21    17   128    77       4\n5 Francia    Europe                  16    39    14    20   136    85       2\n6 Inglaterra Europa                  16    32    22    20   104    68       1\n# Muestra los últimos registros\ntail(datos)# A tibble: 6 × 9\n  seleccion     continente participaciones    pg    pe    pp    gf    gc titulos\n  <chr>         <chr>                <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1 Emiratos Ára… asia                     1     0     0     3     2    11       0\n2 China         asia                     1     0     0     3     0     9       0\n3 Canadá        América                  2     0     0     6     2    12       0\n4 Haití         América                  1     0     0     3     2    14       0\n5 R. D. del Co… África                   1     0     0     3     0    14       0\n6 El Salvador   América                  2     0     0     6     1    22       0\n# Muestra un resumen de cada campo\nsummary(datos)  seleccion          continente        participaciones        pg        \n Length:80          Length:80          Min.   : 1.000   Min.   : 0.000  \n Class :character   Class :character   1st Qu.: 1.750   1st Qu.: 0.750  \n Mode  :character   Mode  :character   Median : 4.500   Median : 4.000  \n                                       Mean   : 6.112   Mean   : 9.375  \n                                       3rd Qu.: 9.000   3rd Qu.:12.000  \n                                       Max.   :22.000   Max.   :76.000  \n       pe              pp               gf            gc        \n Min.   : 0.00   Min.   : 1.000   Min.   :  0   Min.   :  2.00  \n 1st Qu.: 1.00   1st Qu.: 3.000   1st Qu.:  4   1st Qu.: 11.00  \n Median : 3.00   Median : 7.500   Median : 15   Median : 24.50  \n Mean   : 5.35   Mean   : 9.375   Mean   : 34   Mean   : 34.00  \n 3rd Qu.: 8.00   3rd Qu.:14.250   3rd Qu.: 43   3rd Qu.: 49.25  \n Max.   :22.00   Max.   :28.000   Max.   :237   Max.   :130.00  \n    titulos     \n Min.   :0.000  \n 1st Qu.:0.000  \n Median :0.000  \n Mean   :0.275  \n 3rd Qu.:0.000  \n Max.   :5.000  \n# Mostrar las filas 3 y 4, columnas 1 y 3\ndatos[3:4, c(1, 3)]# A tibble: 2 × 2\n  seleccion participaciones\n  <chr>               <dbl>\n1 Argentina              18\n2 Italia                 18\n# Mostrar las filas 3 y 4, columnas \"seleccion\" y \"participaciones\"\ndatos[3:4, c(\"seleccion\", \"participaciones\")]# A tibble: 2 × 2\n  seleccion participaciones\n  <chr>               <dbl>\n1 Argentina              18\n2 Italia                 18\ndatos$titulos [1] 5 4 3 4 2 1 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[39] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n[77] 0 0 0 0\nmax(datos$titulos)[1] 5"},{"path":"uso-de-archivos-de-datos.html","id":"manejo-de-datos","chapter":"6 Uso de archivos de datos","heading":"6.3 Manejo de datos","text":"","code":""},{"path":"uso-de-archivos-de-datos.html","id":"editar-o-crear-nuevas-variables","chapter":"6 Uso de archivos de datos","heading":"6.3.1 Editar o crear nuevas variables","text":"Es muy común tener que modificar una variable existente o añadir una nueva, la cual puede depender de algún cálculo realizado partir de otras columnas presentes en el dataset. Para cualquiera de estas actividades que implican modificar o mutar el dataset, emplearemos la función mutate(). Vamos calcular la cantitad total que cada selección ha jugado en los mundiales lo largo de toda la historia (pj), sumando la cantidad de partidos que ha ganado, empatado y perdido:¿Qué sucedió al correr esa instrucción?:Como primer argumento de la función proveemos el dataset con el que vamos operar, datos.Elegimos en segundo lugar un nombre para una nueva variable, pj, y la definimos como la suma de otras variables ya existentes.El resultado es el dataset original con esta modificación y lo guardamos con el mismo nombre. Si hubiésemos elegido otro nombre, generaríamos una copia del dataset con la modificación, mientras conservamos el original sin cambios.Al editar variables, podemos elegir entre sobrescribir o una columna existente, así como también entre sobrescribir o el conjunto de datos de partida. Para pensar… sin ejecutarlas, responder: ¿cuál es la diferencia entre las siguientes instrucciones?Otras situaciones requieren que en lugar de mutar de la misma forma toda una columna, los cambios dependan de alguna condición que los registros verifiquen o . Por ejemplo, agreguemos una nueva variable que indique si cada país es o campeón del mundo, en función de los valores disponibles en la variable titulos. Vamos crear una nueva columna que se llame campeon y tenga el valor \"campeón\" cuando titulos > 0 y \"campeón\" en caso contrario, ayudándonos con la función ifelse(), la cual nos permite establecer una evaluación lógica y dos cursos de acción, en base que esta resulte verdadera (TRUE) o falsa (FALSE).Inspeccionamos la nueva columna, recurriendo otra función del tidyverse, count(). Sólo 8 países han ganado el mundial alguna vez (¡y Argentina es uno de ellos!):La función anterior es muy útil para chequear los valores guardados en atributos de tipo texto. Usémosla para inspeccionar la variable continente. ¿Hay algo que nos llame la atención?Detectamos inconsistencias en la forma de registrar los nombres de los continentes: Europa aparece en inglés y en español, Asia aparece con mayúscula y con minúscula. Debemos homogeneizar la nomenclatura para poder hacer cualquier análisis válido. En este caso, en el cual la corrección implica sólo “recodificar” categorías, podemos usar la función recode() de forma muy sencilla. Aquellos registros con \"Europe\" en continente son reemplazados por \"Europa\", y lo mismo ocurre con \"asia\", que será reemplazado por \"Asia\". Los otros valores quedan como estaban:Ediciones que requieran evaluaciones lógicas más complejas pueden realizarse con la función case_when(), que para cada fila del dataset realiza una evaluación lógica. Si resulta TRUE, devuelve el valor mencionado al lado del ~. Si resulta FALSE, continúa evaluando la siguiente operación lógica.Dejamos la siguiente propuesta para seguir practicando: agregar nuevas columnas en las que se muestreCrear una nueva variable llamada puntos que indique cuál es el puntaje total obtenido por cada selección lo largo del tiempo, teniendo en cuenta que cada partido ganado aporta 3 puntos, cada partido empatado aporta 1 punto y cada partido perdido aporta 0 puntos.Crear una nueva variable llamada puntos que indique cuál es el puntaje total obtenido por cada selección lo largo del tiempo, teniendo en cuenta que cada partido ganado aporta 3 puntos, cada partido empatado aporta 1 punto y cada partido perdido aporta 0 puntos.Crear una nueva variable llamada dg, diferencia de goles, definida como la resta entre los goles favor y los goles en contra.Crear una nueva variable llamada dg, diferencia de goles, definida como la resta entre los goles favor y los goles en contra.Sugerencia: en mutate() podemos poner muchas modificaciones juntas, separándolas con coma.","code":"\ndatos <- mutate(datos, pj = pg + pe + pp)\n# Sentencia (a)\ndatos <- mutate(datos, pj = pg + pe + pp)\n\n# Sentencia (b)\ndatos_modif <- mutate(datos, pj = pg + pe + pp)\n\n# Sentencia (c)\ndatos <- mutate(datos, pg = pg + pe + pp)\ndatos <- mutate(datos, campeon = ifelse(titulos > 0, \"campeón\", \"no campeón\"))\ncount(datos, campeon)# A tibble: 2 × 2\n  campeon        n\n  <chr>      <int>\n1 campeón        8\n2 no campeón    72\ncount(datos, continente)# A tibble: 7 × 2\n  continente     n\n  <chr>      <int>\n1 América       20\n2 Asia           7\n3 Europa        19\n4 Europe        14\n5 Oceanía        2\n6 asia           5\n7 África        13\ndatos <- mutate(datos, continente = recode(continente, \"Europe\" = \"Europa\", \"asia\" = \"Asia\"))\ncount(datos, continente)# A tibble: 5 × 2\n  continente     n\n  <chr>      <int>\n1 América       20\n2 Asia          12\n3 Europa        33\n4 Oceanía        2\n5 África        13\ndatos <- mutate(\n    datos, \n    continente = case_when(\n        continente == \"Europe\" ~ \"Europa\",\n        continente == \"asia\" ~ \"Asia\",\n        TRUE ~ continente # opción por defecto\n        )\n    )"},{"path":"uso-de-archivos-de-datos.html","id":"renombrar-atributos","chapter":"6 Uso de archivos de datos","heading":"6.3.2 Renombrar atributos","text":"Para cambiar los nombres de una o más variables usamos la función rename(), listando los cambios con la estructura nombre_nuevo = nombre_viejo. Por ejemplo:","code":"\ndatos# A tibble: 80 × 13\n   seleccion    continente participaciones    pg    pe    pp    gf    gc titulos\n   <chr>        <chr>                <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 Brasil       América                 22    76    19    19   237   108       5\n 2 Alemania     Europa                  20    68    21    23   232   130       4\n 3 Argentina    América                 18    47    17    24   152   101       3\n 4 Italia       Europa                  18    45    21    17   128    77       4\n 5 Francia      Europa                  16    39    14    20   136    85       2\n 6 Inglaterra   Europa                  16    32    22    20   104    68       1\n 7 España       Europa                  16    31    17    19   108    75       1\n 8 Países Bajos Europa                  11    30    14    11    96    52       0\n 9 Uruguay      América                 14    25    13    21    89    76       2\n10 Bélgica      Europa                  14    21    10    20    69    74       0\n# ℹ 70 more rows\n# ℹ 4 more variables: pj <dbl>, campeon <chr>, puntos <dbl>, dg <dbl>\ndatos <- rename(datos, goles_favor = gf, goles_contra = gc)\ndatos# A tibble: 80 × 13\n   seleccion    continente participaciones    pg    pe    pp goles_favor\n   <chr>        <chr>                <dbl> <dbl> <dbl> <dbl>       <dbl>\n 1 Brasil       América                 22    76    19    19         237\n 2 Alemania     Europa                  20    68    21    23         232\n 3 Argentina    América                 18    47    17    24         152\n 4 Italia       Europa                  18    45    21    17         128\n 5 Francia      Europa                  16    39    14    20         136\n 6 Inglaterra   Europa                  16    32    22    20         104\n 7 España       Europa                  16    31    17    19         108\n 8 Países Bajos Europa                  11    30    14    11          96\n 9 Uruguay      América                 14    25    13    21          89\n10 Bélgica      Europa                  14    21    10    20          69\n# ℹ 70 more rows\n# ℹ 6 more variables: goles_contra <dbl>, titulos <dbl>, pj <dbl>,\n#   campeon <chr>, puntos <dbl>, dg <dbl>"},{"path":"uso-de-archivos-de-datos.html","id":"unir-o-separar-columnas","chapter":"6 Uso de archivos de datos","heading":"6.3.3 Unir o separar columnas","text":"En ocasiones puede ser necesario generar una nueva variable “pegando” o uniendo los datos presentes en otras. Imaginemos que tal vez necesitamos contar con una única variable textual que contenga tanto el nombre del país como el continente al que pertenece. Para esto recurrimos la función unite():La opción remove = FALSE hace que las columnas que se usaron para unir permanezcan en el dataset luego de este cambio. El comportamiento por defecto es eliminarlas. Si lo que nos interesa es separar en dos columnas información que esté concatenada en una sola, usamos la contrapartida, separate():Por defecto estas funciones utilizan como separador cualquier carácter alfanumérico que figure en ese campo, incluidos los espacios. El argumento sep se utiliza para indicar el separador adecuado cuando el establecido por defecto es adecuado. La separación se podría hacer en más de dos columnas, de ser necesario, cuando el separador elegido aparece más de una vez.","code":"\ndatos <- unite(datos, col = \"pais_continente\", seleccion, continente, sep = \" - \", remove = FALSE)\ndatos# A tibble: 80 × 14\n   pais_continente       seleccion  continente participaciones    pg    pe    pp\n   <chr>                 <chr>      <chr>                <dbl> <dbl> <dbl> <dbl>\n 1 Brasil - América      Brasil     América                 22    76    19    19\n 2 Alemania - Europa     Alemania   Europa                  20    68    21    23\n 3 Argentina - América   Argentina  América                 18    47    17    24\n 4 Italia - Europa       Italia     Europa                  18    45    21    17\n 5 Francia - Europa      Francia    Europa                  16    39    14    20\n 6 Inglaterra - Europa   Inglaterra Europa                  16    32    22    20\n 7 España - Europa       España     Europa                  16    31    17    19\n 8 Países Bajos - Europa Países Ba… Europa                  11    30    14    11\n 9 Uruguay - América     Uruguay    América                 14    25    13    21\n10 Bélgica - Europa      Bélgica    Europa                  14    21    10    20\n# ℹ 70 more rows\n# ℹ 7 more variables: goles_favor <dbl>, goles_contra <dbl>, titulos <dbl>,\n#   pj <dbl>, campeon <chr>, puntos <dbl>, dg <dbl>\nseparate(datos, col = pais_continente, into = c(\"seleccion\", \"continente\"), sep = \" - \")"},{"path":"uso-de-archivos-de-datos.html","id":"filtrar-y-ordenar-registros","chapter":"6 Uso de archivos de datos","heading":"6.3.4 Filtrar y ordenar registros","text":"Podemos quedarnos sólo con los registros que cumplan con ciertas condiciones utilizando la función filter():Para ordenar los registros según el orden creciente o decreciente en una columna, podemos usar la función arrange():Actividad propuesta: filtrar el conjunto de datos original para quedarse con los países que tengan una diferencia de goles positiva y guardar estos registros en un nuevo data.frame llamado datos_dg_positiva.","code":"\n# Una condición\ndatos_america <- filter(datos, continente == \"América\")\nnrow(datos_america)[1] 20\n# Dos condiciones\ndatos_campeones_america <- filter(datos, continente == \"América\", campeon == \"campeón\")\nnrow(datos_campeones_america)[1] 3\n# Alternativa equivalente: filter(datos, continente == \"América\" & campeon == \"si\")\n\n# Al menos una de las primeras condiciones (\"o\") y la segunda\ndatos_filtro <- filter(datos, continente == \"América\" | campeon == \"campeón\", participaciones > 10)\nnrow(datos_filtro)[1] 10\n# Orden creciente:\narrange(datos, puntos)\n\n# Orden decreciente:\narrange(datos, desc(puntos))\n\n# Ordenar según más de una variable:\narrange(datos, america, desc(titulos))"},{"path":"uso-de-archivos-de-datos.html","id":"seleccionar-y-reordenar-columnas","chapter":"6 Uso de archivos de datos","heading":"6.3.5 Seleccionar y reordenar columnas","text":"Podemos elegir quedarnos sólo con algunas columnas del dataset con la función select():","code":"\n# Elegir cuáles quedan\nselect(datos, seleccion, participaciones)\n\n# Elegir cuáles se van\nselect(datos, -goles_favor, -goles_contra)\n\n# Reordenar las columnas - everything() hace referencia al resto\nselect(datos, seleccion, campeon, puntos, everything())"},{"path":"uso-de-archivos-de-datos.html","id":"tuberías-o-pipes","chapter":"6 Uso de archivos de datos","heading":"6.4 Tuberías o pipes","text":"Hasta ahora, esto es parte de lo que hicimos con los datos de los mundiales:En todas las instrucciones anteriores se repite la misma estructura: cada función toma al data.frame, lo modifica y lo guarda, y esto se convierte en el input para la próxima función. Se puede escribir todo junto de manera más cómoda usando una tubería o pipeline. En una tubería el resultado de cada línea es el input para la línea siguiente (por eso eliminamos en cada función el primer argumento, el nombre del dataset). El símbolo %>%, conocido como pipe, es la unión entre las partes de la tubería27. El atajo para escribir este operador de forma rápida con el teclado es CTRL + Shift + M. El data.frame devuelto por la última función de la tubería es guardado en el objeto cuyo nombre se indica al comienzo.","code":"\n# Lectura del archivo\ndatos <- read_delim(\"mundiales.txt\")\n\n# Calcular la cantidad total de partidos jugados en mundiales\ndatos <- mutate(datos, pj = pg + pe + pp)\n\n# Indicar si cada país es o no campeón del mundo\ndatos <- mutate(datos, campeon = ifelse(titulos > 0, \"campeón\", \"no campeón\"))\n\n# Corregir los nombres de los continentes\ndatos <- mutate(datos, continente = recode(continente, \"Europe\" = \"Europa\", \"asia\" = \"Asia\"))\n\n# Calcular los puntos ganados por cada país y la diferencia de goles\ndatos <- mutate(datos, puntos = 3 * pg + pe, dg = gf - gc)\n\n# Cambiar los nombres de algunas columnas\ndatos <- rename(datos, goles_favor = gf, goles_contra = gc)\n\n# Crear una nueva variable con el nombre del país y del continente\ndatos <- unite(datos, col = \"pais_continente\", seleccion, continente, sep = \" - \", remove = FALSE)\ndatos <- \n    read_delim(\"mundiales.txt\") %>% \n    mutate(\n        pj = pg + pe + pp,\n        campeon = ifelse(titulos > 0, \"campeón\", \"no campeón\"),\n        continente = recode(continente, \"Europe\" = \"Europa\", \"asia\" = \"Asia\"),\n        puntos = 3 * pg + pe, \n        dg = gf - gc\n    ) %>% \n    rename(goles_favor = gf, goles_contra = gc) %>% \n    unite(col = \"pais_continente\", seleccion, continente, sep = \" - \", remove = FALSE)"},{"path":"uso-de-archivos-de-datos.html","id":"escritura-de-conjuntos-de-datos-en-archivos","chapter":"6 Uso de archivos de datos","heading":"6.5 Escritura de conjuntos de datos en archivos","text":"Todas las modificaciones que hicimos del data.frame con los ejemplos anteriores modificaron el archivo original mundiales.txt que reside en el disco rígido de nuestra computadora, sino que sirvieron para modificar al objeto datos que reside en la memoria temporal durante la ejecución de la sesión de R. Si al terminar con el procesamiento de los datos queremos generar un nuevo archivo permanente con la nueva versión del dataset, tenemos que hacer algo específico para eso. R provee una gran variedad de funciones para guardar todo el contenido de un objeto de tipo data.frame en un archivo, como se muestra en los ejemplos que siguen, en los que plasmamos la versión actual del data.frame en un nuevo archivo llamado mundiales_procesado. En cada ocasión, generamos un tipo de archivo distinto:","code":"\n# Guardarlo en un archivo de texto separado por tabulaciones\nwrite_delim(datos, file = \"mundiales_procesados.txt\", delim = \"\\t\")\n\n# Guardarlo en un archivo de texto separado por comas\nwrite_csv(datos, file = \"mundiales_procesados.csv\")\n\n# Guardarlo en un archivo de Excel\n# install.packages(\"writexl\")\nlibrary(writexl)\nwrite_xlsx(datos, \"mundiales_procesado.xlsx\")"},{"path":"uso-de-archivos-de-datos.html","id":"resumen-de-datos","chapter":"6 Uso de archivos de datos","heading":"6.6 Resumen de datos","text":"Una vez que los datos han sido organizados y limpiados según corresponda, el siguiente paso de cualquier análisis es hacer un breve análisis exploratorio. En esta sección veremos cómo calcular algunas estadísticas y realizar tablas de distribuciones de frecuencias, ya sea para variables categóricas o cuantitativas.","code":""},{"path":"uso-de-archivos-de-datos.html","id":"cálculo-de-estadísticas","chapter":"6 Uso de archivos de datos","heading":"6.6.1 Cálculo de estadísticas","text":"Imaginemos ahora que queremos saber cuántas veces en promedio han participado estas 80 selecciones del mundial. Esto se puede lograr de manera muy sencilla con mean():Otra alternativa es utilizar la función summarise() del tidyverse:Si bien esta última forma parece ser más compleja, tiene algunas ventajas:Devuelve el resultado como un objeto de tipo data.frame, que puede ser usado como “materia prima” en otros análisis.Permite resumir muchas variables la vez, en general o por grupos, aplicando uno o varios cálculos de resumen.Por ejemplo, si queremos obtener el puntaje promedio obtenido por las selecciones de cada continente utilizamos summarise() en conjunto con group_by(), relacionando ambas funciones en una tubería:Podemos seguir alargando la tubería, para pedir que el resultado anterior se presente de forma descendente, de modo que veamos rápidamente cuál es el continente con mayor promedio de puntos obtenidos:Dentro de summarise() podemos pedir más de un resumen:","code":"\nmean(datos$participaciones)[1] 6.1125\nsummarise(datos, promedio = mean(participaciones))# A tibble: 1 × 1\n  promedio\n     <dbl>\n1     6.11\ndatos %>% \n    group_by(continente) %>% \n    summarise(prom_puntos = mean(puntos))# A tibble: 5 × 2\n  continente prom_puntos\n  <chr>            <dbl>\n1 América          38.2 \n2 Asia              7.67\n3 Europa           50   \n4 Oceanía           9.5 \n5 África           11.7 \ndatos %>% \n    group_by(continente) %>% \n    summarise(prom_puntos = mean(puntos)) %>% \n    arrange(desc(prom_puntos))# A tibble: 5 × 2\n  continente prom_puntos\n  <chr>            <dbl>\n1 Europa           50   \n2 América          38.2 \n3 África           11.7 \n4 Oceanía           9.5 \n5 Asia              7.67\ndatos %>% \n    group_by(continente) %>% \n    summarise(\n        prom_puntos = mean(puntos),      # promedio de los puntos de los países\n        min_puntos = min(puntos),        # mínimo puntaje en ese continente\n        max_puntos = max(puntos),        # máximo puntaje en ese continente\n        total_titulos = sum(titulos),    # mundiales ganados por países del continente\n        total_pj = sum(pj),              # cantidad total de partidos jugados\n        prom_dg = mean(dg),              # promedio de la diferencia de goles\n        n = n()                          # cantidad de registros en cada continente\n    ) # A tibble: 5 × 8\n  continente prom_puntos min_puntos max_puntos total_titulos total_pj prom_dg\n  <chr>            <dbl>      <dbl>      <dbl>         <dbl>    <dbl>   <dbl>\n1 América          38.2           0        247            10      534   -0.75\n2 Asia              7.67          0         31             0      126  -12.4 \n3 Europa           50             1        225            12     1080    8.79\n4 Oceanía           9.5           3         16             0       26  -15   \n5 África           11.7           0         23             0      162   -7.38\n# ℹ 1 more variable: n <int>"},{"path":"uso-de-archivos-de-datos.html","id":"distribuciones-de-frecuencias-para-variables-categóricas","chapter":"6 Uso de archivos de datos","heading":"6.6.2 Distribuciones de frecuencias para variables categóricas","text":"Cuando en los archivos de datos existen campos de tipo carácter, que representan variables categóricas, es común resumirlos creando tablas de frecuencias. Ya vimos que la función count() nos permite obtener la frecuencia absoluta (bajo el nombre de n) de cada categoría:Sin embargo, utilizaremos un paquete que es muy útil para generar tablas de frecuencias, llamado janitor. forma parte del tidyverse pero está creado con el mismo diseño. Lo instalamos y cargamos:Ahora usamos la función tabyl del paquete janitor para crear una tabla de frecuencias:Lo anterior es un nuevo data.frame con tres variables, el continente, la frecuencia absoluta n y la frecuencia relativa, que si bien son proporciones que varían entre 0 y 1, el software las llama percent. En este caso, con pocas categorías, podemos apreciar rápidamente cuál es el continente con mayor y menor cantidad de países que participaron de mundiales, pero si queremos resaltar esta información podemos hacer algunos filtrados. continuación, filtramos el data.frame frecuencias para retener aquellas filas donde el valor de n sea igual su mínimo o su máximo:Notemos que los objetos minimo y maximo son nuevos data.frames, con tan sólo una observación. Podríamos usarlos para emitir algún mensaje con los hallazgos. Por supuesto que si hubiesen empates en los valores máximos o mínimos tendríamos que pensar otra forma de comunicar el mensaje, pero con todos los conocimientos que tenemos de programación esa tarea es sencilla de resolver:Un aspecto útil de la función tabyl() es que puede ser acompañada por funciones que comienzan con el nombre adorn_ y sirven para agregar algún tipo de “adorno” la tabla, por ejemplo, los totales:Podríamos mejorar levemente la tabla de frecuencias cambiando los nombres de sus columnas, con la función rename(). Para poder usar nombres que contengan espacios, tenemos que encerrarlos en comillas invertidas (esto es poco práctico la hora de escribir código, sólo sirve para mejorar la apariencia del resultado):Si escribimos todos los pasos que hicimos en una sola tubería, nos quedaría así:Otro tipo de escenario se presenta cuando queremos analizar las frecuencias de dos variables categóricas. La función count() también permite obtener conteos asociados cada combinación posible de las categorías de dos o más variables. El resultado, como siempre, es un data.frame con una columna para cada una de las variables involucradas y otra para las frecuencias absolutas. Así, podemos ver que de todos los países americanos que jugaron algún mundial, 17 nunca fueron campeones y 3 sí.Esta forma de presentar los resultados es útil cuando deseamos identificar combinaciones de categorías con los valores mínimos y máximos. Sin embargo, frecuencias como las anteriores suelen ser presentadas en tablas de contingencia o tablas de doble entrada, donde las filas se corresponden las categorías de una variable y las columnas, las de la otra. La funcióntabyl() presenta los conteos de esa forma:Podemos destacar cuál es el continente con mayor cantidad de campeones filtrando al registro con máximo valor en la columna campeón:La función adorn_totals() nos permite de manera muy sencilla agregar totales marginales, tanto para filas como columnas:Además, podemos pedir frecuencias relativas en lugar de absolutas, ya sea de la distribución conjunta de las dos variables (denominator = ), condicionada la fila (denominator = row) o la columna (denominator = col).Distribución conjunta de las variables: podemos ver, por ejemplo, que el 3.8% de todos los países participantes son de América y han salido campeón alguna vez.\n\ndatos %>% \n  tabyl(continente, campeon) %>% \n  adorn_totals(= c(\"row\", \"col\")) %>% \n  adorn_percentages(denominator = \"\") %>%  # cálculo de proporciones\n  adorn_pct_formatting(digits = 1)            # mostrarlas como porcentaje (opcional)\n continente campeón campeón  Total\n     África    0.0%      16.2%  16.2%\n    América    3.8%      21.2%  25.0%\n       Asia    0.0%      15.0%  15.0%\n     Europa    6.2%      35.0%  41.2%\n    Oceanía    0.0%       2.5%   2.5%\n      Total   10.0%      90.0% 100.0%Distribución conjunta de las variables: podemos ver, por ejemplo, que el 3.8% de todos los países participantes son de América y han salido campeón alguna vez.Distribución condicional de “campeon” dado “continente”: los porcentajes suman 1 en cada fila. De todos los países americanos que alguna vez participaron de un mundial, el 15% logró ser campeón y el 85%, .\n\ndatos %>% \n  tabyl(continente, campeon) %>% \n  adorn_totals(= c(\"row\", \"col\")) %>% \n  adorn_percentages(denominator = \"row\") %>%\n  adorn_pct_formatting(digits = 1)\n continente campeón campeón  Total\n     África    0.0%     100.0% 100.0%\n    América   15.0%      85.0% 100.0%\n       Asia    0.0%     100.0% 100.0%\n     Europa   15.2%      84.8% 100.0%\n    Oceanía    0.0%     100.0% 100.0%\n      Total   10.0%      90.0% 100.0%Distribución condicional de “campeon” dado “continente”: los porcentajes suman 1 en cada fila. De todos los países americanos que alguna vez participaron de un mundial, el 15% logró ser campeón y el 85%, .Distribución condicional de “continente” dado “campeón”: los porcentajes suman 1 en cada columna. De todos los países que salieron campeones, el 62.5% son europeos y el 37.5% restante, americanos.\n\ndatos %>% \n  tabyl(continente, campeon) %>% \n  adorn_totals(= \"row\") %>% \n  adorn_percentages(denominator = \"col\") %>%\n  adorn_pct_formatting(digits = 1)\n continente campeón campeón\n     África    0.0%      18.1%\n    América   37.5%      23.6%\n       Asia    0.0%      16.7%\n     Europa   62.5%      38.9%\n    Oceanía    0.0%       2.8%\n      Total  100.0%     100.0%Distribución condicional de “continente” dado “campeón”: los porcentajes suman 1 en cada columna. De todos los países que salieron campeones, el 62.5% son europeos y el 37.5% restante, americanos.También podemos mostrar frecuencias absolutas y relativas al mismo tiempo, así como editar los títulos. Ejemplificamos mostrando nuevamente la distribución conjunta:","code":"\ncount(datos, continente)# A tibble: 5 × 2\n  continente     n\n  <chr>      <int>\n1 América       20\n2 Asia          12\n3 Europa        33\n4 Oceanía        2\n5 África        13\n# install.packages(\"janitor\")\nlibrary(janitor)\nfrecuencias <- tabyl(datos, continente)\nfrecuencias continente  n percent\n    América 20  0.2500\n       Asia 12  0.1500\n     Europa 33  0.4125\n    Oceanía  2  0.0250\n     África 13  0.1625\nminimo <- filter(frecuencias, n == min(n))\nminimo continente n percent\n    Oceanía 2   0.025\nmaximo <- filter(frecuencias, n == max(n))\nmaximo continente  n percent\n     Europa 33  0.4125\ncat(\"El continente con la mayor cantidad de países que han participado de mundiales es\", \n        maximo$continente, \"con\", maximo$n, \"selecciones, mientras que el de menor participación es\", \n        minimo$continente, \"con\", minimo$n, \"selecciones.\")El continente con la mayor cantidad de países que han participado de mundiales es Europa con 33 selecciones, mientras que el de menor participación es Oceanía con 2 selecciones.\nfrecuencias <- \n    frecuencias %>% \n    adorn_totals()\nfrecuencias continente  n percent\n    América 20  0.2500\n       Asia 12  0.1500\n     Europa 33  0.4125\n    Oceanía  2  0.0250\n     África 13  0.1625\n      Total 80  1.0000\nfrecuencias <- \n    frecuencias %>% \n    rename(Continente = continente, `Frec. Absoluta` = n, `Frec. Relativa` = percent)\nfrecuencias Continente Frec. Absoluta Frec. Relativa\n    América             20         0.2500\n       Asia             12         0.1500\n     Europa             33         0.4125\n    Oceanía              2         0.0250\n     África             13         0.1625\n      Total             80         1.0000\nfrecuencias <- \n    datos %>% \n    tabyl(continente) %>% \n    adorn_totals() %>% \n    rename(Continente = continente, `Frec. Absoluta` = n, `Frec. Relativa` = percent)\nfrecuencias Continente Frec. Absoluta Frec. Relativa\n    América             20         0.2500\n       Asia             12         0.1500\n     Europa             33         0.4125\n    Oceanía              2         0.0250\n     África             13         0.1625\n      Total             80         1.0000\ncount(datos, continente, campeon, sort = TRUE)# A tibble: 7 × 3\n  continente campeon        n\n  <chr>      <chr>      <int>\n1 Europa     no campeón    28\n2 América    no campeón    17\n3 África     no campeón    13\n4 Asia       no campeón    12\n5 Europa     campeón        5\n6 América    campeón        3\n7 Oceanía    no campeón     2\ntabla_cont_campeon <- tabyl(datos, continente, campeon)\ntabla_cont_campeon continente campeón no campeón\n     África       0         13\n    América       3         17\n       Asia       0         12\n     Europa       5         28\n    Oceanía       0          2\nfilter(tabla_cont_campeon, campeón == max(campeón)) continente campeón no campeón\n     Europa       5         28\ndatos %>% \n  tabyl(continente, campeon) %>% \n  adorn_totals(where = c(\"row\", \"col\")) continente campeón no campeón Total\n     África       0         13    13\n    América       3         17    20\n       Asia       0         12    12\n     Europa       5         28    33\n    Oceanía       0          2     2\n      Total       8         72    80\ndatos %>% \n  tabyl(continente, campeon) %>% \n  adorn_totals(where = c(\"row\", \"col\")) %>% \n  adorn_percentages(denominator = \"all\") %>%  # cálculo de proporciones\n  adorn_pct_formatting(digits = 1)            # mostrarlas como porcentaje (opcional) continente campeón no campeón  Total\n     África    0.0%      16.2%  16.2%\n    América    3.8%      21.2%  25.0%\n       Asia    0.0%      15.0%  15.0%\n     Europa    6.2%      35.0%  41.2%\n    Oceanía    0.0%       2.5%   2.5%\n      Total   10.0%      90.0% 100.0%\ndatos %>% \n  tabyl(continente, campeon) %>% \n  adorn_totals(where = c(\"row\", \"col\")) %>% \n  adorn_percentages(denominator = \"row\") %>%\n  adorn_pct_formatting(digits = 1) continente campeón no campeón  Total\n     África    0.0%     100.0% 100.0%\n    América   15.0%      85.0% 100.0%\n       Asia    0.0%     100.0% 100.0%\n     Europa   15.2%      84.8% 100.0%\n    Oceanía    0.0%     100.0% 100.0%\n      Total   10.0%      90.0% 100.0%\ndatos %>% \n  tabyl(continente, campeon) %>% \n  adorn_totals(where = \"row\") %>% \n  adorn_percentages(denominator = \"col\") %>%\n  adorn_pct_formatting(digits = 1) continente campeón no campeón\n     África    0.0%      18.1%\n    América   37.5%      23.6%\n       Asia    0.0%      16.7%\n     Europa   62.5%      38.9%\n    Oceanía    0.0%       2.8%\n      Total  100.0%     100.0%\ndatos %>% \n  tabyl(continente, campeon) %>% \n  adorn_totals(where = c(\"row\", \"col\")) %>% \n  adorn_percentages(denominator = \"all\") %>% \n  adorn_pct_formatting(digits = 1) %>% \n  adorn_ns() %>% \n  adorn_title(placement = \"top\", \"Continente\", \"Campeones del mundo\")            Campeones del mundo                       \n Continente             campeón no campeón       Total\n     África            0.0% (0) 16.2% (13)  16.2% (13)\n    América            3.8% (3) 21.2% (17)  25.0% (20)\n       Asia            0.0% (0) 15.0% (12)  15.0% (12)\n     Europa            6.2% (5) 35.0% (28)  41.2% (33)\n    Oceanía            0.0% (0)  2.5%  (2)   2.5%  (2)\n      Total           10.0% (8) 90.0% (72) 100.0% (80)"},{"path":"uso-de-archivos-de-datos.html","id":"distribuciones-de-frecuencias-para-variables-cuantitativas","chapter":"6 Uso de archivos de datos","heading":"6.6.3 Distribuciones de frecuencias para variables cuantitativas","text":"Cuando se exploran datos de variables cuantitativas, es común realizar tablas de frecuencias agrupando los valores observados en intervalos. Usando la función cut() dentro de mutate() podemos especificar los puntos de corte y generar una nueva columna que informa qué intervalo pertenece cada observación. El argumento right en cut() sirve para establecer si queremos que los intervalos sean cerrados por derecha (TRUE) o por izquierda (FALSE):Ahora podemos emplear la nueva columna intervalos para realizar tablas de frecuencias como vimos antes:Aunque lo vemos simple vista, podemos programar la búsqueda del intervalo de valores con la mayor frecuencia y emitir un mensaje:También podemos agregar columnas de frecuencias acumuladas, como suele ser común cuando se resumen variables cuantitativas o cualitativas ordinales. Para esto usamos la función cumsum(), que calcula una suma acumulada, es decir, cada fila tiene la suma de los valores encontrados desde la primera hasta ella inclusive. Además, aprovechamos elegir nombres y cambiar los anteriores para que se vean mejor la impresión de la tabla:","code":"\ndatos <- mutate(datos, intervalos = cut(goles_favor, breaks = seq(0, 250, 50), right = FALSE))\n\nselect(datos, seleccion, goles_favor, intervalos)# A tibble: 80 × 3\n   seleccion    goles_favor intervalos\n   <chr>              <dbl> <fct>     \n 1 Brasil               237 [200,250) \n 2 Alemania             232 [200,250) \n 3 Argentina            152 [150,200) \n 4 Italia               128 [100,150) \n 5 Francia              136 [100,150) \n 6 Inglaterra           104 [100,150) \n 7 España               108 [100,150) \n 8 Países Bajos          96 [50,100)  \n 9 Uruguay               89 [50,100)  \n10 Bélgica               69 [50,100)  \n# ℹ 70 more rows\ntabla_gf <- tabyl(datos, intervalos)\ntabla_gf intervalos  n percent\n     [0,50) 63  0.7875\n   [50,100) 10  0.1250\n  [100,150)  4  0.0500\n  [150,200)  1  0.0125\n  [200,250)  2  0.0250\nmaximo <- filter(tabla_gf, n == max(n))\nmaximo intervalos  n percent\n     [0,50) 63  0.7875\ncat(\"El intervalo de cantidad de goles a favor con la mayor cantidad de observaciones es\",\n    as.character(maximo$intervalos), \"con\", maximo$n, \"países.\")El intervalo de cantidad de goles a favor con la mayor cantidad de observaciones es [0,50) con 63 países.\ntabla_gf <- \n    tabla_gf %>% \n    mutate(\n        `Frec. Abs. Acumulada` = cumsum(n),\n        `Frec. Rel. Acumulada` = cumsum(percent)\n    ) %>% \n    rename(\n        `Goles a favor` = intervalos,\n        `Frec. Absoluta` = n, \n        `Frec. Relativa` = percent\n    )\ntabla_gf Goles a favor Frec. Absoluta Frec. Relativa Frec. Abs. Acumulada\n        [0,50)             63         0.7875                   63\n      [50,100)             10         0.1250                   73\n     [100,150)              4         0.0500                   77\n     [150,200)              1         0.0125                   78\n     [200,250)              2         0.0250                   80\n Frec. Rel. Acumulada\n               0.7875\n               0.9125\n               0.9625\n               0.9750\n               1.0000"},{"path":"uso-de-archivos-de-datos.html","id":"escritura-de-resultados-en-archivos","chapter":"6 Uso de archivos de datos","heading":"6.7 Escritura de resultados en archivos","text":"Anteriormente hemos mencionado que cuando trabajamos con archivos podemos realizar acciones tanto de lectura como de escritura y hasta el momento hemos visto cómo leer registros de un archivo y guardar los datos de un data.frame en uno nuevo. En este apartado presentamos cómo crear un archivo de texto desde R, de manera que pueda utilizarse para escribir y guardar allí los resultados obtenidos en tareas básicas de exploración.Vamos volcar los hallazgos sobre los mundiales en un archivo de texto llamado salida.txt. En R, la función sink() permite escribir en un archivo de texto todos los resultados que habitualmente vemos en la consola. Sus argumentos son:file: nombre del archivo, si existe será creado. Se guarda en el directorio de trabajo actual, menos que indiquemos aquí la ruta completa hacia otra carpeta.append: si el archivo ya existía, por default lo sobreescribe (borra lo anterior), menos que indiquemos append = TRUE para que agregue nuevas líneas sin borrar las anteriores.split: mientras la conexión al archivo está activa, por defecto los resultados que enviamos al mismo se muestran en la consola de R, menos que indiquemos split = TRUE, en cuyo caso sucederán ambas cosas: los resultados serán escritos en el archivo y se verán en la consola.Cuando se desea cerrar la conexión al archivo, se debe correr sink() sin ningún argumento. Todo lo que imprimamos con cat() entre ambos llamados sink() se guardará en el archivo. La última parte del código en el problema anterior debe ser:El archivo salida.txt queda así:","code":"\n# Crear conexión al archivo de salida y poner un encabezado\nsink(file = \"salida.txt\", append = TRUE, split = TRUE)\ncat(\"==========================================\\n\")\ncat(\"            ARCHIVO DE RESULTADOS         \\n\")\ncat(\"==========================================\\n\\n\")\n\ncat(\"==================== ESTADÍSTICAS ====================\\n\\n\")\n\ndatos %>% \n    group_by(continente) %>% \n    summarise(\n        `Países participantes` = n(),\n        `Promedio de puntos` = mean(puntos),\n        `Títulos obtenidos` = sum(titulos),\n        `Total de partidos jugados` = sum(pj),\n        `Promedio de diferencia de goles` = mean(dg)\n    )\n\ncat(\"\\n==================== DISTRIBUCIÓN DE SELECCIONES SEGÚN CONTINENTE ====================\\n\\n\")\n\n# Tabla básica\nfrecuencias <- tabyl(datos, continente)\n\n# Detectar máximo y mínimo\nmaximo <- filter(frecuencias, n == max(n))\nminimo <- filter(frecuencias, n == min(n))\n\n# Completar la tabla con totales y cambiar nombres\nfrecuencias <- \n  frecuencias %>% \n  adorn_totals() %>% \n  rename(Continente = continente, `Frec. Absoluta` = n, `Frec. Relativa` = percent)\nfrecuencias\n\n# Emitir mensaje\ncat(\"\\nEl continente con la mayor cantidad de países que han participado de mundiales es\", \n    maximo$continente, \"con\", maximo$n, \"selecciones, mientras que el de menor participación es\", \n    minimo$continente, \"con\", minimo$n, \"selecciones.\\n\")\n\ncat(\"\\n==================== DISTRIBUCIÓN CONJUNTA DE CONTINENTES Y CAMPEONES ====================\\n\\n\")\n\ndatos %>% \n    tabyl(continente, campeon) %>% \n    adorn_totals(where = c(\"row\", \"col\")) %>% \n    adorn_percentages(denominator = \"all\") %>% \n    adorn_pct_formatting(digits = 1) %>% \n    adorn_ns() %>% \n    adorn_title(placement = \"top\", \"Continente\", \"Campeones del mundo\")\n\ncat(\"\\n==================== DISTRIBUCIÓN CONDICIONAL DE CAMPEONES EN CADA CONTINENTE ====================\\n\\n\")\n\ndatos %>% \n    tabyl(continente, campeon) %>% \n    adorn_totals(where = c(\"row\", \"col\")) %>% \n    adorn_percentages(denominator = \"row\") %>%\n    adorn_pct_formatting(digits = 1) %>% \n    adorn_ns() %>% \n    adorn_title(placement = \"top\", \"Continente\", \"Campeones del mundo\")\n\ncat(\"\\n==================== DISTRIBUCIÓN CONDICIONAL DE CONTINENTES DADO CAMPEONES ====================\\n\\n\")\n\ndatos %>% \n    tabyl(continente, campeon) %>% \n    adorn_totals(where = \"row\") %>% \n    adorn_percentages(denominator = \"col\") %>%\n    adorn_pct_formatting(digits = 1) %>% \n    adorn_ns() %>% \n    adorn_title(placement = \"top\", \"Continente\", \"Campeones del mundo\")\n\ncat(\"\\n==================== DISTRIBUCIÓN CONDICIONAL DE CONTINENTES DADO CAMPEONES ====================\\n\\n\")\n\n# Crear intervalos y tabla\ndatos <- mutate(datos, intervalos = cut(goles_favor, breaks = seq(0, 250, 50), right = FALSE))\ntabla_gf <- tabyl(datos, intervalos)\n\n# Detectar el inervalo con la mayor frecuencia\nmaximo <- filter(tabla_gf, n == max(n))\n\n# Agregar columnas acumuladas, mejorar la apariencia y calcular totales\ntabla_gf %>% \n    mutate(\n        `Frec. Abs. Acumulada` = cumsum(n),\n        `Frec. Rel. Acumulada` = cumsum(percent)\n    ) %>% \n    rename(\n        `Goles a favor` = intervalos,\n        `Frec. Absoluta` = n, \n        `Frec. Relativa` = percent\n    ) %>% \n    # Agregar totales sólo para Frec Absoluta y Frec Rel (sí o sí hay que escribir todos los argumentos de la función) \n    adorn_totals(where = \"row\", fill = \"-\", na.rm = TRUE, name = \"Total\", `Frec. Absoluta`, `Frec. Relativa`)\n\n# Emitir mensaje\ncat(\"\\nEl intervalo de cantidad de goles a favor con la mayor cantidad de observaciones es\", \n    as.character(maximo$intervalos), \"con\", maximo$n, \"países.\\n\")\n\n# Cerrar conexión al archivo\nsink()==========================================\n            ARCHIVO DE RESULTADOS         \n==========================================\n\n==================== ESTADÍSTICAS ====================\n\n# A tibble: 5 × 6\n  continente `Países participantes` `Promedio de puntos` `Títulos obtenidos` `Total de partidos jugados` Promedio de diferencia de gol…¹\n  <chr>                       <int>                <dbl>               <dbl>                       <dbl>                           <dbl>\n1 América                        20                38.2                   10                         534                           -0.75\n2 Asia                           12                 7.67                   0                         126                          -12.4 \n3 Europa                         33                50                     12                        1080                            8.79\n4 Oceanía                         2                 9.5                    0                          26                          -15   \n5 África                         13                11.7                    0                         162                           -7.38\n# ℹ abbreviated name: ¹​`Promedio de diferencia de goles`\n\n==================== DISTRIBUCIÓN DE SELECCIONES SEGÚN CONTINENTE ====================\n\n Continente Frec. Absoluta Frec. Relativa\n    América             20         0.2500\n       Asia             12         0.1500\n     Europa             33         0.4125\n    Oceanía              2         0.0250\n     África             13         0.1625\n      Total             80         1.0000\n\nEl continente con la mayor cantidad de países que han participado de mundiales es Europa con 33 selecciones, mientras que el de menor participación es Oceanía con 2 selecciones.\n\n==================== DISTRIBUCIÓN CONJUNTA DE CONTINENTES Y CAMPEONES ====================\n\n            Campeones del mundo                       \n Continente             campeón no campeón       Total\n     África            0.0% (0) 16.2% (13)  16.2% (13)\n    América            3.8% (3) 21.2% (17)  25.0% (20)\n       Asia            0.0% (0) 15.0% (12)  15.0% (12)\n     Europa            6.2% (5) 35.0% (28)  41.2% (33)\n    Oceanía            0.0% (0)  2.5%  (2)   2.5%  (2)\n      Total           10.0% (8) 90.0% (72) 100.0% (80)\n\n==================== DISTRIBUCIÓN CONDICIONAL DE CAMPEONES EN CADA CONTINENTE ====================\n\n            Campeones del mundo                        \n Continente             campeón  no campeón       Total\n     África            0.0% (0) 100.0% (13) 100.0% (13)\n    América           15.0% (3)  85.0% (17) 100.0% (20)\n       Asia            0.0% (0) 100.0% (12) 100.0% (12)\n     Europa           15.2% (5)  84.8% (28) 100.0% (33)\n    Oceanía            0.0% (0) 100.0%  (2) 100.0%  (2)\n      Total           10.0% (8)  90.0% (72) 100.0% (80)\n\n==================== DISTRIBUCIÓN CONDICIONAL DE CONTINENTES DADO CAMPEONES ====================\n\n            Campeones del mundo            \n Continente             campeón  no campeón\n     África            0.0% (0)  18.1% (13)\n    América           37.5% (3)  23.6% (17)\n       Asia            0.0% (0)  16.7% (12)\n     Europa           62.5% (5)  38.9% (28)\n    Oceanía            0.0% (0)   2.8%  (2)\n      Total          100.0% (8) 100.0% (72)\n\n==================== DISTRIBUCIÓN CONDICIONAL DE CONTINENTES DADO CAMPEONES ====================\n\n Goles a favor Frec. Absoluta Frec. Relativa Frec. Abs. Acumulada Frec. Rel. Acumulada\n        [0,50)             63         0.7875                   63               0.7875\n      [50,100)             10         0.1250                   73               0.9125\n     [100,150)              4         0.0500                   77               0.9625\n     [150,200)              1         0.0125                   78                0.975\n     [200,250)              2         0.0250                   80                    1\n         Total             80         1.0000                    -                    -\n\nEl intervalo de cantidad de goles a favor con la mayor cantidad de observaciones es [0,50) con 63 países."},{"path":"uso-de-archivos-de-datos.html","id":"lectura-opcional","chapter":"6 Uso de archivos de datos","heading":"6.8 Lectura opcional","text":"","code":""},{"path":"uso-de-archivos-de-datos.html","id":"otros-ejemplos-para-obtener-resúmenes","chapter":"6 Uso de archivos de datos","heading":"6.8.1 Otros ejemplos para obtener resúmenes","text":"Cuando aplicamos el mismo tipo de resumen varias variables (en este caso, la media), podemos usar across:Podemos aplicar el mismo tipo de resumen para todas las variables que tengan alguna característica en particular, por ejemplo, ser numéricas:","code":"\ndatos %>% \n    group_by(continente) %>% \n    summarise(across(c(goles_favor, goles_contra), mean))# A tibble: 5 × 3\n  continente goles_favor goles_contra\n  <chr>            <dbl>        <dbl>\n1 América          37.9          38.6\n2 Asia              8.67         21.1\n3 Europa           50.9          42.1\n4 Oceanía          10.5          25.5\n5 África           12.1          19.5\ndatos %>% \n    group_by(continente) %>% \n    summarise(across(where(is.numeric), mean))"},{"path":"uso-de-archivos-de-datos.html","id":"tablas-de-frecuencia-con-r-base","chapter":"6 Uso de archivos de datos","heading":"6.8.2 Tablas de frecuencia con R Base","text":"Utilizar el paquete janitor es la única forma de inspeccionar frecuencias. Se puede hacer de forma sencilla con funciones incorporadas en R Base, aunque la forma de presentar los resultados es menos vistosa:","code":"\n# Frecuencias absolutas\ntabla1 <- table(datos$continente)\ntabla1\n África América    Asia  Europa Oceanía \n     13      20      12      33       2 \n# Frencuencias relativas\nprop.table(tabla1)\n África América    Asia  Europa Oceanía \n 0.1625  0.2500  0.1500  0.4125  0.0250 \n# Tabla de contingencia para dos variables\ntabla2 <- table(datos$continente, datos$campeon)\ntabla2         \n          campeón no campeón\n  África        0         13\n  América       3         17\n  Asia          0         12\n  Europa        5         28\n  Oceanía       0          2\n# Distribución conjunta\nprop.table(tabla2)         \n          campeón no campeón\n  África   0.0000     0.1625\n  América  0.0375     0.2125\n  Asia     0.0000     0.1500\n  Europa   0.0625     0.3500\n  Oceanía  0.0000     0.0250\n# Distribución condicional de campeon dado continente\nprop.table(tabla2, margin = 1)         \n            campeón no campeón\n  África  0.0000000  1.0000000\n  América 0.1500000  0.8500000\n  Asia    0.0000000  1.0000000\n  Europa  0.1515152  0.8484848\n  Oceanía 0.0000000  1.0000000\n# Distribución condicional de continente dado campeon\nprop.table(tabla2, margin = 2)         \n             campeón no campeón\n  África  0.00000000 0.18055556\n  América 0.37500000 0.23611111\n  Asia    0.00000000 0.16666667\n  Europa  0.62500000 0.38888889\n  Oceanía 0.00000000 0.02777778"},{"path":"uso-de-archivos-de-datos.html","id":"cambiar-el-formato-de-un-data.frame","chapter":"6 Uso de archivos de datos","heading":"6.8.3 Cambiar el formato de un data.frame","text":"Dependiendo de los requerimientos de los análisis que estemos realizando, es muy frecuente necesitar cambiar el formato que tienen los datos. Por ejemplo, puede ser necesario apilar columnas una debajo de otra, resultando en un dataset con más filas (más largo) y menos columnas (más angosto). La situación contraria también se puede presentar y consiste en desacoplar información concatenada en una sola columna para ubicarla en varias columnas adyacentes, resultando en una dataset con más columnas (más ancho) y menos filas (más corto). Por supuesto, estas transformaciones tienen que hacerse sin mezclar los registros:Formato ancho largoArmemos un pequeño ejemplo de juguete para imaginar bien de qué se trata esto. Supongamos que tenemos datos con la cantidad vendida de 3 productos en distintos meses. De la siguiente forma se puede crear un data.frame “mano”, sin leer los datos desde un archivo:ese formato le decimos “ancho” porque una misma variable (cantidad de ventas) se ubica en muchas columnas, cuyos nombres se confunden con lo que en realidad debe ser otra variable, el mes. Queremos pasarlo un formato largo para que se vea así:Lo logramos con la función pivot_longer(), cuyos argumentos son:data: el dataset que vamos modificarcols: columnas que queremos apilar (o las que queremos apilar, si es más fácil de indicar)names_to: cómo queremos que se llame la nueva columna que contendrá los nombres de las columnas apiladas.values_to: cómo queremos que se llame la nueva columna que contendrá los valores de las columnas apiladas.Formato largo anchoA su vez, la función pivot_wider() permite pasar de formatos largos formatos anchos (al revés de pivot_longer()):Podríamos usarlo si queremos volver la versión original de la base. Para ello necesitamos usar estos argumentos:data: el datasetnames_from: columna que tiene los nombres de las nuevas columnasvalues_from: columna que tiene los valores que se distribuirán en las nuevas columnas","code":"\nejemplo1 <- data.frame(\n  producto = 1:3,\n  septiembre = c(234, 657, 989),\n  octubre = c(841, 621, 589),\n  noviembre = c(521, 147, 258)\n)\nejemplo1  producto septiembre octubre noviembre\n1        1        234     841       521\n2        2        657     621       147\n3        3        989     589       258# A tibble: 9 × 3\n  producto mes        ventas\n     <int> <chr>       <dbl>\n1        1 septiembre    234\n2        1 octubre       841\n3        1 noviembre     521\n4        2 septiembre    657\n5        2 octubre       621\n6        2 noviembre     147\n7        3 septiembre    989\n8        3 octubre       589\n9        3 noviembre     258\nejemplo2 <- pivot_longer(\n  data = ejemplo1, \n  cols = c(septiembre, octubre, noviembre), \n  names_to = \"mes\", \n  values_to = \"ventas\"\n)\nejemplo2# A tibble: 9 × 3\n  producto mes        ventas\n     <int> <chr>       <dbl>\n1        1 septiembre    234\n2        1 octubre       841\n3        1 noviembre     521\n4        2 septiembre    657\n5        2 octubre       621\n6        2 noviembre     147\n7        3 septiembre    989\n8        3 octubre       589\n9        3 noviembre     258\npivot_wider(\n  data = ejemplo2, \n  names_from = mes, \n  values_from = ventas\n)# A tibble: 3 × 4\n  producto septiembre octubre noviembre\n     <int>      <dbl>   <dbl>     <dbl>\n1        1        234     841       521\n2        2        657     621       147\n3        3        989     589       258"},{"path":"uso-de-archivos-de-datos.html","id":"fusionar-varios-data.frames","chapter":"6 Uso de archivos de datos","heading":"6.8.4 Fusionar varios data.frames","text":"Muchas veces, los análisis de datos involucran múltiples tablas o conjuntos de datos, los cuales deben combinarse para dar respuesta las preguntas de interés.. En estos casos importan las relaciones que se establecen entre las bases, más allá de los datos individuales que contenga cada uno de ellas. R nos ofrece diversas alternativas, las cuales dependen del tipo de relación que deseemos establecer entre los conjuntos de datos. Para definir estas relaciones debemos establecer qué variable funcionará como key o clave identificadora de los casos. Esta key debe figurar en ambos conjuntos de datos y representar lo mismo para que tenga sentido la relación. Las fusiones pueden clasificarse en dos grupos: las que producen modificaciones en uno de los conjuntos (mutating joins) y las que actúan como filtros (filtering joins).Mutating JoinsSon funciones que permiten unir conjuntos de datos, agregando en uno de ellos nuevas variables que provienen del otro, partir las filas con key coincidente:Hacen una mutación en el sentido de que añaden columnas uno de los conjuntos. Consideremos los siguientes conjuntos de datos, donde X1 será la clave:Veamos los distintos tipos de mutating joins:left_join(): esta opción devuelve un conjunto de datos que contiene todas las filas de la tabla de la izquierda, agregando las columnas de la tabla de la derecha.\n\nDatosUnidos <- left_join(Datos1, Datos2, = \"X1\")\nleft_join(): esta opción devuelve un conjunto de datos que contiene todas las filas de la tabla de la izquierda, agregando las columnas de la tabla de la derecha.right_join(): devuelve un conjunto de datos que contiene todas las filas de la tabla de la derecha y agrega columnas de la tabla izquierda.\n\nDatosUnidos <- right_join(Datos1, Datos2, = \"X1\")\nright_join(): devuelve un conjunto de datos que contiene todas las filas de la tabla de la derecha y agrega columnas de la tabla izquierda.inner_join(): devuelve un conjunto de datos con todas las columnas pero sólo para las observaciones (filas) cuyos identificadores se repiten en ambos conjuntos de datos.\n\nDatosUnidos <- inner_join(Datos1, Datos2, = \"X1\")\ninner_join(): devuelve un conjunto de datos con todas las columnas pero sólo para las observaciones (filas) cuyos identificadores se repiten en ambos conjuntos de datos.full_join(): devuelve un conjunto de datos con todas las filas y columnas, fusionando través de la key para las filas coincidentes entre ambos conjuntos.\n\nDatosUnidos <- full_join(Datos1, Datos2, = \"X1\")\nfull_join(): devuelve un conjunto de datos con todas las filas y columnas, fusionando través de la key para las filas coincidentes entre ambos conjuntos.Filtering JoinsSon funciones que permiten unir las observaciones de dos datasets, pero sólo afectan las filas sin alterar las columnas o variables. Funcionan como un filtro para las observaciones de una base de datos, de acuerdo si están o están (según el sentido que se elija) en otra base de datos:semi_join(): devuelve todas las observaciones que están en Datos1 que también están en Datos2, manteniendo sólo las columnas de Datos1. La relación se piensa como en inner_join(), pero el resultado es sólo la base Datos1 filtrada.\n\nDatosFiltrados <- semi_join(Datos1, Datos2, = \"X1\")\nsemi_join(): devuelve todas las observaciones que están en Datos1 que también están en Datos2, manteniendo sólo las columnas de Datos1. La relación se piensa como en inner_join(), pero el resultado es sólo la base Datos1 filtrada.anti_join(): devuelve aquellas observaciones que están en Datos1 pero están en Datos2, manteniendo las columnas de Datos1. Es el filtro contrario semi_join().\n\nDatosFiltrados <- anti_join(Datos1, Datos2, = \"X1\")\nanti_join(): devuelve aquellas observaciones que están en Datos1 pero están en Datos2, manteniendo las columnas de Datos1. Es el filtro contrario semi_join().Otros detalles sobre las keysHasta ahora hemos visto ejemplos donde las columnas que se usaron como claves identificadoras tenían valores únicos, sin repetir. Si la clave identificadora está duplicada en una de las bases de datos, la relación que R brindará con las funciones *_join() será del tipo “uno varios”:Si ambas bases de datos tienen claves duplicadas, las funciones *_join() devuelven todas las combinaciones posibles:Muchas veces nos interesa que las observaciones de los conjuntos de datos se relacionen través de más de una variable, es decir, queremos identificar cada registro través de más de una columna. En este caso tenemos 2 opciones:Inventar una nueva variable identificadora (key) que de algún modo contenga la información de esas variables e identifique cada observación de manera única (por ejemplo, pegar ambas columnas en una sola).Inventar una nueva variable identificadora (key) que de algún modo contenga la información de esas variables e identifique cada observación de manera única (por ejemplo, pegar ambas columnas en una sola).Indicarle directamente en R que la relación entre las bases de datos debe hacerse través de varias variables. En el argumento de las funciones *_join() ponemos el vector de variables = c(Vble1, Vble2, Vble3) mediante las cuales queremos que se relacionen las bases.Indicarle directamente en R que la relación entre las bases de datos debe hacerse través de varias variables. En el argumento de las funciones *_join() ponemos el vector de variables = c(Vble1, Vble2, Vble3) mediante las cuales queremos que se relacionen las bases.Por defecto, los conjuntos de datos se unen través de todas las variables que llevan el mismo nombre en ambos conjuntos, lo que suele denominarse unión natural. Si usamos para indicar qué columnas vinculan ambas bases, y entre las columnas mencionadas quedan variables con el mismo nombre en los dos conjuntos, entonces estas aparecerán repetidas en el dataset resultante, con una extensión en su nombre para identificar su origen (nombre_columna.x, nombre_columna.y).Las variables usadas como key podrían tener el mismo nombre en ambos conjuntos de datos. Por ejemplo, si en Datos1 tenemos DNI y en Datos2 tenemos Documento, es necesario renombrar estas columnas: al indicar = c(\"DNI\" = \"Documento\"), R las reconoce como la misma variable, las utilizará como clave y conservará el primer nombre (DNI en este ejemplo).","code":"- `left_join()`\n- `right_join()`\n- `inner_join()`\n- `full_join()`\nDatos1 <- data.frame(X1 = c(\"A\", \"B\", \"C\"), X2 = c(1, 2, 3))\nDatos2 <- data.frame(X1 = c(\"D\", \"B\", \"A\"), X3 = c(9, 7, 5))\nDatosUnidos <- left_join(Datos1, Datos2, by = \"X1\")\nDatosUnidos <- right_join(Datos1, Datos2, by = \"X1\")\nDatosUnidos <- inner_join(Datos1, Datos2, by = \"X1\")\nDatosUnidos <- full_join(Datos1, Datos2, by = \"X1\")\nDatosFiltrados <- semi_join(Datos1, Datos2, by = \"X1\")\nDatosFiltrados <- anti_join(Datos1, Datos2, by = \"X1\")\nd1 <- data.frame(\n  val_x = c(\"x1\", \"x2\", \"x3\", \"x4\"), \n  key = c(1, 2, 2, 1)\n)\n\nd2 <- data.frame(\n  key = c(1, 2), \n  val_y = c(\"y1\", \"y2\")\n)\n\nfull_join(d1, d2)\nd1 <- data.frame(\n  val_x = c(\"x1\", \"x2\", \"x3\", \"x4\"),\n  key = c(1, 2, 2, 3)\n)\n\nd2 <- data.frame(\n  key = c(1, 2, 2, 3),\n  val_y = c(\"y1\", \"y2\", \"y3\", \"y4\")\n)\n\nfull_join(d1, d2)"},{"path":"otros-tópicos.html","id":"otros-tópicos","chapter":"7 Otros tópicos","heading":"7 Otros tópicos","text":"Las reglas que aprendimos para escribir el pseudocódigo nos permiten traducir nuestros algoritmos cualquier lenguaje de computación de manera muy general y sencilla. Sin embargo, cada lenguaje de programación tiene diseñado su propio conjunto de funciones y estructuras de datos que facilitan algunas tareas. Una vez que hemos incorporado los conceptos básicos de la programación, podemos dedicarnos aprender las profundidades de un lenguaje en particular.En este capítulo vamos mencionar algunas cosas útiles sobre R y otras cuestiones.","code":""},{"path":"otros-tópicos.html","id":"la-consola","chapter":"7 Otros tópicos","heading":"7.1 La consola","text":"Cuando prendemos nuestra computadora nos encontramos con una interfaz gráfica implementada por el sistema operativo para que podamos hacer lo que necesitemos de manera sencilla usando ventanas y menúes, interactuando con el sistema través del mouse, teclado, micrófono o pantalla táctil. Sin embargo, es posible usar la compu de otra forma, escribiendo comandos especiales en una ventanita, llamada consola que es capaz de interpretarlos para hacer cualquier tipo de actividad, sin utilizar la interfaz gráfica. Años atrás, esta era la única manera disponible de usar la computadora (por ejemplo, con sistema operativo MS-DOS de Windows).Saber usar la consola es muy útil para automatizar actividades, realizar tareas administrativas, manipular varios archivos u objetos en simultáneo, lanzar correr proyectos grandes, conectarse de manera remota un servidor, etc. La primera vez que uno se mete en esto puede ser intimidante, pero hay que olvidar que ya estamos acostumbrados usar la consola de R, con lo cual esto de escribir comandos e interpretar respuestas es algo familiar.Los términos terminal, consola, shell y línea de comandos son términos que veces se usan como sinónimos sin demasiada preocupación, como si fuesen distintas formas de llamar lo mismo: una ventanita donde puedo escribir comandos y hacer que sucedan cosas en la computadora. Sin embargo, hay pequeñas diferencias entre estos conceptos, que acá tratamos de resumir (aunque ni siquiera entre informáticos hay mucho acuerdo en las definiciones):Shell (intérprete de línea de comandos): es software, es un programa que corre otros programas, procesa los comandos que recibe y devuelve resultados Ejemplo: Bash (la más común en sistemas Linux), sh, PowerShell, etc.Terminal: un programa que propicia la transferencia de input/output entre el usuario y la shell. ejecuta comandos, pero recibe los comandos que el shell va procesar. Ejemplos: Command prompt, guake, gnome-terminal, etc. Antiguamente, se trataba de las múltiples estaciones con un monitor y un teclado que una gran computadora tenía para ser usada por varias personas.Consola: un tipo particular de terminal, con una ventana escribir inputs y leer outputs. Históricamente, se trataba de un panel físico (consola) con controles. Siri o Cortana podrían considerarse terminales, pero son consolas, ya que hay que escribir para mandar comandos. Terminal y consola se usan prácticamente como sinónimos.Para abrir una terminal en Linux se puede usar el atajo ctrl + alt + t y en Windows se puede escribir cmd en Inicio.\nFigura 7.1: Abrir la terminal en Windows. En computadoras con Windows en español, en lugar de Command Prompt dice Símbolo del sistema.\nAsí luce la línea de comandos de Windows:\nFigura 7.2: Línea de comandos de Windows.\nLos comandos se escriben en la última línea continuación del símbolo >, que su vez está precedido por la ruta la carpeta que es el directorio de trabajo actual de la terminal, en este caso, C:\\Users\\Marcos (carpeta Marcos, dentro de la carpeta Users, en el disco C).Si bien hay muchísimos comandos para utilizar en la terminal, acá vamos mencionar algunos como ejemplo:Mostrar en qué carpeta (directorio) de la compu estamos situados: pwd en Linux o cd en WindowsListar todos los archivos y carpetas que tenemos en el directorio actual: ls en Linux o dir en WindowsEntrar una subcarpeta desde el directorio en el que estamos: cd nombresubcarpetaVer la ayuda de los comandos: helpLimpiar la consola: cls en Windows o clear en LinuxCerrar la consola: exitPor ejemplo, podemos ver todos los archivos que existen en el directorio actual con ls:\nFigura 7.3: Contenido del directorio actual (Windows).\nPara los siguientes ejemplos, trabajaremos en una carpeta llamada Ejemplos, cuyo path es C:\\Users\\Marcos\\Trabajo\\Ejemplos que tiene la siguiente composición:\nFigura 7.4: Carpeta en la cual deseamos trabajar.\nPodemos convertir dicha carpeta como nuestro nuevo directorio de trabajo con el comando cd (change directory):\nFigura 7.5: Cambio de directorio de trabajo y listado de archivos en el mismo.\nEn Windows hay una forma más directa de abrir la terminal y que ya tenga seteada como directorio de trabajo una carpeta deseada. Antes de abrir la terminal, vamos con el Explorador de archivos la carpeta en cuestión, nos posicionamos en la barra del explorador, escribimos cmd y le damos ENTER. Automáticamente se abrirá la terminal, con esta carpeta como directorio de referencia.\nFigura 7.6: Abrir la terminal desde una carpeta en particular en Windows.\nDesde la terminal podemos correr nuestros programas de R. Hacer esto es necesario cuando tenemos que programar alguna tarea de gran escala que se ejecutará de manera remota en algún servidor o cuando necesitamos encapsular nuestro programa para que otros lo puedan correr sin siquiera saber nada de R.Veamos un ejemplo. En la carpeta C:\\Users\\Marcos\\Trabajo\\Ejemplos tengo guardado el siguiente script, en un archivo llamado mi_programa.R que tiene este contenido:Para ejecutar este programa desde la terminal, sin abrir RStudio o R, utilizo el comando Rscript, que le indica la computadora que el contenido del archivo mi_programa.R debe ser evaluado por R. Esto es lo que se observa en la consola:\nFigura 7.7: Correr el programa de R desde la consola en Windows.\nTodo lo que en el programa estaba encerrado en una llamada la función cat() es lo que se muestra como mensajes en la terminal. Notar que la instrucción RScript mi_programa.R funcione, debemos tener como directorio de trabajo aquella carpeta que aloja al archivo mi_programa.R, en caso contrario el sistema nos alertará que el mismo está disponible.Para que lo anterior funcione en Windows, hay que indicarle al sistema operativo que Rscript es un comando que se instaló con R y que lo puede encontrar en la carpeta de los archivos del programa R. Esto hay que hacerlo una sola vez editando las variables de entorno de Windows, que son cadenas de texto que contienen información acerca del sistema para determinar, por ejemplo, dónde buscar algunos archivos. Esto se logra siguiendo estos pasos:Fijarse en qué carpeta de la compu está instalado R. Seguramente lo encuentres si, abriendo el explorador de archivo, vas siguiendo este camino: Este equipo > Windows (C:) > Archivos de programa > R > R-version > bin. En esta carpeta tiene que haber dos archivos, llamados R.exe y Rscript.exe. Si es así, hacé clic con el botón derecho del mouse sobre cualquiera de ellos, luego en “Propiedades” y copiá el path que aparece en “Ubicación” (deberías copiar algo como C:\\Program Files\\R\\R-3.6.0\\bin).En Inicio, escribir “Entorno” y hacer clic en la opción “Editar las variables de entorno del sistema (panel de control)”.Hacer clic en el botón “Variables de entorno”.En el cuadro “Variables del sistema”, hacer clic en la variable “Path” y luego en “Editar”.Hacer clic en “Nuevo”, pegar la dirección C:\\Program Files\\R\\R-3.6.0\\bin y dar Enter. Luego, hacer clic en “Aceptar” tres veces para cerrar todo.¡Listo! Ya podés correr tus programas desde la consola con el comando Rscript.Lo bueno de esto es que si corremos nuestros programas desde la terminal, podemos hacer cosas interactivas. Por ejemplo, para todo lo que pusimos LEER en nuestros pseudocódigos, ahora podemos hacer verdaderamente que la persona usuaria del programa provea los valores correspondientes.Veamos algunos ejemplos.Práctica 2, Ejercicio 1: paridad de un númeroLa función scan() es la que permite escanear o leer valores que los usuarios ingresen por la terminal. Entre sus argumentos tenemos file, que si lo seteamos como file = \"stdin\" indica que vamos leer información desde la consola. Otros argumentos que son de utilidad incluyen n = 1, que indica que sólo leeremos un valor y quiet = TRUE que le pide esta función que emita ningún mensaje. Por ejemplo, si el siguiente código se guarda en el archivo paridad.R y es ejecutado desde la consola, le va pedir la persona que lo esté usando que indique cualquier número y luego le va comunicar si es par o impar:Esto es lo que ocurre en la terminal:\nFigura 7.8: Programa paridad.R.\nPráctica 2, Ejercicio 3: salarioEn este ejemplo, tenemos que leer tres valores, dos de lo cuales son de tipo carácter. Para esto tenemos que agregar en la función scan() el argumento = \"\", que admite el ingreso de caracteres alfanuméricos (por default scan() sòlo espera recibir valores numéricos). Si el siguiente código se guarda en el archivo salario.R y se lo ejecuta desde la consola, produce el resultado que se muestra en la imagen:\nFigura 7.9: Programa salario.R.\nPráctica 4, Ejercicio 1: suma de elementos de un vector28En este ejercicio escribimos una función para sumar los elementos de un vector. Vamos ver cómo hacer para que un usuario nos diga cuáles son los valores que quiere sumar desde la consola. Primero preguntamos cuántos números se desean sumar y luego los recibimos en el vector v. Si el siguiente código queda guardado en el archivo suma.R y se lo corre desde la terminal, produce el resultado que se muestra en la imagen.\nFigura 7.10: Programa suma.R.\n","code":"\na <- \"¡Hola, Mundo!\"\nb <- 3\nd <- 5\ncat(\"==========================================\\n\")\ncat(\"                 RESULTADOS               \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"El valor de b es \", b, \", mientras que d vale \", d, \".\\n\\n\", sep = \"\")\ncat(\"La suma entre ellos es igual a \", b + d, \".\\n\\n\", sep = \"\")\ncat(\"Este es un saludo:\", a)\ncat(\"==========================================\\n\")\ncat(\"           PARIDAD DE UN NÚMERO           \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"Ingrese un número entero y presione enter:\\n\")\nn <- scan(file = \"stdin\", n = 1, quiet = TRUE)\nif (n %% 2 == 0) {\n    cat(n, \"es par\\n\")\n} else {\n    cat(n, \"es impar\\n\")\n}\ncat(\"==========================================\\n\")\ncat(\"           CÁLCULO DEL SALARIO            \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"Ingrese la cantidad de horas trabajadas:\\n\")\nhoras <- scan(\"stdin\", n = 1, quiet = TRUE)\ncat(\"\\nIngrese el día de la semana (DOM LUN MAR MIE JUE VIE SAB):\\n\")\ndia <- scan(\"stdin\", what = \"\", n = 1, quiet = TRUE)\ncat(\"\\nIngrese el turno (M T N):\\n\")\nturno <- scan(\"stdin\", what = \"\", n = 1, quiet = TRUE)\n\nsalario <- horas * 400\nif (turno == \"N\") {\n    salario <- salario + horas * 200\n}\nif (turno == \"DOM\") {\n    salario <- salario + horas * 100\n}\ncat(\"\\nEl salario que se debe abonar es $\", salario, \"\\n\", sep = \"\")\ncat(\"==========================================\\n\")\ncat(\"              SUMA DE NÚMEROS             \\n\")\ncat(\"==========================================\\n\\n\")\ncat(\"¿Cuántos números va a ingresar?\\n\")\nn <- scan(\"stdin\", n = 1, quiet = TRUE)\ncat(\"\\nIngrese los números, presionando Enter luego de cada uno:\\n\")\nv <- scan(\"stdin\", n = n, quiet = TRUE)\nsuma <- 0\nfor (i in 1:length(v)) {\n    suma <- suma + v[i]\n}\ncat(\"\\nLa suma de los números es:\", suma, \"\\n\")"},{"path":"otros-tópicos.html","id":"uso-de-argumentos-en-la-línea-de-comandos-al-ejecutar-código-de-r","chapter":"7 Otros tópicos","heading":"7.2 Uso de argumentos en la línea de comandos al ejecutar código de R","text":"En ejemplos anteriores hemos visto cómo capturar distintas piezas de información de forma interactiva mediante la función scan() mientras estamos ejecutando un programa de R desde la línea de comandos.En otras ocasiones, en lugar de pausar la ejecución del programa la espera de que el usuario ingrese algún valor, es conveniente especificar algunas opciones directamente en la instrucción Rscript que ejecuta el código.Por ejemplo, imaginemos que tenemos un programa llamado resumen.R que se encarga de hacer un análisis descriptivo de un conjunto de datos que están guardados en un archivo de texto de nombre 02_05_22.txt. Al ejecutar este programa desde la terminal, podemos indicar el nombre del archivo como un argumento adicional de esta forma:Ahora supongamos que este mismo tipo de análisis se repite todos los días con datos nuevos. En lugar de modificar nuestro script resumen.R, ejecutamos lo anterior con el nombre del archivo que corresponda y listo:Para que esto funcione, el programa que está guardado en resumen.R debe ser capaz de capturar el nombre del archivo que tiene leer y que el usuario se lo está pasando como un argumento adicional en la instrucción Rscript.La función que se encarga de capturar los argumentos adicionales que enviamos desde la terminal es commandArgs(). Toma todos los elementos que escribamos y los reúne en un vector de tipo carácter. Por ejemplo, el archivo ejemplo1.R tiene el siguiente contenido:Al ejecutarlo desde la línea de comandos con los argumentos “hola”, “chau” y “4” obtenemos:Si lo ejecutamos sin argumentos:Ahora vamos suponer que el programa ejemplo2.R tiene como objetivo contar un chiste o decir un refrán, según lo que se le pida en el único argumento que se le pasa al correrlo desde la terminal. Si el argumento es igual “chiste”, se cuenta el chiste; si es igual “refran” se cuenta el refrán; y en otro caso se hace nada. El contenido del archivo es:Ejecutamos este archivo pasando distintos valores para su argumento:Podemos controlar la cantidad de argumentos admitidos generando errores en el código para aquellas situaciones donde el usuario envíe menos o más que la cantidad deseada. Por ejemplo, en el caso anterior, es obligatorio enviar uno y sólo un argumento:Veamos lo que pasa si cumplimos o con la cantidad exacta de argumentos que hay que pasarle al código de R:Imaginemos por último que es obligatorio pasar un primer argumento (“chiste” o “refran”) y que opcionalmente se puede pasar un segundo argumento, que se va tratar de un número para indicar cuántas veces queremos que el chiste o el refrán se repita. Como todos los argumentos se pasan como datos de tipo carácter, para poder usar el número tendremos que convertirlo dato de tipo numérico.Veamos ahora cómo funciona:Si querés probar estos ejemplos, podés crear los archivos de código mencionados copiando y pegando las instrucciones o descargarlos de este enlace.Además de la función commandArgs() existen paquetes de R para poder trabajar con argumentos y opciones de formas mucho más elaboradas, como los paquetes argparse y optparse, entre otros.","code":"Rscript resumen.R 02_05_22.txtRscript resumen.R 03_05_22.txt\nRscript resumen.R 04_05_22.txt\nRscript resumen.R 05_05_22.txt\n# Capturar los argumentos pasados desde la terminal en un vector\nargs <- commandArgs(trailingOnly = TRUE)\n\n# Contar cuántos argumentos nos pasaron\ncat(\"Nos pasaron\", length(args), \"argumentos.\\n\\n\")\n\n# Mostrar los argumentos que nos pasaron\ncat(\"Los argumentos que nos pasaron son:\\n\")\ncat(args, \"\\n\")\n\n# Aunque los argumentos sean números, son tomados como carácter\ncat(\"\\nLos argumentos se toman como valores de tipo:\\n\")\nclass(args)Rscript ejemplo1.R hola chau 4WARNING: ignoring environment value of R_HOME\nNos pasaron 3 argumentos.\n\nLos argumentos que nos pasaron son:\nhola chau 4 \n\nLos argumentos se toman como valores de tipo:\n[1] \"character\"Rscript ejemplo1.RWARNING: ignoring environment value of R_HOME\nNos pasaron 0 argumentos.\n\nLos argumentos que nos pasaron son:\n \n\nLos argumentos se toman como valores de tipo:\n[1] \"character\"\n# Capturar los argumentos pasados desde la terminal en un vector\nargs <- commandArgs(trailingOnly = TRUE)\n\nif (args[1] == \"chiste\") {\n    cat(\"- Juan, cómo has cambiado.\\n- Yo no soy Juan.\\n- Más a mi favor.\\n\\n\")\n} else if (args[1] == \"refran\") {\n    cat(\"No por mucho madrugar amanece más temprano.\\n\\n\")\n} else {\n    # Genero un error para que el programa se detenga, avisando lo que pasa\n    stop(\"El argumento provisto debe ser igual a chiste o refran.\\n\")\n}Rscript ejemplo2.R refranWARNING: ignoring environment value of R_HOME\nNo por mucho madrugar amanece más temprano.Rscript ejemplo2.R chisteWARNING: ignoring environment value of R_HOME\n- Juan, cómo has cambiado.\n- Yo no soy Juan.\n- Más a mi favor.Rscript ejemplo2.R holaWARNING: ignoring environment value of R_HOME\nError: El argumento provisto debe ser igual a chiste o refran.\nExecution halted\n# Capturar los argumentos pasados desde la terminal en un vector\nargs <- commandArgs(trailingOnly = TRUE)\n\n# Controlar la cantidad de argumentos\nif (length(args) == 0 || length(args) > 1) {\n    stop(\"Debe proveer exactamente un argumento, que debe ser igual a chiste o refran.\\n\")\n}\n\nif (args[1] == \"chiste\") {\n    cat(\"- Juan, cómo has cambiado.\\n- Yo no soy Juan.\\n- Más a mi favor.\\n\\n\")\n} else if (args[1] == \"refran\") {\n    cat(\"No por mucho madrugar amanece más temprano.\\n\\n\")\n} else {\n    # Genero un error para que el programa se detenga, avisando lo que pasa\n    stop(\"El argumento provisto debe ser igual a chiste o refran.\\n\")\n}Rscript ejemplo3.RWARNING: ignoring environment value of R_HOME\nError: Debe proveer exactamente un argumento, que debe ser igual a chiste o refran.\nExecution haltedRscript ejemplo3.R chiste refranWARNING: ignoring environment value of R_HOME\nError: Debe proveer exactamente un argumento, que debe ser igual a chiste o refran.\nExecution haltedRscript ejemplo3.R chisteWARNING: ignoring environment value of R_HOME\n- Juan, cómo has cambiado.\n- Yo no soy Juan.\n- Más a mi favor.\n# Capturar los argumentos pasados desde la terminal en un vector\nargs <- commandArgs(trailingOnly = TRUE)\n\n# Si no proveyó argumentos, generar un error y que se detenga el programa\nif (length(args) == 0) {\n    stop(\"Debe proveer al menos un argumento (chiste o refran).\")\n}\n\n# Si proveyó más de 2 argumentos, generar un error y que se detenga el programa\nif (length(args) > 2) {\n    stop(\"No debe proveer más de 2 argumentos. El primero es obligatorio (chiste o refran) y el segundo es opcional (un número que indica la cantidad de veces a repetir el chiste o el refrán).\")\n}\n\n# Si no hay segundo argumento, args[2] es NA\nif (is.na(args[2])) {\n    n <- 1\n} else {\n    n <- as.numeric(args[2])\n}\n\n# Repetir n veces\nfor (i in 1:n) {\n    if (args[1] == \"chiste\") {\n        cat(\"- Juan, cómo has cambiado.\\n- Yo no soy Juan.\\n- Más a mi favor.\\n\\n\")\n    } else if (args[1] == \"refran\") {\n        cat(\"No por mucho madrugar amanece más temprano.\\n\\n\")\n    } else {\n        # Genero un error para que el programa se detenga, avisando lo que pasa\n        stop(\"El argumento provisto debe ser igual a chiste o refran.\\n\")\n    }\n}Rscript ejemplo4.R refran 5WARNING: ignoring environment value of R_HOME\nNo por mucho madrugar amanece más temprano.\n\nNo por mucho madrugar amanece más temprano.\n\nNo por mucho madrugar amanece más temprano.\n\nNo por mucho madrugar amanece más temprano.\n\nNo por mucho madrugar amanece más temprano.Rscript ejemplo4.R chiste 3WARNING: ignoring environment value of R_HOME\n- Juan, cómo has cambiado.\n- Yo no soy Juan.\n- Más a mi favor.\n\n- Juan, cómo has cambiado.\n- Yo no soy Juan.\n- Más a mi favor.\n\n- Juan, cómo has cambiado.\n- Yo no soy Juan.\n- Más a mi favor.Rscript ejemplo4.R refranWARNING: ignoring environment value of R_HOME\nNo por mucho madrugar amanece más temprano.Rscript ejemplo4.RWARNING: ignoring environment value of R_HOME\nError: Debe proveer al menos un argumento (chiste o refran).\nExecution halted"},{"path":"bibliografía.html","id":"bibliografía","chapter":"Bibliografía","heading":"Bibliografía","text":"Bibliografía de la asignaturaCasale, Juan Carlos (2012). Introducción la Programación. Buenos Aires: Editorial Fox Andina.Cerrada Somolinos, José y Collado Machuca, Manuel (2015). Fundamentos De Programación. Madrid: Editorial Universitaria Ramón Areces.Martínez López, Pablo (2013). Las bases conceptuales de la Programación: una nueva forma de aprender programar. La Plata: Editorial de la Universidad Nacional de Quilmes.Quetglás, Gregorio; Toledo Lobo, Francisco; Cerverón Lleó, Vicente (1995). Fundamentos de informática y programación. Valencia: Editorial V.J.Wicham, Hadley (2019). Advanced R. Florida: Editorial Chapman Hall/CRC.Textos consultados para la reseña histórica de la programación:Ada Lovelace - Wikipedia. Consultado el 21/04/21.Difference engine - Wikipedia. Consultado el 21/04/21.Generaciones de las computadoras. Consultado el 21/04/21.Generaciones de ordenadores. Consultado el 21/04/21.Historia de la programación - Wikipedia. Consultado el 21/04/21.Konrad Zuse - people.idsia.ch. Consultado el 21/04/21.Los huesos de Napier, la multiplicación árabe y tú. Consultado el 21/04/21.Significado de computación. Consultado el 21/04/21.Otros artículos consultadosAprender programación - Curso de Java. Consultado el 25/04/21.Fundamentos de programación. Consultado el 25/04/21.Hardware y software: definiciones y conceptos. Consultado el 25/04/21.Introduction programming. Consultado el 25/04/21.Programación estructurada. Consultado el 25/04/21.7 Common Types Errors Programming Avoid . Consultado el 25/04/21.abstraction programming?. Consultado el 25/04/21.","code":""}]
